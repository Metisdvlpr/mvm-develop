{
  "address": "0xCCB4a3279310Ed85A3ff1Ef84DE1a9d91fAF56e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_libAddressManager",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_txDataSliceSize",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakeSeqSeconds",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stakeCost",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_batchIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint40",
          "name": "_shouldStartAtElement",
          "type": "uint40"
        },
        {
          "indexed": false,
          "internalType": "uint24",
          "name": "_totalElementsToAppend",
          "type": "uint24"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_txBatchTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "_txBatchHash",
          "type": "bytes32"
        }
      ],
      "name": "AppendBatchElement",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_batchIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_stakeAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_verified",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_sequencer",
          "type": "bool"
        }
      ],
      "name": "SetBatchTxData",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_batchIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "VerifierStake",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONFIG_OWNER_KEY",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TXDATA_SUBMIT_TIMEOUT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "appendSequencerBatchByChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getAddressChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_batchIndex",
          "type": "uint256"
        }
      ],
      "name": "getBatchTxData",
      "outputs": [
        {
          "internalType": "string",
          "name": "txData",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "verified",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakeCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakeSeqSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTxBatchSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTxDataSliceCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTxDataSliceSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        }
      ],
      "name": "isWhiteListed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "libAddressManager",
      "outputs": [
        {
          "internalType": "contract Lib_AddressManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        }
      ],
      "name": "setAddressChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_batchIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sliceIndex",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_data",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_end",
          "type": "bool"
        }
      ],
      "name": "setBatchTxData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_batchIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sliceIndex",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_data",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_end",
          "type": "bool"
        }
      ],
      "name": "setBatchTxDataForStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_batchIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sliceIndex",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_data",
          "type": "string"
        },
        {
          "internalType": "bool",
          "name": "_end",
          "type": "bool"
        }
      ],
      "name": "setBatchTxDataForVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_stakeCost",
          "type": "uint256"
        }
      ],
      "name": "setStakeCost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_seconds",
          "type": "uint256"
        }
      ],
      "name": "setStakeSeqSeconds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "name": "setTxBatchSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_count",
          "type": "uint256"
        }
      ],
      "name": "setTxDataSliceCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        }
      ],
      "name": "setTxDataSliceSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifier",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_allowed",
          "type": "bool"
        }
      ],
      "name": "setWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakeSeqSeconds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "txBatchSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "txDataSliceCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "txDataSliceSize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_batchIndex",
          "type": "uint256"
        }
      ],
      "name": "verifierStake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_chainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_batchIndex",
          "type": "uint256"
        }
      ],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x37a36e2040e36606a31152fc3b51a081ea3cec54d108c694f8fd8c773454d8d5",
  "receipt": {
    "to": null,
    "from": "0x67bE001A254B81Dc44EaB9F5a7C66889a5c009AE",
    "contractAddress": "0xCCB4a3279310Ed85A3ff1Ef84DE1a9d91fAF56e0",
    "transactionIndex": 46,
    "gasUsed": "3731900",
    "logsBloom": "0x
    "blockHash": "0xbbecfb0c90df0fadd9aa15c21e5b9047596c5af581351aadf950f2c9fad13b2e",
    "transactionHash": "0x37a36e2040e36606a31152fc3b51a081ea3cec54d108c694f8fd8c773454d8d5",
    "logs": [],
    "blockNumber": 10400233,
    "cumulativeGasUsed": "13433908",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC9EB2B0bD7dbA69bb72886E9cF5da34d1Ca88C38",
    90000,
    86400,
    "100000000000000000"
  ],
  "solcInputHash": "e13cf1fae44a0e5e7e44bd3761fc9d78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_libAddressManager\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_txDataSliceSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeSeqSeconds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakeCost\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_batchIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint40\",\"name\":\"_shouldStartAtElement\",\"type\":\"uint40\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"_totalElementsToAppend\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_txBatchTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"_txBatchHash\",\"type\":\"bytes32\"}],\"name\":\"AppendBatchElement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_batchIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_stakeAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_verified\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_sequencer\",\"type\":\"bool\"}],\"name\":\"SetBatchTxData\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_batchIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"VerifierStake\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONFIG_OWNER_KEY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TXDATA_SUBMIT_TIMEOUT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"appendSequencerBatchByChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAddressChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_batchIndex\",\"type\":\"uint256\"}],\"name\":\"getBatchTxData\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"txData\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"verified\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakeSeqSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTxBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTxDataSliceCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTxDataSliceSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"name\":\"isWhiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"libAddressManager\",\"outputs\":[{\"internalType\":\"contract Lib_AddressManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"setAddressChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_batchIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sliceIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_end\",\"type\":\"bool\"}],\"name\":\"setBatchTxData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_batchIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sliceIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_end\",\"type\":\"bool\"}],\"name\":\"setBatchTxDataForStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_batchIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sliceIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_data\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"_end\",\"type\":\"bool\"}],\"name\":\"setBatchTxDataForVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_stakeCost\",\"type\":\"uint256\"}],\"name\":\"setStakeCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seconds\",\"type\":\"uint256\"}],\"name\":\"setStakeSeqSeconds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setTxBatchSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_count\",\"type\":\"uint256\"}],\"name\":\"setTxDataSliceCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"}],\"name\":\"setTxDataSliceSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeSeqSeconds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txBatchSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txDataSliceCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txDataSliceSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_batchIndex\",\"type\":\"uint256\"}],\"name\":\"verifierStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_batchIndex\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"appendSequencerBatchByChainId()\":{\"details\":\"This function uses a custom encoding scheme for efficiency reasons.\"},\"getBatchTxData(uint256,uint256)\":{\"params\":{\"_batchIndex\":\"batch index of CTC.\",\"_chainId\":\"chain id.\"},\"returns\":{\"txData\":\"txData\",\"verified\":\"verified\"}},\"getStakeSeqSeconds()\":{\"returns\":{\"_0\":\"Seconds the Sequencer can sumbit transaction data after verifier staking.\"}},\"resolve(string)\":{\"params\":{\"_name\":\"Name to resolve an address for.\"},\"returns\":{\"_0\":\"Address associated with the given name.\"}},\"setAddressChainId(address,uint256)\":{\"params\":{\"_address\":\"contract address.\",\"_chainId\":\"chain id.\"}},\"setBatchTxData(uint256,uint256,uint256,string,bool)\":{\"params\":{\"_batchIndex\":\"batch index of CTC.\",\"_chainId\":\"chain id.\",\"_data\":\"tx data hex.\",\"_end\":\"sliceIndex is the end or not.\",\"_sliceIndex\":\"slice index.\"}},\"setBatchTxDataForStake(uint256,uint256,uint256,string,bool)\":{\"params\":{\"_batchIndex\":\"batch index of CTC.\",\"_chainId\":\"chain id.\",\"_data\":\"tx data hex.\",\"_end\":\"sliceIndex is the end or not.\",\"_sliceIndex\":\"slice index.\"}},\"setBatchTxDataForVerifier(uint256,uint256,uint256,string,bool)\":{\"params\":{\"_batchIndex\":\"batch index of CTC.\",\"_chainId\":\"chain id.\",\"_data\":\"tx data hex.\",\"_end\":\"sliceIndex is the end or not.\",\"_sliceIndex\":\"slice index.\"}},\"setStakeCost(uint256)\":{\"params\":{\"_stakeCost\":\"Stake cost for verifier.\"}},\"setStakeSeqSeconds(uint256)\":{\"params\":{\"_seconds\":\"Seconds the Sequencer can sumbit transaction data after verifier staking.\"}},\"setTxBatchSize(uint256)\":{\"params\":{\"_size\":\"Batch size of batch.\"}},\"setTxDataSliceCount(uint256)\":{\"params\":{\"_count\":\"Slice count per batch transaction data.\"}},\"setTxDataSliceSize(uint256)\":{\"params\":{\"_size\":\"Slice size of batch transaction data.\"}},\"verifierStake(uint256,uint256)\":{\"params\":{\"_batchIndex\":\"batch index of CTC.\",\"_chainId\":\"chain id.\"}},\"withdrawStake(uint256,uint256)\":{\"params\":{\"_batchIndex\":\"batch index of CTC.\",\"_chainId\":\"chain id.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"appendSequencerBatchByChainId()\":{\"notice\":\"Allows the sequencer to append a batch of transactions.\"},\"getAddressChainId(address)\":{\"notice\":\"Gets address's chain id.\"},\"getBatchTxData(uint256,uint256)\":{\"notice\":\"Gets batch tx data.\"},\"getStakeCost()\":{\"notice\":\"Gets the verifier stake cost of ETH.\"},\"getStakeSeqSeconds()\":{\"notice\":\"Gets seconds can submit transaction data after staking.\"},\"getTxBatchSize()\":{\"notice\":\"Gets batch size per batch.\"},\"getTxDataSliceCount()\":{\"notice\":\"Gets slice count per batch transaction data.\"},\"getTxDataSliceSize()\":{\"notice\":\"Gets batch transaction data slice size per submit.\"},\"resolve(string)\":{\"notice\":\"Resolves the address associated with a given name.\"},\"setAddressChainId(address,uint256)\":{\"notice\":\"Sets address's chain id.\"},\"setBatchTxData(uint256,uint256,uint256,string,bool)\":{\"notice\":\"Sets batch tx data.\"},\"setBatchTxDataForStake(uint256,uint256,uint256,string,bool)\":{\"notice\":\"Sets batch tx data for stake.\"},\"setBatchTxDataForVerifier(uint256,uint256,uint256,string,bool)\":{\"notice\":\"Sets batch tx data for verifier.\"},\"setStakeCost(uint256)\":{\"notice\":\"Sets the verifier stake cost of ETH.\"},\"setStakeSeqSeconds(uint256)\":{\"notice\":\"Sets seconds can submit transaction data after staking.\"},\"setTxBatchSize(uint256)\":{\"notice\":\"Sets batch size per batch.\"},\"setTxDataSliceCount(uint256)\":{\"notice\":\"Sets slice count per batch transaction data.\"},\"setTxDataSliceSize(uint256)\":{\"notice\":\"Sets batch transaction data slice size per submit.\"},\"verifierStake(uint256,uint256)\":{\"notice\":\"Stake by verifier.\"},\"withdrawStake(uint256,uint256)\":{\"notice\":\"Withdraw stake by verifier.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MVM/MVM_CanonicalTransaction.sol\":\"MVM_CanonicalTransaction\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/L1/rollup/ICanonicalTransactionChain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\\"../../libraries/codec/Lib_OVMCodec.sol\\\";\\n\\n/* Interface Imports */\\nimport { IChainStorageContainer } from \\\"./IChainStorageContainer.sol\\\";\\n\\n/**\\n * @title ICanonicalTransactionChain\\n */\\ninterface ICanonicalTransactionChain {\\n    /**********\\n     * Events *\\n     **********/\\n    event QueueGlobalMetadataSet(\\n        address _sender,\\n        uint256 _chainId,\\n        bytes27 _globalMetadata\\n    );\\n    \\n    event QueuePushed(\\n        address _sender,\\n        uint256 _chainId,\\n        Lib_OVMCodec.QueueElement _object\\n    );\\n\\n    event QueueSetted(\\n        address _sender,\\n        uint256 _chainId,\\n        uint256 _index,\\n        Lib_OVMCodec.QueueElement _object\\n    );\\n\\n    event QueueElementDeleted(\\n        address _sender,\\n        uint256 _chainId,\\n        uint256 _index,\\n        bytes27 _globalMetadata\\n    );\\n\\n    event BatchesGlobalMetadataSet(\\n        address _sender,\\n        uint256 _chainId,\\n        bytes27 _globalMetadata\\n    );\\n    \\n    event BatchPushed(\\n        address _sender,\\n        uint256 _chainId,\\n        bytes32 _object,\\n        bytes27 _globalMetadata\\n    );\\n\\n    event BatchSetted(\\n        address _sender,\\n        uint256 _chainId,\\n        uint256 _index,\\n        bytes32 _object\\n    );\\n\\n    event BatchElementDeleted(\\n        address _sender,\\n        uint256 _chainId,\\n        uint256 _index,\\n        bytes27 _globalMetadata\\n    );\\n\\n    event L2GasParamsUpdated(\\n        uint256 l2GasDiscountDivisor,\\n        uint256 enqueueGasCost,\\n        uint256 enqueueL2GasPrepaid\\n    );\\n\\n    event TransactionEnqueued(\\n        uint256 _chainId,\\n        address indexed _l1TxOrigin,\\n        address indexed _target,\\n        uint256 _gasLimit,\\n        bytes _data,\\n        uint256 indexed _queueIndex,\\n        uint256 _timestamp\\n    );\\n\\n    event QueueBatchAppended(\\n        uint256 _chainId,\\n        uint256 _startingQueueIndex,\\n        uint256 _numQueueElements,\\n        uint256 _totalElements\\n    );\\n\\n    event SequencerBatchAppended(\\n        uint256 _chainId,\\n        uint256 _startingQueueIndex,\\n        uint256 _numQueueElements,\\n        uint256 _totalElements\\n    );\\n\\n    event TransactionBatchAppended(\\n        uint256 _chainId,\\n        uint256 indexed _batchIndex,\\n        bytes32 _batchRoot,\\n        uint256 _batchSize,\\n        uint256 _prevTotalElements,\\n        bytes _extraData\\n    );\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct BatchContext {\\n        uint256 numSequencedTransactions;\\n        uint256 numSubsequentQueueTransactions;\\n        uint256 timestamp;\\n        uint256 blockNumber;\\n    }\\n\\n    /*******************************\\n     * Authorized Setter Functions *\\n     *******************************/\\n\\n    /**\\n     * Allows the Burn Admin to update the parameters which determine the amount of gas to burn.\\n     * The value of enqueueL2GasPrepaid is immediately updated as well.\\n     */\\n    function setGasParams(uint256 _l2GasDiscountDivisor, uint256 _enqueueGasCost) external;\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Accesses the batch storage container.\\n     * @return Reference to the batch storage container.\\n     */\\n    function batches() external view returns (IChainStorageContainer);\\n\\n    /**\\n     * Accesses the queue storage container.\\n     * @return Reference to the queue storage container.\\n     */\\n    function queue() external view returns (IChainStorageContainer);\\n\\n    /**\\n     * Retrieves the total number of elements submitted.\\n     * @return _totalElements Total submitted elements.\\n     */\\n    function getTotalElements() external view returns (uint256 _totalElements);\\n\\n    /**\\n     * Retrieves the total number of batches submitted.\\n     * @return _totalBatches Total submitted batches.\\n     */\\n    function getTotalBatches() external view returns (uint256 _totalBatches);\\n\\n    /**\\n     * Returns the index of the next element to be enqueued.\\n     * @return Index for the next queue element.\\n     */\\n    function getNextQueueIndex() external view returns (uint40);\\n\\n    /**\\n     * Gets the queue element at a particular index.\\n     * @param _index Index of the queue element to access.\\n     * @return _element Queue element at the given index.\\n     */\\n    function getQueueElement(uint256 _index)\\n        external\\n        view\\n        returns (Lib_OVMCodec.QueueElement memory _element);\\n\\n    /**\\n     * Returns the timestamp of the last transaction.\\n     * @return Timestamp for the last transaction.\\n     */\\n    function getLastTimestamp() external view returns (uint40);\\n\\n    /**\\n     * Returns the blocknumber of the last transaction.\\n     * @return Blocknumber for the last transaction.\\n     */\\n    function getLastBlockNumber() external view returns (uint40);\\n\\n    /**\\n     * Get the number of queue elements which have not yet been included.\\n     * @return Number of pending queue elements.\\n     */\\n    function getNumPendingQueueElements() external view returns (uint40);\\n\\n    /**\\n     * Retrieves the length of the queue, including\\n     * both pending and canonical transactions.\\n     * @return Length of the queue.\\n     */\\n    function getQueueLength() external view returns (uint40);\\n\\n    /**\\n     * Adds a transaction to the queue.\\n     * @param _target Target contract to send the transaction to.\\n     * @param _gasLimit Gas limit for the given transaction.\\n     * @param _data Transaction data.\\n     */\\n    function enqueue(\\n        address _target,\\n        uint256 _gasLimit,\\n        bytes memory _data\\n    ) external;\\n\\n    /**\\n     * Allows the sequencer to append a batch of transactions.\\n     * @dev This function uses a custom encoding scheme for efficiency reasons.\\n     * .param _shouldStartAtElement Specific batch we expect to start appending to.\\n     * .param _totalElementsToAppend Total number of batch elements we expect to append.\\n     * .param _contexts Array of batch contexts.\\n     * .param _transactionDataFields Array of raw transaction data.\\n     */\\n    function appendSequencerBatch(\\n        // uint40 _shouldStartAtElement,\\n        // uint24 _totalElementsToAppend,\\n        // BatchContext[] _contexts,\\n        // bytes[] _transactionDataFields\\n    )\\n        external;\\n        \\n    //added chain id function\\n    \\n    /**\\n     * Retrieves the total number of elements submitted.\\n     * @param _chainId identity for the l2 chain.\\n     * @return _totalElements Total submitted elements.\\n     */\\n    function getTotalElementsByChainId(\\n        uint256 _chainId\\n        )\\n        external\\n        view\\n        returns (\\n            uint256 _totalElements\\n        );\\n\\n    /**\\n     * Retrieves the total number of batches submitted.\\n     * @param _chainId identity for the l2 chain.\\n     * @return _totalBatches Total submitted batches.\\n     */\\n    function getTotalBatchesByChainId(\\n        uint256 _chainId\\n        )\\n        external\\n        view\\n        returns (\\n            uint256 _totalBatches\\n        );\\n\\n    /**\\n     * Returns the index of the next element to be enqueued.\\n     * @param _chainId identity for the l2 chain.\\n     * @return Index for the next queue element.\\n     */\\n    function getNextQueueIndexByChainId(\\n        uint256 _chainId\\n        )\\n        external\\n        view\\n        returns (\\n            uint40\\n        );\\n\\n    /**\\n     * Gets the queue element at a particular index.\\n     * @param _chainId identity for the l2 chain.\\n     * @param _index Index of the queue element to access.\\n     * @return _element Queue element at the given index.\\n     */\\n    function getQueueElementByChainId(\\n        uint256 _chainId,\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (\\n            Lib_OVMCodec.QueueElement memory _element\\n        );\\n\\n    /**\\n     * Returns the timestamp of the last transaction.\\n     * @param _chainId identity for the l2 chain.\\n     * @return Timestamp for the last transaction.\\n     */\\n    function getLastTimestampByChainId(\\n        uint256 _chainId\\n        )\\n        external\\n        view\\n        returns (\\n            uint40\\n        );\\n\\n    /**\\n     * Returns the blocknumber of the last transaction.\\n     * @param _chainId identity for the l2 chain.\\n     * @return Blocknumber for the last transaction.\\n     */\\n    function getLastBlockNumberByChainId(\\n        uint256 _chainId\\n        )\\n        external\\n        view\\n        returns (\\n            uint40\\n        );\\n\\n    /**\\n     * Get the number of queue elements which have not yet been included.\\n     * @param _chainId identity for the l2 chain.\\n     * @return Number of pending queue elements.\\n     */\\n    function getNumPendingQueueElementsByChainId(\\n        uint256 _chainId\\n        )\\n        external\\n        view\\n        returns (\\n            uint40\\n        );\\n\\n    /**\\n     * Retrieves the length of the queue, including\\n     * both pending and canonical transactions.\\n     * @param _chainId identity for the l2 chain.\\n     * @return Length of the queue.\\n     */\\n    function getQueueLengthByChainId(\\n        uint256 _chainId\\n        )\\n        external\\n        view\\n        returns (\\n            uint40\\n        );\\n\\n\\n    /**\\n     * Adds a transaction to the queue.\\n     * @param _chainId identity for the l2 chain.\\n     * @param _target Target contract to send the transaction to.\\n     * @param _gasLimit Gas limit for the given transaction.\\n     * @param _data Transaction data.\\n     */\\n    function enqueueByChainId(\\n        uint256 _chainId,\\n        address _target,\\n        uint256 _gasLimit,\\n        bytes memory _data\\n    )\\n        external;\\n        \\n    /**\\n     * Allows the sequencer to append a batch of transactions.\\n     * @dev This function uses a custom encoding scheme for efficiency reasons.\\n     * .param _chainId identity for the l2 chain.\\n     * .param _shouldStartAtElement Specific batch we expect to start appending to.\\n     * .param _totalElementsToAppend Total number of batch elements we expect to append.\\n     * .param _contexts Array of batch contexts.\\n     * .param _transactionDataFields Array of raw transaction data.\\n     */\\n    function appendSequencerBatchByChainId(\\n        // uint256 _chainId,\\n        // uint40 _shouldStartAtElement,\\n        // uint24 _totalElementsToAppend,\\n        // BatchContext[] _contexts,\\n        // bytes[] _transactionDataFields\\n    )\\n        external;\\n    \\n    function pushQueueByChainId(\\n        uint256 _chainId,\\n        Lib_OVMCodec.QueueElement calldata _object\\n    )\\n        external;\\n\\n    function setQueueByChainId(\\n        uint256 _chainId,\\n        uint256 _index,\\n        Lib_OVMCodec.QueueElement calldata _object\\n    )\\n        external;\\n\\n    function setBatchGlobalMetadataByChainId(\\n        uint256 _chainId,\\n        bytes27 _globalMetadata\\n    )\\n        external;\\n    \\n    function getBatchGlobalMetadataByChainId(uint256 _chainId)\\n        external\\n        view\\n        returns (\\n            bytes27\\n        );\\n        \\n    function lengthBatchByChainId(uint256 _chainId)\\n        external\\n        view\\n        returns (\\n            uint256\\n        );\\n        \\n    function pushBatchByChainId(\\n        uint256 _chainId,\\n        bytes32 _object,\\n        bytes27 _globalMetadata\\n    )\\n        external;\\n    \\n    function setBatchByChainId(\\n        uint256 _chainId,\\n        uint256 _index,\\n        bytes32 _object\\n    )\\n        external;\\n        \\n    function getBatchByChainId(\\n        uint256 _chainId,\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32\\n        );\\n        \\n    function deleteBatchElementsAfterInclusiveByChainId(\\n        uint256 _chainId,\\n        uint256 _index,\\n        bytes27 _globalMetadata\\n    )\\n        external;\\n}\\n\",\"keccak256\":\"0x24b43d8121131df792e0e4b167383a2128a3c2c9c14d2c4fc2fee6a3ee129e64\",\"license\":\"MIT\"},\"contracts/L1/rollup/IChainStorageContainer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\n/**\\n * @title IChainStorageContainer\\n */\\ninterface IChainStorageContainer {\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sets the container's global metadata field. We're using `bytes27` here because we use five\\n     * bytes to maintain the length of the underlying data structure, meaning we have an extra\\n     * 27 bytes to store arbitrary data.\\n     * @param _globalMetadata New global metadata to set.\\n     */\\n    function setGlobalMetadata(bytes27 _globalMetadata) external;\\n\\n    /**\\n     * Retrieves the container's global metadata field.\\n     * @return Container global metadata field.\\n     */\\n    function getGlobalMetadata() external view returns (bytes27);\\n\\n    /**\\n     * Retrieves the number of objects stored in the container.\\n     * @return Number of objects in the container.\\n     */\\n    function length() external view returns (uint256);\\n\\n    /**\\n     * Pushes an object into the container.\\n     * @param _object A 32 byte value to insert into the container.\\n     */\\n    function push(bytes32 _object) external;\\n\\n    /**\\n     * Pushes an object into the container. Function allows setting the global metadata since\\n     * we'll need to touch the \\\"length\\\" storage slot anyway, which also contains the global\\n     * metadata (it's an optimization).\\n     * @param _object A 32 byte value to insert into the container.\\n     * @param _globalMetadata New global metadata for the container.\\n     */\\n    function push(bytes32 _object, bytes27 _globalMetadata) external;\\n\\n    /**\\n     * Set an object into the container. Function allows setting the global metadata since\\n     * we'll need to touch the \\\"length\\\" storage slot anyway, which also contains the global\\n     * metadata (it's an optimization).\\n     * @param _index position.\\n     * @param _object A 32 byte value to insert into the container.\\n     */  \\n    function setByChainId(\\n        uint256 _chainId,\\n        uint256 _index,\\n        bytes32 _object\\n    )\\n        external;\\n        \\n    /**\\n     * Retrieves an object from the container.\\n     * @param _index Index of the particular object to access.\\n     * @return 32 byte object value.\\n     */\\n    function get(uint256 _index) external view returns (bytes32);\\n\\n    /**\\n     * Removes all objects after and including a given index.\\n     * @param _index Object index to delete from.\\n     */\\n    function deleteElementsAfterInclusive(uint256 _index) external;\\n\\n    /**\\n     * Removes all objects after and including a given index. Also allows setting the global\\n     * metadata field.\\n     * @param _index Object index to delete from.\\n     * @param _globalMetadata New global metadata for the container.\\n     */\\n    function deleteElementsAfterInclusive(uint256 _index, bytes27 _globalMetadata) external;\\n\\n    /**\\n     * Sets the container's global metadata field. We're using `bytes27` here because we use five\\n     * bytes to maintain the length of the underlying data structure, meaning we have an extra\\n     * 27 bytes to store arbitrary data.\\n     * @param _chainId identity for the l2 chain.\\n     * @param _globalMetadata New global metadata to set.\\n     */\\n    function setGlobalMetadataByChainId(\\n        uint256 _chainId,\\n        bytes27 _globalMetadata\\n    )\\n        external;\\n\\n    /**\\n     * Retrieves the container's global metadata field.\\n     * @param _chainId identity for the l2 chain.\\n     * @return Container global metadata field.\\n     */\\n    function getGlobalMetadataByChainId(\\n        uint256 _chainId\\n        )\\n        external\\n        view\\n        returns (\\n            bytes27\\n        );\\n\\n    /**\\n     * Retrieves the number of objects stored in the container.\\n     * @param _chainId identity for the l2 chain.\\n     * @return Number of objects in the container.\\n     */\\n    function lengthByChainId(\\n        uint256 _chainId\\n        )\\n        external\\n        view\\n        returns (\\n            uint256\\n        );\\n\\n    /**\\n     * Pushes an object into the container.\\n     * @param _chainId identity for the l2 chain.\\n     * @param _object A 32 byte value to insert into the container.\\n     */\\n    function pushByChainId(\\n        uint256 _chainId,\\n        bytes32 _object\\n    )\\n        external;\\n\\n    /**\\n     * Pushes an object into the container. Function allows setting the global metadata since\\n     * we'll need to touch the \\\"length\\\" storage slot anyway, which also contains the global\\n     * metadata (it's an optimization).\\n     * @param _chainId identity for the l2 chain.\\n     * @param _object A 32 byte value to insert into the container.\\n     * @param _globalMetadata New global metadata for the container.\\n     */\\n    function pushByChainId(\\n        uint256 _chainId,\\n        bytes32 _object,\\n        bytes27 _globalMetadata\\n    )\\n        external;\\n\\n    /**\\n     * Retrieves an object from the container.\\n     * @param _chainId identity for the l2 chain.\\n     * @param _index Index of the particular object to access.\\n     * @return 32 byte object value.\\n     */\\n    function getByChainId(\\n        uint256 _chainId,\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32\\n        );\\n\\n    /**\\n     * Removes all objects after and including a given index.\\n     * @param _chainId identity for the l2 chain.\\n     * @param _index Object index to delete from.\\n     */\\n    function deleteElementsAfterInclusiveByChainId(\\n        uint256 _chainId,\\n        uint256 _index\\n    )\\n        external;\\n        \\n    /**\\n     * Removes all objects after and including a given index. Also allows setting the global\\n     * metadata field.\\n     * @param _chainId identity for the l2 chain.\\n     * @param _index Object index to delete from.\\n     * @param _globalMetadata New global metadata for the container.\\n     */\\n    function deleteElementsAfterInclusiveByChainId(\\n        uint256 _chainId,\\n        uint256 _index,\\n        bytes27 _globalMetadata\\n    )\\n        external;\\n        \\n}\\n\",\"keccak256\":\"0x51ac539391aa0073ef1b710697471b6c0298d8599d36bf7bb3208ddc7f5cef67\",\"license\":\"MIT\"},\"contracts/MVM/MVM_CanonicalTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/* Library Imports */\\nimport { Lib_AddressResolver } from \\\"../libraries/resolver/Lib_AddressResolver.sol\\\";\\n\\n\\n/* Interface Imports */\\nimport { iMVM_CanonicalTransaction } from \\\"./iMVM_CanonicalTransaction.sol\\\";\\nimport { ICanonicalTransactionChain } from \\\"../L1/rollup/ICanonicalTransactionChain.sol\\\";\\nimport { IChainStorageContainer } from \\\"../L1/rollup/IChainStorageContainer.sol\\\";\\n\\ncontract MVM_CanonicalTransaction is iMVM_CanonicalTransaction, Lib_AddressResolver{\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    string constant public CONFIG_OWNER_KEY = \\\"METIS_MANAGER\\\";\\n\\n    // lock seconds when begin to submit batch tx data slice\\n    uint256 constant public TXDATA_SUBMIT_TIMEOUT = 1800;\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    // submit tx data slice size (in bytes)\\n    uint256 public txDataSliceSize;\\n    // stake duration seconds for sequencer submit batch tx data\\n    uint256 public stakeSeqSeconds;\\n    // verifier stake cost for a batch tx data requirement (in ETH)\\n    uint256 public stakeCost;\\n    // submit tx data slice count (a whole tx batch)\\n    uint256 public txDataSliceCount;\\n    // submit tx batch size (in bytes)\\n    uint256 public txBatchSize;\\n\\n    bool useWhiteList;\\n\\n    /***************\\n     * Queue State *\\n     ***************/\\n\\n    // white list\\n    mapping (address => bool) public whitelist;\\n\\n    mapping(address => uint256) private addressChains;\\n\\n    // verifier stakes statistic\\n    mapping(address => uint256) private verifierStakes;\\n\\n    // batch element information for validation queue\\n    mapping(uint256 => mapping(uint256 => BatchElement)) queueBatchElement;\\n\\n    // tx data request stake queue\\n    mapping(uint256 => mapping(uint256 => TxDataRequestStake)) queueTxDataRequestStake;\\n\\n    // tx data for verification queue\\n    mapping(uint256 => mapping(uint256 => TxDataSlice)) queueTxData;\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    constructor(\\n        address _libAddressManager,\\n        uint256 _txDataSliceSize,\\n        uint256 _stakeSeqSeconds,\\n        uint256 _stakeCost\\n    ) Lib_AddressResolver(_libAddressManager)\\n    {\\n        txDataSliceSize = _txDataSliceSize;\\n        stakeSeqSeconds = _stakeSeqSeconds;\\n        stakeCost = _stakeCost;\\n        useWhiteList = true;\\n        txDataSliceCount = 5;\\n        txBatchSize = _txDataSliceSize * 5;\\n    }\\n\\n    /**********************\\n     * Function Modifiers *\\n     **********************/\\n\\n    modifier onlyManager {\\n        require(\\n            msg.sender == resolve(CONFIG_OWNER_KEY),\\n            \\\"MVM_CanonicalTransaction: Function can only be called by the METIS_MANAGER.\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyWhitelisted {\\n        require(isWhiteListed(msg.sender), \\\"only whitelisted verifiers can call\\\");\\n        _;\\n    }\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    receive() external payable {\\n        // msg.sender\\n        if (msg.sender == resolve('MVM_DiscountOracle')) {\\n            uint256 _chainId = getAddressChainId(msg.sender);\\n            if (_chainId > 0) {\\n                address _to = resolve(string(abi.encodePacked(uint2str(_chainId),\\\"_MVM_Sequencer_Wrapper\\\")));\\n                if (_to != address(0) && _to != address(this)) {\\n                    _to.call{value: msg.value}(\\\"\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function setAddressChainId(address _address, uint256 _chainId)  override public onlyManager {\\n        require(_address != address(0), \\\"address not available\\\");\\n        require(_chainId > 0, \\\"chainId not available\\\");\\n        require(addressChains[_address] != _chainId, \\\"no change\\\");\\n        addressChains[_address] = _chainId;\\n    }\\n\\n    function getAddressChainId(address _address) override public view returns (uint256) {\\n        return addressChains[_address];\\n    }\\n\\n    function setStakeCost(uint256 _stakeCost) override public onlyManager {\\n        // 1e16 = 0.01 ether\\n        require(_stakeCost >= 1e16, \\\"stake cost should gte 1e16\\\");\\n        stakeCost = _stakeCost;\\n    }\\n\\n    function getStakeCost() override public view returns (uint256) {\\n        return stakeCost;\\n    }\\n\\n    function setTxDataSliceSize(uint256 _size) override public onlyManager {\\n        require(_size > 0, \\\"slice size should gt 0\\\");\\n        require(_size != txDataSliceSize, \\\"slice size has not changed\\\");\\n        txDataSliceSize = _size;\\n    }\\n\\n    function getTxDataSliceSize() override public view returns (uint256) {\\n        return txDataSliceSize;\\n    }\\n\\n    function setTxDataSliceCount(uint256 _count) override public onlyManager {\\n        require(_count > 0, \\\"slice count should gt 0\\\");\\n        require(_count != txDataSliceCount, \\\"slice count has not changed\\\");\\n        txDataSliceCount = _count;\\n    }\\n\\n    function getTxDataSliceCount() override public view returns (uint256) {\\n        return txDataSliceCount;\\n    }\\n\\n    function setTxBatchSize(uint256 _size) override public onlyManager {\\n        require(_size > 0, \\\"batch size should gt 0\\\");\\n        require(_size != txBatchSize, \\\"batch size has not changed\\\");\\n        txBatchSize = _size;\\n    }\\n\\n    function getTxBatchSize() override public view returns (uint256) {\\n        return txBatchSize;\\n    }\\n\\n    function setStakeSeqSeconds(uint256 _seconds) override public onlyManager {\\n        require(_seconds > 0, \\\"seconds should gt 0\\\");\\n        require(_seconds != stakeSeqSeconds, \\\"seconds has not changed\\\");\\n        stakeSeqSeconds = _seconds;\\n    }\\n\\n    function getStakeSeqSeconds() override public view returns (uint256) {\\n        return stakeSeqSeconds;\\n    }\\n\\n    function isWhiteListed(address _verifier) override public view returns(bool){\\n        return !useWhiteList || whitelist[_verifier];\\n    }\\n\\n    function setWhiteList(address _verifier, bool _allowed) override public onlyManager {\\n        whitelist[_verifier] = _allowed;\\n        useWhiteList = true;\\n    }\\n\\n    function disableWhiteList() override public onlyManager {\\n        useWhiteList = false;\\n    }\\n\\n    function appendSequencerBatchByChainId() override public {\\n        uint256 _chainId;\\n        uint40 shouldStartAtElement;\\n        uint24 totalElementsToAppend;\\n        uint24 numContexts;\\n        uint256 batchTime;\\n        bytes32 batchHash;\\n        uint256 _dataSize;\\n        assembly {\\n            _dataSize             := calldatasize()\\n            _chainId              := calldataload(4)\\n            shouldStartAtElement  := shr(216, calldataload(36))\\n            totalElementsToAppend := shr(232, calldataload(41))\\n            numContexts           := shr(232, calldataload(44))\\n        }\\n        require(\\n            msg.sender == resolve(string(abi.encodePacked(uint2str(_chainId),\\\"_MVM_Sequencer_Wrapper\\\"))),\\n            \\\"Function can only be called by the Sequencer.\\\"\\n        );\\n        uint256 posTs =  47 + 16 * numContexts;\\n        if (_dataSize > posTs) {\\n            // when tx count = 0, there is no hash!\\n            // string len: [13]{milliseconds}-[1]{0}-[8]{sizeOfData}-[64]{hash}\\n            uint256 posTxSize = 7 + posTs;\\n            uint256 posHash =  11 + posTs;\\n            uint256 txSize;\\n            assembly {\\n                batchTime := shr(204, calldataload(posTs))\\n                txSize := shr(224, calldataload(posTxSize))\\n                batchHash := calldataload(posHash)\\n            }\\n\\n            // check batch size\\n            require(txSize / 2 <= txBatchSize, \\\"size of tx data is too large\\\");\\n        }\\n\\n        address ctc = resolve(\\\"CanonicalTransactionChain\\\");\\n        IChainStorageContainer batchesRef = ICanonicalTransactionChain(ctc).batches();\\n        uint256 batchIndex = batchesRef.lengthByChainId(_chainId);\\n        {\\n            // ctc call\\n            (bool success, bytes memory result) = ctc.call(msg.data);\\n            if (success == false) {\\n                assembly {\\n                    let ptr := mload(0x40)\\n                    let size := returndatasize()\\n                    returndatacopy(ptr, 0, size)\\n                    revert(ptr, size)\\n                }\\n            }\\n        }\\n\\n        // save\\n        queueBatchElement[_chainId][batchIndex] = BatchElement({\\n            shouldStartAtElement:  shouldStartAtElement,\\n            totalElementsToAppend: totalElementsToAppend,\\n            txBatchTime:           batchTime,\\n            txBatchHash:           batchHash\\n        });\\n\\n        emit AppendBatchElement(\\n            _chainId,\\n            batchIndex,\\n            shouldStartAtElement,\\n            totalElementsToAppend,\\n            batchTime,\\n            batchHash\\n        );\\n    }\\n\\n    function setBatchTxData(\\n        uint256 _chainId,\\n        uint256 _batchIndex,\\n        uint256 _sliceIndex,\\n        string memory _data,\\n        bool _end\\n    )\\n        override\\n        public\\n    {\\n        require(\\n            msg.sender == resolve(string(abi.encodePacked(uint2str(_chainId),\\\"_MVM_Sequencer_Wrapper\\\"))),\\n            \\\"Function can only be called by the Sequencer.\\\"\\n        );\\n        _setBatchTxData(_chainId, _batchIndex, _sliceIndex, _data, _end, true);\\n\\n        if (_end) {\\n            emit SetBatchTxData(\\n                msg.sender,\\n                _chainId,\\n                _batchIndex,\\n                0,\\n                true,\\n                true\\n            );\\n        }\\n    }\\n\\n    function setBatchTxDataForStake(\\n        uint256 _chainId,\\n        uint256 _batchIndex,\\n        uint256 _sliceIndex,\\n        string memory _data,\\n        bool _end\\n    )\\n        override\\n        public\\n    {\\n        require(\\n            msg.sender == resolve(string(abi.encodePacked(uint2str(_chainId),\\\"_MVM_Sequencer_Wrapper\\\"))),\\n            \\\"Function can only be called by the Sequencer.\\\"\\n        );\\n        // check stake\\n        require(queueTxDataRequestStake[_chainId][_batchIndex].timestamp > 0, \\\"there is no stake for this batch index\\\");\\n        require(queueTxDataRequestStake[_chainId][_batchIndex].status == STAKESTATUS.INIT, \\\"not allowed to submit\\\");\\n        require(queueTxDataRequestStake[_chainId][_batchIndex].endtime >= block.timestamp, \\\"can not submit out of sequencer submit protection\\\");\\n\\n        _setBatchTxData(_chainId, _batchIndex, _sliceIndex, _data, _end, true);\\n\\n        if (_end) {\\n            require(\\n                queueTxDataRequestStake[_chainId][_batchIndex].amount <= verifierStakes[queueTxDataRequestStake[_chainId][_batchIndex].sender],\\n                \\\"insufficient stake\\\"\\n            );\\n            require(\\n                queueTxDataRequestStake[_chainId][_batchIndex].amount <= address(this).balance,\\n                \\\"insufficient balance\\\"\\n            );\\n            queueTxDataRequestStake[_chainId][_batchIndex].status = STAKESTATUS.SEQ_SET;\\n            verifierStakes[queueTxDataRequestStake[_chainId][_batchIndex].sender] -= queueTxDataRequestStake[_chainId][_batchIndex].amount;\\n            // transfer from contract to sender ETHER and record\\n            address payable _to = payable(msg.sender);\\n            (bool success, ) = _to.call{value: queueTxDataRequestStake[_chainId][_batchIndex].amount}(\\\"\\\");\\n            require(success, \\\"insufficient balance\\\");\\n\\n            emit SetBatchTxData(\\n                msg.sender,\\n                _chainId,\\n                _batchIndex,\\n                queueTxDataRequestStake[_chainId][_batchIndex].amount,\\n                true,\\n                true\\n            );\\n        }\\n    }\\n\\n    function setBatchTxDataForVerifier(\\n        uint256 _chainId,\\n        uint256 _batchIndex,\\n        uint256 _sliceIndex,\\n        string memory _data,\\n        bool _end\\n    )\\n        override\\n        public\\n    {\\n        // check stake\\n        require(queueTxDataRequestStake[_chainId][_batchIndex].timestamp > 0, \\\"there is no stake for this batch index\\\");\\n        require(queueTxDataRequestStake[_chainId][_batchIndex].status == STAKESTATUS.INIT, \\\"not allowed to submit\\\");\\n        require(queueTxDataRequestStake[_chainId][_batchIndex].sender == msg.sender, \\\"can not submit with other's stake\\\");\\n        require(queueTxDataRequestStake[_chainId][_batchIndex].endtime < block.timestamp, \\\"can not submit during sequencer submit protection\\\");\\n\\n        _setBatchTxData(_chainId, _batchIndex, _sliceIndex, _data, _end, false);\\n\\n        if (_end) {\\n            queueTxDataRequestStake[_chainId][_batchIndex].status = STAKESTATUS.VERIFIER_SET;\\n\\n            if (queueTxDataRequestStake[_chainId][_batchIndex].amount <= verifierStakes[msg.sender]) {\\n                require(\\n                    queueTxDataRequestStake[_chainId][_batchIndex].amount <= address(this).balance,\\n                    \\\"insufficient balance\\\"\\n                );\\n                verifierStakes[msg.sender] -= queueTxDataRequestStake[_chainId][_batchIndex].amount;\\n                // transfer from contract to sender ETHER and record\\n                address payable _to = payable(msg.sender);\\n                (bool success, ) = _to.call{value: queueTxDataRequestStake[_chainId][_batchIndex].amount}(\\\"\\\");\\n                require(success, \\\"insufficient balance\\\");\\n            }\\n\\n            emit SetBatchTxData(\\n                msg.sender,\\n                _chainId,\\n                _batchIndex,\\n                queueTxDataRequestStake[_chainId][_batchIndex].amount,\\n                false,\\n                false\\n            );\\n        }\\n    }\\n\\n    function _setBatchTxData(\\n        uint256 _chainId,\\n        uint256 _batchIndex,\\n        uint256 _sliceIndex,\\n        string memory _data,\\n        bool _end,\\n        bool _requireVerify\\n    )\\n        internal\\n    {\\n        require(txDataSliceSize > 0, \\\"slice size not config yet\\\");\\n        require(bytes(_data).length > 0, \\\"empty data\\\");\\n        // check queue BatchElement\\n        require(queueBatchElement[_chainId][_batchIndex].txBatchTime > 0, \\\"batch element does not exist\\\");\\n        require(queueBatchElement[_chainId][_batchIndex].totalElementsToAppend > 0, \\\"batch total element to append should not be zero\\\");\\n\\n        // slice data check, slice size in bytes\\n        require(bytes(_data).length / 2 <= txDataSliceSize, \\\"slice size of data is too large\\\");\\n        require(_sliceIndex < txDataSliceCount, \\\"slice index is greater\\\");\\n        require(_sliceIndex <= queueTxData[_chainId][_batchIndex].txDataSlices.length, \\\"incorrect slice index\\\");\\n\\n        // sequencer protect\\n        if (queueTxData[_chainId][_batchIndex].timestamp > 0) {\\n            if (queueTxData[_chainId][_batchIndex].sender != msg.sender) {\\n                require(queueTxData[_chainId][_batchIndex].timestamp + TXDATA_SUBMIT_TIMEOUT > block.timestamp, \\\"in submitting\\\");\\n\\n                // _sliceIndex should be zero\\n                require(_sliceIndex == 0, \\\"slice index should start from zero\\\");\\n\\n                // change sumbitter\\n                queueTxData[_chainId][_batchIndex].sender = msg.sender;\\n                queueTxData[_chainId][_batchIndex].timestamp = block.timestamp;\\n                queueTxData[_chainId][_batchIndex].txDataSlices = [_data];\\n                queueTxData[_chainId][_batchIndex].verified = false;\\n                queueTxData[_chainId][_batchIndex].end = _end;\\n            }\\n            else {\\n                if (_sliceIndex < queueTxData[_chainId][_batchIndex].txDataSlices.length) {\\n                    queueTxData[_chainId][_batchIndex].txDataSlices[_sliceIndex] = _data;\\n                }\\n                else {\\n                    queueTxData[_chainId][_batchIndex].txDataSlices.push(_data);\\n                }\\n                // verified restore to false\\n                queueTxData[_chainId][_batchIndex].verified = false;\\n                queueTxData[_chainId][_batchIndex].end = _end;\\n            }\\n        }\\n        else {\\n            string[] memory dts = new string[](1);\\n            dts[0] = _data;\\n            queueTxData[_chainId][_batchIndex] = TxDataSlice({\\n                sender:         msg.sender,\\n                timestamp:      block.timestamp,\\n                txDataSlices:   dts,\\n                verified:       false,\\n                end:            _end\\n            });\\n        }\\n        if (_end && _requireVerify) {\\n            string memory split = \\\"_\\\";\\n            string memory startAt = uint2str(queueBatchElement[_chainId][_batchIndex].shouldStartAtElement);\\n            string memory totalElement = uint2str(queueBatchElement[_chainId][_batchIndex].totalElementsToAppend);\\n            string memory batchTime = uint2str(queueBatchElement[_chainId][_batchIndex].txBatchTime);\\n\\n            string memory txData = concat(queueTxData[_chainId][_batchIndex].txDataSlices);\\n\\n            bytes32 hexSha256 = sha256(abi.encodePacked(startAt, split, totalElement, split, batchTime, split, txData));\\n            require(hexSha256 == queueBatchElement[_chainId][_batchIndex].txBatchHash, \\\"tx data verify failed\\\");\\n            // save verified status\\n            queueTxData[_chainId][_batchIndex].verified = true;\\n        }\\n    }\\n\\n    function getBatchTxData(\\n        uint256 _chainId,\\n        uint256 _batchIndex\\n    )\\n        override\\n        external\\n        view\\n        returns (\\n            string memory txData,\\n            bool verified\\n        )\\n    {\\n        require(queueTxData[_chainId][_batchIndex].timestamp != 0, \\\"tx data does not exist\\\");\\n        return (\\n            concat(queueTxData[_chainId][_batchIndex].txDataSlices),\\n            queueTxData[_chainId][_batchIndex].verified\\n        );\\n    }\\n\\n    function verifierStake(\\n        uint256 _chainId,\\n        uint256 _batchIndex\\n    )\\n        override\\n        public\\n        payable\\n        onlyWhitelisted\\n    {\\n        uint256 _amount = msg.value;\\n        require(stakeCost > 0, \\\"stake cost not config yet\\\");\\n        require(stakeCost == _amount, \\\"stake cost incorrect\\\");\\n        require(stakeSeqSeconds > 0, \\\"sequencer submit seconds not config yet\\\");\\n        // check queue BatchElement\\n        require(queueBatchElement[_chainId][_batchIndex].txBatchTime > 0, \\\"batch element does not exist\\\");\\n        if (queueTxDataRequestStake[_chainId][_batchIndex].timestamp > 0) {\\n            require(queueTxDataRequestStake[_chainId][_batchIndex].status != STAKESTATUS.INIT, \\\"there is a stake for this batch index\\\");\\n        }\\n        queueTxDataRequestStake[_chainId][_batchIndex] = TxDataRequestStake({\\n            sender:    msg.sender,\\n            timestamp: block.timestamp,\\n            endtime:   block.timestamp + stakeSeqSeconds,\\n            amount:    _amount,\\n            status:    STAKESTATUS.INIT\\n        });\\n        verifierStakes[msg.sender] += _amount;\\n\\n        emit VerifierStake(msg.sender, _chainId, _batchIndex, _amount);\\n    }\\n\\n    function withdrawStake(\\n        uint256 _chainId,\\n        uint256 _batchIndex\\n    )\\n        override\\n        public\\n    {\\n        require(queueTxDataRequestStake[_chainId][_batchIndex].timestamp > 0, \\\"there is no stake for this batch index\\\");\\n        require(queueTxDataRequestStake[_chainId][_batchIndex].status == STAKESTATUS.INIT, \\\"withdrawals are not allowed\\\");\\n        require(queueTxDataRequestStake[_chainId][_batchIndex].sender == msg.sender, \\\"can not withdraw other's stake\\\");\\n        require(queueTxDataRequestStake[_chainId][_batchIndex].endtime < block.timestamp, \\\"can not withdraw during submit protection\\\");\\n        require(queueTxDataRequestStake[_chainId][_batchIndex].amount <= verifierStakes[msg.sender], \\\"insufficient stake\\\");\\n\\n        require(\\n            queueTxDataRequestStake[_chainId][_batchIndex].amount <= address(this).balance,\\n            \\\"insufficient balance\\\"\\n        );\\n        queueTxDataRequestStake[_chainId][_batchIndex].status = STAKESTATUS.PAYBACK;\\n        verifierStakes[msg.sender] -= queueTxDataRequestStake[_chainId][_batchIndex].amount;\\n        // transfer from contract to sender ETHER and record\\n        address payable _to = payable(msg.sender);\\n        (bool success, ) = _to.call{value: queueTxDataRequestStake[_chainId][_batchIndex].amount}(\\\"\\\");\\n        require(success, \\\"insufficient balance\\\");\\n    }\\n\\n    function uint2str(uint _i) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len;\\n        while (_i != 0) {\\n            k = k-1;\\n            uint8 temp = (48 + uint8(_i - _i / 10 * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n\\n    function concat(string[] memory words) internal pure returns (string memory) {\\n        bytes memory output;\\n\\n        for (uint256 i = 0; i < words.length; i++) {\\n            output = abi.encodePacked(output, words[i]);\\n        }\\n\\n        return string(output);\\n    }\\n}\\n\",\"keccak256\":\"0x933a45a8a32df195205fabcc9afecd443d4a0618dcf40e2cd2a5bc6d18519ee5\",\"license\":\"MIT\"},\"contracts/MVM/iMVM_CanonicalTransaction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/* Contract Imports */\\n\\n/* External Imports */\\n\\n/**\\n * @title ICanonicalTransactionChain\\n */\\ninterface iMVM_CanonicalTransaction {\\n    /*********\\n     * Enums *\\n     *********/\\n\\n    enum STAKESTATUS {\\n        INIT,\\n        SEQ_SET,\\n        VERIFIER_SET,\\n        PAYBACK\\n    }\\n\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event VerifierStake(\\n        address _sender,\\n        uint256 _chainId,\\n        uint256 _batchIndex,\\n        uint256 _amount\\n    );\\n\\n    // default : stakeAmount=0, verified=true, sequencer=true\\n    // sequencer response for stake: stakeAmount>0, verified=true, sequencer=true\\n    // verifier response for stake timeout: stakeAmount>0, verified=false, sequencer=false\\n    event SetBatchTxData(\\n        address _sender,\\n        uint256 _chainId,\\n        uint256 _batchIndex,\\n        uint256 _stakeAmount,\\n        bool _verified,\\n        bool _sequencer\\n    );\\n\\n    event AppendBatchElement (\\n        uint256 _chainId,\\n        uint256 _batchIndex,\\n        uint40 _shouldStartAtElement,\\n        uint24 _totalElementsToAppend,\\n        uint256 _txBatchTime,\\n        bytes32 _txBatchHash\\n    );\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    // locker the same sender for 30 min\\n    struct TxDataSlice {\\n        address sender;\\n        uint256 timestamp;\\n        string[] txDataSlices;\\n        bool verified;\\n        bool end;\\n    }\\n\\n    struct TxDataRequestStake {\\n        address sender;\\n        uint256 timestamp;\\n        uint256 endtime;\\n        uint256 amount;\\n        STAKESTATUS status;\\n    }\\n\\n    struct BatchElement {\\n        uint40 shouldStartAtElement;\\n        uint24 totalElementsToAppend;\\n        uint256 txBatchTime;\\n        bytes32 txBatchHash;\\n    }\\n\\n    /*******************************\\n     * Authorized Setter Functions *\\n     *******************************/\\n\\n    /**\\n     * Sets address's chain id.\\n     * @param _address contract address.\\n     * @param _chainId chain id.\\n     */\\n    function setAddressChainId(address _address, uint256 _chainId) external;\\n\\n    /**\\n     * Gets address's chain id.\\n     */\\n    function getAddressChainId(address _address) external view returns (uint256);\\n\\n    /**\\n     * Sets the verifier stake cost of ETH.\\n     * @param _stakeCost Stake cost for verifier.\\n     */\\n    function setStakeCost(uint256 _stakeCost) external;\\n\\n    /**\\n     * Gets the verifier stake cost of ETH.\\n     */\\n    function getStakeCost() external view returns (uint256);\\n\\n    /**\\n     * Sets batch transaction data slice size per submit.\\n     * @param _size Slice size of batch transaction data.\\n     */\\n    function setTxDataSliceSize(uint256 _size) external;\\n\\n    /**\\n     * Gets batch transaction data slice size per submit.\\n     */\\n    function getTxDataSliceSize() external view returns (uint256);\\n\\n    /**\\n     * Sets batch size per batch.\\n     * @param _size Batch size of batch.\\n     */\\n    function setTxBatchSize(uint256 _size) external;\\n\\n    /**\\n     * Gets batch size per batch.\\n     */\\n    function getTxBatchSize() external view returns (uint256);\\n\\n    /**\\n     * Sets slice count per batch transaction data.\\n     * @param _count Slice count per batch transaction data.\\n     */\\n    function setTxDataSliceCount(uint256 _count) external;\\n\\n    /**\\n     * Gets slice count per batch transaction data.\\n     */\\n    function getTxDataSliceCount() external view returns (uint256);\\n\\n    /**\\n     * Sets seconds can submit transaction data after staking.\\n     * @param _seconds Seconds the Sequencer can sumbit transaction data after verifier staking.\\n     */\\n    function setStakeSeqSeconds(uint256 _seconds) external;\\n\\n    /**\\n     * Gets seconds can submit transaction data after staking.\\n     * @return Seconds the Sequencer can sumbit transaction data after verifier staking.\\n     */\\n    function getStakeSeqSeconds() external view returns (uint256);\\n\\n    function isWhiteListed(address _verifier) external view returns(bool);\\n\\n    // add the verifier to the whitelist\\n    function setWhiteList(address _verifier, bool _allowed) external;\\n\\n    // allow everyone to be the verifier\\n    function disableWhiteList() external;\\n\\n    /**\\n     * Allows the sequencer to append a batch of transactions.\\n     * @dev This function uses a custom encoding scheme for efficiency reasons.\\n     */\\n    function appendSequencerBatchByChainId() external;\\n\\n    /**\\n     * Sets batch tx data.\\n     * @param _chainId chain id.\\n     * @param _batchIndex batch index of CTC.\\n     * @param _sliceIndex slice index.\\n     * @param _data tx data hex.\\n     * @param _end sliceIndex is the end or not.\\n    */\\n    function setBatchTxData(uint256 _chainId, uint256 _batchIndex, uint256 _sliceIndex, string memory _data, bool _end) external;\\n\\n    /**\\n     * Sets batch tx data for stake.\\n     * @param _chainId chain id.\\n     * @param _batchIndex batch index of CTC.\\n     * @param _sliceIndex slice index.\\n     * @param _data tx data hex.\\n     * @param _end sliceIndex is the end or not.\\n    */\\n    function setBatchTxDataForStake(uint256 _chainId, uint256 _batchIndex, uint256 _sliceIndex, string memory _data, bool _end) external;\\n\\n    /**\\n     * Sets batch tx data for verifier.\\n     * @param _chainId chain id.\\n     * @param _batchIndex batch index of CTC.\\n     * @param _sliceIndex slice index.\\n     * @param _data tx data hex.\\n     * @param _end sliceIndex is the end or not.\\n    */\\n    function setBatchTxDataForVerifier(uint256 _chainId, uint256 _batchIndex, uint256 _sliceIndex, string memory _data, bool _end) external;\\n\\n    /**\\n     * Gets batch tx data.\\n     * @param _chainId chain id.\\n     * @param _batchIndex batch index of CTC.\\n     * @return txData\\n     * @return verified\\n    */\\n    function getBatchTxData(uint256 _chainId, uint256 _batchIndex) external view returns (string memory txData, bool verified);\\n\\n    /**\\n     * Stake by verifier.\\n     * @param _chainId chain id.\\n     * @param _batchIndex batch index of CTC.\\n    */\\n    function verifierStake(uint256 _chainId, uint256 _batchIndex) external payable;\\n\\n    /**\\n     * Withdraw stake by verifier.\\n     * @param _chainId chain id.\\n     * @param _batchIndex batch index of CTC.\\n    */\\n    function withdrawStake(uint256 _chainId, uint256 _batchIndex) external;\\n\\n}\\n\",\"keccak256\":\"0x7f63ec4237ccafc8fadcf2c72fd5d82e453e887467737c0640459ef1bffa45c6\",\"license\":\"MIT\"},\"contracts/libraries/codec/Lib_OVMCodec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/* Library Imports */\\nimport { Lib_RLPReader } from \\\"../rlp/Lib_RLPReader.sol\\\";\\nimport { Lib_RLPWriter } from \\\"../rlp/Lib_RLPWriter.sol\\\";\\nimport { Lib_BytesUtils } from \\\"../utils/Lib_BytesUtils.sol\\\";\\nimport { Lib_Bytes32Utils } from \\\"../utils/Lib_Bytes32Utils.sol\\\";\\n\\n/**\\n * @title Lib_OVMCodec\\n */\\nlibrary Lib_OVMCodec {\\n    /*********\\n     * Enums *\\n     *********/\\n\\n    enum QueueOrigin {\\n        SEQUENCER_QUEUE,\\n        L1TOL2_QUEUE\\n    }\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct EVMAccount {\\n        uint256 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 codeHash;\\n    }\\n\\n    struct ChainBatchHeader {\\n        uint256 batchIndex;\\n        bytes32 batchRoot;\\n        uint256 batchSize;\\n        uint256 prevTotalElements;\\n        bytes extraData;\\n    }\\n\\n    struct ChainInclusionProof {\\n        uint256 index;\\n        bytes32[] siblings;\\n    }\\n\\n    struct Transaction {\\n        uint256 timestamp;\\n        uint256 blockNumber;\\n        QueueOrigin l1QueueOrigin;\\n        address l1TxOrigin;\\n        address entrypoint;\\n        uint256 gasLimit;\\n        bytes data;\\n    }\\n\\n    struct TransactionChainElement {\\n        bool isSequenced;\\n        uint256 queueIndex; // QUEUED TX ONLY\\n        uint256 timestamp; // SEQUENCER TX ONLY\\n        uint256 blockNumber; // SEQUENCER TX ONLY\\n        bytes txData; // SEQUENCER TX ONLY\\n    }\\n\\n    struct QueueElement {\\n        bytes32 transactionHash;\\n        uint40 timestamp;\\n        uint40 blockNumber;\\n    }\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Encodes a standard OVM transaction.\\n     * @param _transaction OVM transaction to encode.\\n     * @return Encoded transaction bytes.\\n     */\\n    function encodeTransaction(Transaction memory _transaction)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encodePacked(\\n                _transaction.timestamp,\\n                _transaction.blockNumber,\\n                _transaction.l1QueueOrigin,\\n                _transaction.l1TxOrigin,\\n                _transaction.entrypoint,\\n                _transaction.gasLimit,\\n                _transaction.data\\n            );\\n    }\\n\\n    /**\\n     * Hashes a standard OVM transaction.\\n     * @param _transaction OVM transaction to encode.\\n     * @return Hashed transaction\\n     */\\n    function hashTransaction(Transaction memory _transaction) internal pure returns (bytes32) {\\n        return keccak256(encodeTransaction(_transaction));\\n    }\\n\\n    /**\\n     * @notice Decodes an RLP-encoded account state into a useful struct.\\n     * @param _encoded RLP-encoded account state.\\n     * @return Account state struct.\\n     */\\n    function decodeEVMAccount(bytes memory _encoded) internal pure returns (EVMAccount memory) {\\n        Lib_RLPReader.RLPItem[] memory accountState = Lib_RLPReader.readList(_encoded);\\n\\n        return\\n            EVMAccount({\\n                nonce: Lib_RLPReader.readUint256(accountState[0]),\\n                balance: Lib_RLPReader.readUint256(accountState[1]),\\n                storageRoot: Lib_RLPReader.readBytes32(accountState[2]),\\n                codeHash: Lib_RLPReader.readBytes32(accountState[3])\\n            });\\n    }\\n\\n    /**\\n     * Calculates a hash for a given batch header.\\n     * @param _batchHeader Header to hash.\\n     * @return Hash of the header.\\n     */\\n    function hashBatchHeader(Lib_OVMCodec.ChainBatchHeader memory _batchHeader)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _batchHeader.batchRoot,\\n                    _batchHeader.batchSize,\\n                    _batchHeader.prevTotalElements,\\n                    _batchHeader.extraData\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xb5009ac1e0617e0b3b2fb917f08f8e8a7ae706034cc3a675258bc3d91978525e\",\"license\":\"MIT\"},\"contracts/libraries/resolver/Lib_AddressManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/* External Imports */\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title Lib_AddressManager\\n */\\ncontract Lib_AddressManager is Ownable {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event AddressSet(string indexed _name, address _newAddress, address _oldAddress);\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    mapping(bytes32 => address) private addresses;\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Changes the address associated with a particular name.\\n     * @param _name String name to associate an address with.\\n     * @param _address Address to associate with the name.\\n     */\\n    function setAddress(string memory _name, address _address) external onlyOwner {\\n        bytes32 nameHash = _getNameHash(_name);\\n        address oldAddress = addresses[nameHash];\\n        addresses[nameHash] = _address;\\n\\n        emit AddressSet(_name, _address, oldAddress);\\n    }\\n\\n    /**\\n     * Retrieves the address associated with a given name.\\n     * @param _name Name to retrieve an address for.\\n     * @return Address associated with the given name.\\n     */\\n    function getAddress(string memory _name) external view returns (address) {\\n        return addresses[_getNameHash(_name)];\\n    }\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Computes the hash of a name.\\n     * @param _name Name to compute a hash for.\\n     * @return Hash of the given name.\\n     */\\n    function _getNameHash(string memory _name) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_name));\\n    }\\n}\\n\",\"keccak256\":\"0xcde9b29429d512c549f7c1b8a033f161fa71c18cda08b241748663854196ae14\",\"license\":\"MIT\"},\"contracts/libraries/resolver/Lib_AddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/* Library Imports */\\nimport { Lib_AddressManager } from \\\"./Lib_AddressManager.sol\\\";\\n\\n/**\\n * @title Lib_AddressResolver\\n */\\nabstract contract Lib_AddressResolver {\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    Lib_AddressManager public libAddressManager;\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _libAddressManager Address of the Lib_AddressManager.\\n     */\\n    constructor(address _libAddressManager) {\\n        libAddressManager = Lib_AddressManager(_libAddressManager);\\n    }\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Resolves the address associated with a given name.\\n     * @param _name Name to resolve an address for.\\n     * @return Address associated with the given name.\\n     */\\n    function resolve(string memory _name) public view returns (address) {\\n        return libAddressManager.getAddress(_name);\\n    }\\n}\\n\",\"keccak256\":\"0x515c4db671a28e2fe180201f6d11c0208c05f582ca3489fb6b8e81c27659bc62\",\"license\":\"MIT\"},\"contracts/libraries/rlp/Lib_RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Lib_RLPReader\\n * @dev Adapted from \\\"RLPReader\\\" by Hamdi Allam (hamdi.allam97@gmail.com).\\n */\\nlibrary Lib_RLPReader {\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    uint256 internal constant MAX_LIST_LENGTH = 32;\\n\\n    /*********\\n     * Enums *\\n     *********/\\n\\n    enum RLPItemType {\\n        DATA_ITEM,\\n        LIST_ITEM\\n    }\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct RLPItem {\\n        uint256 length;\\n        uint256 ptr;\\n    }\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Converts bytes to a reference to memory position and length.\\n     * @param _in Input bytes to convert.\\n     * @return Output memory reference.\\n     */\\n    function toRLPItem(bytes memory _in) internal pure returns (RLPItem memory) {\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(_in, 32)\\n        }\\n\\n        return RLPItem({ length: _in.length, ptr: ptr });\\n    }\\n\\n    /**\\n     * Reads an RLP list value into a list of RLP items.\\n     * @param _in RLP list value.\\n     * @return Decoded RLP list items.\\n     */\\n    function readList(RLPItem memory _in) internal pure returns (RLPItem[] memory) {\\n        (uint256 listOffset, , RLPItemType itemType) = _decodeLength(_in);\\n\\n        require(itemType == RLPItemType.LIST_ITEM, \\\"Invalid RLP list value.\\\");\\n\\n        // Solidity in-memory arrays can't be increased in size, but *can* be decreased in size by\\n        // writing to the length. Since we can't know the number of RLP items without looping over\\n        // the entire input, we'd have to loop twice to accurately size this array. It's easier to\\n        // simply set a reasonable maximum list length and decrease the size before we finish.\\n        RLPItem[] memory out = new RLPItem[](MAX_LIST_LENGTH);\\n\\n        uint256 itemCount = 0;\\n        uint256 offset = listOffset;\\n        while (offset < _in.length) {\\n            require(itemCount < MAX_LIST_LENGTH, \\\"Provided RLP list exceeds max list length.\\\");\\n\\n            (uint256 itemOffset, uint256 itemLength, ) = _decodeLength(\\n                RLPItem({ length: _in.length - offset, ptr: _in.ptr + offset })\\n            );\\n\\n            out[itemCount] = RLPItem({ length: itemLength + itemOffset, ptr: _in.ptr + offset });\\n\\n            itemCount += 1;\\n            offset += itemOffset + itemLength;\\n        }\\n\\n        // Decrease the array size to match the actual item count.\\n        assembly {\\n            mstore(out, itemCount)\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Reads an RLP list value into a list of RLP items.\\n     * @param _in RLP list value.\\n     * @return Decoded RLP list items.\\n     */\\n    function readList(bytes memory _in) internal pure returns (RLPItem[] memory) {\\n        return readList(toRLPItem(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP bytes value into bytes.\\n     * @param _in RLP bytes value.\\n     * @return Decoded bytes.\\n     */\\n    function readBytes(RLPItem memory _in) internal pure returns (bytes memory) {\\n        (uint256 itemOffset, uint256 itemLength, RLPItemType itemType) = _decodeLength(_in);\\n\\n        require(itemType == RLPItemType.DATA_ITEM, \\\"Invalid RLP bytes value.\\\");\\n\\n        return _copy(_in.ptr, itemOffset, itemLength);\\n    }\\n\\n    /**\\n     * Reads an RLP bytes value into bytes.\\n     * @param _in RLP bytes value.\\n     * @return Decoded bytes.\\n     */\\n    function readBytes(bytes memory _in) internal pure returns (bytes memory) {\\n        return readBytes(toRLPItem(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP string value into a string.\\n     * @param _in RLP string value.\\n     * @return Decoded string.\\n     */\\n    function readString(RLPItem memory _in) internal pure returns (string memory) {\\n        return string(readBytes(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP string value into a string.\\n     * @param _in RLP string value.\\n     * @return Decoded string.\\n     */\\n    function readString(bytes memory _in) internal pure returns (string memory) {\\n        return readString(toRLPItem(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP bytes32 value into a bytes32.\\n     * @param _in RLP bytes32 value.\\n     * @return Decoded bytes32.\\n     */\\n    function readBytes32(RLPItem memory _in) internal pure returns (bytes32) {\\n        require(_in.length <= 33, \\\"Invalid RLP bytes32 value.\\\");\\n\\n        (uint256 itemOffset, uint256 itemLength, RLPItemType itemType) = _decodeLength(_in);\\n\\n        require(itemType == RLPItemType.DATA_ITEM, \\\"Invalid RLP bytes32 value.\\\");\\n\\n        uint256 ptr = _in.ptr + itemOffset;\\n        bytes32 out;\\n        assembly {\\n            out := mload(ptr)\\n\\n            // Shift the bytes over to match the item size.\\n            if lt(itemLength, 32) {\\n                out := div(out, exp(256, sub(32, itemLength)))\\n            }\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Reads an RLP bytes32 value into a bytes32.\\n     * @param _in RLP bytes32 value.\\n     * @return Decoded bytes32.\\n     */\\n    function readBytes32(bytes memory _in) internal pure returns (bytes32) {\\n        return readBytes32(toRLPItem(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP uint256 value into a uint256.\\n     * @param _in RLP uint256 value.\\n     * @return Decoded uint256.\\n     */\\n    function readUint256(RLPItem memory _in) internal pure returns (uint256) {\\n        return uint256(readBytes32(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP uint256 value into a uint256.\\n     * @param _in RLP uint256 value.\\n     * @return Decoded uint256.\\n     */\\n    function readUint256(bytes memory _in) internal pure returns (uint256) {\\n        return readUint256(toRLPItem(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP bool value into a bool.\\n     * @param _in RLP bool value.\\n     * @return Decoded bool.\\n     */\\n    function readBool(RLPItem memory _in) internal pure returns (bool) {\\n        require(_in.length == 1, \\\"Invalid RLP boolean value.\\\");\\n\\n        uint256 ptr = _in.ptr;\\n        uint256 out;\\n        assembly {\\n            out := byte(0, mload(ptr))\\n        }\\n\\n        require(out == 0 || out == 1, \\\"Lib_RLPReader: Invalid RLP boolean value, must be 0 or 1\\\");\\n\\n        return out != 0;\\n    }\\n\\n    /**\\n     * Reads an RLP bool value into a bool.\\n     * @param _in RLP bool value.\\n     * @return Decoded bool.\\n     */\\n    function readBool(bytes memory _in) internal pure returns (bool) {\\n        return readBool(toRLPItem(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP address value into a address.\\n     * @param _in RLP address value.\\n     * @return Decoded address.\\n     */\\n    function readAddress(RLPItem memory _in) internal pure returns (address) {\\n        if (_in.length == 1) {\\n            return address(0);\\n        }\\n\\n        require(_in.length == 21, \\\"Invalid RLP address value.\\\");\\n\\n        return address(uint160(readUint256(_in)));\\n    }\\n\\n    /**\\n     * Reads an RLP address value into a address.\\n     * @param _in RLP address value.\\n     * @return Decoded address.\\n     */\\n    function readAddress(bytes memory _in) internal pure returns (address) {\\n        return readAddress(toRLPItem(_in));\\n    }\\n\\n    /**\\n     * Reads the raw bytes of an RLP item.\\n     * @param _in RLP item to read.\\n     * @return Raw RLP bytes.\\n     */\\n    function readRawBytes(RLPItem memory _in) internal pure returns (bytes memory) {\\n        return _copy(_in);\\n    }\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Decodes the length of an RLP item.\\n     * @param _in RLP item to decode.\\n     * @return Offset of the encoded data.\\n     * @return Length of the encoded data.\\n     * @return RLP item type (LIST_ITEM or DATA_ITEM).\\n     */\\n    function _decodeLength(RLPItem memory _in)\\n        private\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            RLPItemType\\n        )\\n    {\\n        require(_in.length > 0, \\\"RLP item cannot be null.\\\");\\n\\n        uint256 ptr = _in.ptr;\\n        uint256 prefix;\\n        assembly {\\n            prefix := byte(0, mload(ptr))\\n        }\\n\\n        if (prefix <= 0x7f) {\\n            // Single byte.\\n\\n            return (0, 1, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xb7) {\\n            // Short string.\\n\\n            uint256 strLen = prefix - 0x80;\\n\\n            require(_in.length > strLen, \\\"Invalid RLP short string.\\\");\\n\\n            return (1, strLen, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xbf) {\\n            // Long string.\\n            uint256 lenOfStrLen = prefix - 0xb7;\\n\\n            require(_in.length > lenOfStrLen, \\\"Invalid RLP long string length.\\\");\\n\\n            uint256 strLen;\\n            assembly {\\n                // Pick out the string length.\\n                strLen := div(mload(add(ptr, 1)), exp(256, sub(32, lenOfStrLen)))\\n            }\\n\\n            require(_in.length > lenOfStrLen + strLen, \\\"Invalid RLP long string.\\\");\\n\\n            return (1 + lenOfStrLen, strLen, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xf7) {\\n            // Short list.\\n            uint256 listLen = prefix - 0xc0;\\n\\n            require(_in.length > listLen, \\\"Invalid RLP short list.\\\");\\n\\n            return (1, listLen, RLPItemType.LIST_ITEM);\\n        } else {\\n            // Long list.\\n            uint256 lenOfListLen = prefix - 0xf7;\\n\\n            require(_in.length > lenOfListLen, \\\"Invalid RLP long list length.\\\");\\n\\n            uint256 listLen;\\n            assembly {\\n                // Pick out the list length.\\n                listLen := div(mload(add(ptr, 1)), exp(256, sub(32, lenOfListLen)))\\n            }\\n\\n            require(_in.length > lenOfListLen + listLen, \\\"Invalid RLP long list.\\\");\\n\\n            return (1 + lenOfListLen, listLen, RLPItemType.LIST_ITEM);\\n        }\\n    }\\n\\n    /**\\n     * Copies the bytes from a memory location.\\n     * @param _src Pointer to the location to read from.\\n     * @param _offset Offset to start reading from.\\n     * @param _length Number of bytes to read.\\n     * @return Copied bytes.\\n     */\\n    function _copy(\\n        uint256 _src,\\n        uint256 _offset,\\n        uint256 _length\\n    ) private pure returns (bytes memory) {\\n        bytes memory out = new bytes(_length);\\n        if (out.length == 0) {\\n            return out;\\n        }\\n\\n        uint256 src = _src + _offset;\\n        uint256 dest;\\n        assembly {\\n            dest := add(out, 32)\\n        }\\n\\n        // Copy over as many complete words as we can.\\n        for (uint256 i = 0; i < _length / 32; i++) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += 32;\\n            dest += 32;\\n        }\\n\\n        // Pick out the remaining bytes.\\n        uint256 mask;\\n        unchecked {\\n            mask = 256**(32 - (_length % 32)) - 1;\\n        }\\n\\n        assembly {\\n            mstore(dest, or(and(mload(src), not(mask)), and(mload(dest), mask)))\\n        }\\n        return out;\\n    }\\n\\n    /**\\n     * Copies an RLP item into bytes.\\n     * @param _in RLP item to copy.\\n     * @return Copied bytes.\\n     */\\n    function _copy(RLPItem memory _in) private pure returns (bytes memory) {\\n        return _copy(_in.ptr, 0, _in.length);\\n    }\\n}\\n\",\"keccak256\":\"0xde4a27577a23b2b11b21e8af3e1a0df50b0b27f08864795f7a84b1e3c230da33\",\"license\":\"MIT\"},\"contracts/libraries/rlp/Lib_RLPWriter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Lib_RLPWriter\\n * @author Bakaoh (with modifications)\\n */\\nlibrary Lib_RLPWriter {\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * RLP encodes a byte string.\\n     * @param _in The byte string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function writeBytes(bytes memory _in) internal pure returns (bytes memory) {\\n        bytes memory encoded;\\n\\n        if (_in.length == 1 && uint8(_in[0]) < 128) {\\n            encoded = _in;\\n        } else {\\n            encoded = abi.encodePacked(_writeLength(_in.length, 128), _in);\\n        }\\n\\n        return encoded;\\n    }\\n\\n    /**\\n     * RLP encodes a list of RLP encoded byte byte strings.\\n     * @param _in The list of RLP encoded byte strings.\\n     * @return The RLP encoded list of items in bytes.\\n     */\\n    function writeList(bytes[] memory _in) internal pure returns (bytes memory) {\\n        bytes memory list = _flatten(_in);\\n        return abi.encodePacked(_writeLength(list.length, 192), list);\\n    }\\n\\n    /**\\n     * RLP encodes a string.\\n     * @param _in The string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function writeString(string memory _in) internal pure returns (bytes memory) {\\n        return writeBytes(bytes(_in));\\n    }\\n\\n    /**\\n     * RLP encodes an address.\\n     * @param _in The address to encode.\\n     * @return The RLP encoded address in bytes.\\n     */\\n    function writeAddress(address _in) internal pure returns (bytes memory) {\\n        return writeBytes(abi.encodePacked(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a uint.\\n     * @param _in The uint256 to encode.\\n     * @return The RLP encoded uint256 in bytes.\\n     */\\n    function writeUint(uint256 _in) internal pure returns (bytes memory) {\\n        return writeBytes(_toBinary(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a bool.\\n     * @param _in The bool to encode.\\n     * @return The RLP encoded bool in bytes.\\n     */\\n    function writeBool(bool _in) internal pure returns (bytes memory) {\\n        bytes memory encoded = new bytes(1);\\n        encoded[0] = (_in ? bytes1(0x01) : bytes1(0x80));\\n        return encoded;\\n    }\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\\n     * @param _len The length of the string or the payload.\\n     * @param _offset 128 if item is string, 192 if item is list.\\n     * @return RLP encoded bytes.\\n     */\\n    function _writeLength(uint256 _len, uint256 _offset) private pure returns (bytes memory) {\\n        bytes memory encoded;\\n\\n        if (_len < 56) {\\n            encoded = new bytes(1);\\n            encoded[0] = bytes1(uint8(_len) + uint8(_offset));\\n        } else {\\n            uint256 lenLen;\\n            uint256 i = 1;\\n            while (_len / i != 0) {\\n                lenLen++;\\n                i *= 256;\\n            }\\n\\n            encoded = new bytes(lenLen + 1);\\n            encoded[0] = bytes1(uint8(lenLen) + uint8(_offset) + 55);\\n            for (i = 1; i <= lenLen; i++) {\\n                encoded[i] = bytes1(uint8((_len / (256**(lenLen - i))) % 256));\\n            }\\n        }\\n\\n        return encoded;\\n    }\\n\\n    /**\\n     * Encode integer in big endian binary form with no leading zeroes.\\n     * @notice TODO: This should be optimized with assembly to save gas costs.\\n     * @param _x The integer to encode.\\n     * @return RLP encoded bytes.\\n     */\\n    function _toBinary(uint256 _x) private pure returns (bytes memory) {\\n        bytes memory b = abi.encodePacked(_x);\\n\\n        uint256 i = 0;\\n        for (; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n\\n        bytes memory res = new bytes(32 - i);\\n        for (uint256 j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n\\n        return res;\\n    }\\n\\n    /**\\n     * Copies a piece of memory to another location.\\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\\n     * @param _dest Destination location.\\n     * @param _src Source location.\\n     * @param _len Length of memory to copy.\\n     */\\n    function _memcpy(\\n        uint256 _dest,\\n        uint256 _src,\\n        uint256 _len\\n    ) private pure {\\n        uint256 dest = _dest;\\n        uint256 src = _src;\\n        uint256 len = _len;\\n\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        uint256 mask;\\n        unchecked {\\n            mask = 256**(32 - len) - 1;\\n        }\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /**\\n     * Flattens a list of byte strings into one byte string.\\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\\n     * @param _list List of byte strings to flatten.\\n     * @return The flattened byte string.\\n     */\\n    function _flatten(bytes[] memory _list) private pure returns (bytes memory) {\\n        if (_list.length == 0) {\\n            return new bytes(0);\\n        }\\n\\n        uint256 len;\\n        uint256 i = 0;\\n        for (; i < _list.length; i++) {\\n            len += _list[i].length;\\n        }\\n\\n        bytes memory flattened = new bytes(len);\\n        uint256 flattenedPtr;\\n        assembly {\\n            flattenedPtr := add(flattened, 0x20)\\n        }\\n\\n        for (i = 0; i < _list.length; i++) {\\n            bytes memory item = _list[i];\\n\\n            uint256 listPtr;\\n            assembly {\\n                listPtr := add(item, 0x20)\\n            }\\n\\n            _memcpy(flattenedPtr, listPtr, item.length);\\n            flattenedPtr += _list[i].length;\\n        }\\n\\n        return flattened;\\n    }\\n}\\n\",\"keccak256\":\"0x215b90672ce126effc3f2df61ca0cdf52d2b1cc9be602877e637829b0bf229fd\",\"license\":\"MIT\"},\"contracts/libraries/utils/Lib_Bytes32Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Lib_Byte32Utils\\n */\\nlibrary Lib_Bytes32Utils {\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Converts a bytes32 value to a boolean. Anything non-zero will be converted to \\\"true.\\\"\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 as a boolean.\\n     */\\n    function toBool(bytes32 _in) internal pure returns (bool) {\\n        return _in != 0;\\n    }\\n\\n    /**\\n     * Converts a boolean to a bytes32 value.\\n     * @param _in Input boolean value.\\n     * @return Boolean as a bytes32.\\n     */\\n    function fromBool(bool _in) internal pure returns (bytes32) {\\n        return bytes32(uint256(_in ? 1 : 0));\\n    }\\n\\n    /**\\n     * Converts a bytes32 value to an address. Takes the *last* 20 bytes.\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 as an address.\\n     */\\n    function toAddress(bytes32 _in) internal pure returns (address) {\\n        return address(uint160(uint256(_in)));\\n    }\\n\\n    /**\\n     * Converts an address to a bytes32.\\n     * @param _in Input address value.\\n     * @return Address as a bytes32.\\n     */\\n    function fromAddress(address _in) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_in)));\\n    }\\n}\\n\",\"keccak256\":\"0xf2d1a526f2529e51fc2fffccf093c1691e291cbbb6de8a3da7d7f80024a9a234\",\"license\":\"MIT\"},\"contracts/libraries/utils/Lib_BytesUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Lib_BytesUtils\\n */\\nlibrary Lib_BytesUtils {\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_start + _length >= _start, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function slice(bytes memory _bytes, uint256 _start) internal pure returns (bytes memory) {\\n        if (_start >= _bytes.length) {\\n            return bytes(\\\"\\\");\\n        }\\n\\n        return slice(_bytes, _start, _bytes.length - _start);\\n    }\\n\\n    function toBytes32(bytes memory _bytes) internal pure returns (bytes32) {\\n        if (_bytes.length < 32) {\\n            bytes32 ret;\\n            assembly {\\n                ret := mload(add(_bytes, 32))\\n            }\\n            return ret;\\n        }\\n\\n        return abi.decode(_bytes, (bytes32)); // will truncate if input length > 32 bytes\\n    }\\n\\n    function toUint256(bytes memory _bytes) internal pure returns (uint256) {\\n        return uint256(toBytes32(_bytes));\\n    }\\n\\n    function toNibbles(bytes memory _bytes) internal pure returns (bytes memory) {\\n        bytes memory nibbles = new bytes(_bytes.length * 2);\\n\\n        for (uint256 i = 0; i < _bytes.length; i++) {\\n            nibbles[i * 2] = _bytes[i] >> 4;\\n            nibbles[i * 2 + 1] = bytes1(uint8(_bytes[i]) % 16);\\n        }\\n\\n        return nibbles;\\n    }\\n\\n    function fromNibbles(bytes memory _bytes) internal pure returns (bytes memory) {\\n        bytes memory ret = new bytes(_bytes.length / 2);\\n\\n        for (uint256 i = 0; i < ret.length; i++) {\\n            ret[i] = (_bytes[i * 2] << 4) | (_bytes[i * 2 + 1]);\\n        }\\n\\n        return ret;\\n    }\\n\\n    function equal(bytes memory _bytes, bytes memory _other) internal pure returns (bool) {\\n        return keccak256(_bytes) == keccak256(_other);\\n    }\\n}\\n\",\"keccak256\":\"0xc39ee13f97e4ccfbc72a5aac571deb3c1aff882fca2dd18be794d43ac5de0a30\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620041093803806200410983398101604081905262000034916200008d565b600080546001600160a01b0319166001600160a01b0386161790556001838155600283905560038290556006805460ff19169091179055600560048190556200007f908490620000da565b600555506200010892505050565b60008060008060808587031215620000a457600080fd5b84516001600160a01b0381168114620000bc57600080fd5b60208601516040870151606090970151919890975090945092505050565b60008160001904831182151516156200010357634e487b7160e01b600052601160045260246000fd5b500290565b613ff180620001186000396000f3fe6080604052600436106101e65760003560e01c80638d0cb84811610102578063d6a97a3411610095578063f281c1d711610064578063f281c1d71461068e578063f304d868146106ae578063f6f24f67146106e4578063fa3a0e58146106fa57600080fd5b8063d6a97a3414610624578063dcd8361614610639578063f13739161461064e578063f1fdf4691461066e57600080fd5b8063a8cda37b116100d1578063a8cda37b146105c7578063b0002ff8146105dc578063b9112540146105fc578063ceea752f1461060f57600080fd5b80638d0cb848146105335780638d14e127146105615780639447fe88146105815780639b19251a1461059757600080fd5b8063461a44781161017a57806374a46d591161014957806374a46d59146104bd5780637f9c9777146104dd57806381147877146104fd57806386e4206e1461051357600080fd5b8063461a4478146104025780635e7ce13a14610422578063669fdeb5146104375780636f9170f61461048d57600080fd5b8063299ca478116101b6578063299ca4781461037457806335005ffb146103ac57806338897fdd146103cc57806341b6d486146103e257600080fd5b806213c63d1461030f57806302adf2d6146103335780630725be4b14610348578063167c70501461035e57600080fd5b3661030a576102296040518060400160405280601281526020017f4d564d5f446973636f756e744f7261636c65000000000000000000000000000081525061071a565b6001600160a01b0316336001600160a01b031614156103085733600090815260086020526040902054801561030657600061028a610266836107ba565b604051602001610276919061393b565b60405160208183030381529060405261071a565b90506001600160a01b038116158015906102ad57506001600160a01b0381163014155b15610304576040516001600160a01b038216903490600081818185875af1925050503d80600081146102fb576040519150601f19603f3d011682016040523d82523d6000602084013e610300565b606091505b5050505b505b505b005b600080fd5b34801561031b57600080fd5b506002545b6040519081526020015b60405180910390f35b34801561033f57600080fd5b50600454610320565b34801561035457600080fd5b5061032060035481565b34801561036a57600080fd5b5061032060045481565b34801561038057600080fd5b50600054610394906001600160a01b031681565b6040516001600160a01b03909116815260200161032a565b3480156103b857600080fd5b506103086103c736600461397c565b610917565b3480156103d857600080fd5b5061032060015481565b3480156103ee57600080fd5b506103086103fd366004613a84565b610aad565b34801561040e57600080fd5b5061039461041d366004613aef565b61071a565b34801561042e57600080fd5b50600554610320565b34801561044357600080fd5b506104806040518060400160405280600d81526020017f4d455449535f4d414e414745520000000000000000000000000000000000000081525081565b60405161032a9190613b76565b34801561049957600080fd5b506104ad6104a8366004613ba5565b610f12565b604051901515815260200161032a565b3480156104c957600080fd5b506103086104d8366004613a84565b610f41565b3480156104e957600080fd5b506103086104f836600461397c565b61103b565b34801561050957600080fd5b5061032060055481565b34801561051f57600080fd5b5061030861052e36600461397c565b6111cc565b34801561053f57600080fd5b5061055361054e366004613bc2565b61135d565b60405161032a929190613be4565b34801561056d57600080fd5b5061030861057c366004613c08565b6114e4565b34801561058d57600080fd5b5061032060025481565b3480156105a357600080fd5b506104ad6105b2366004613ba5565b60076020526000908152604090205460ff1681565b3480156105d357600080fd5b50610308611603565b3480156105e857600080fd5b506103086105f7366004613a84565b611a62565b61030861060a366004613bc2565b611f1d565b34801561061b57600080fd5b50600354610320565b34801561063057600080fd5b50600154610320565b34801561064557600080fd5b50610308612336565b34801561065a57600080fd5b5061030861066936600461397c565b61242c565b34801561067a57600080fd5b50610308610689366004613bc2565b6125bd565b34801561069a57600080fd5b506103086106a9366004613c3d565b6129b6565b3480156106ba57600080fd5b506103206106c9366004613ba5565b6001600160a01b031660009081526008602052604090205490565b3480156106f057600080fd5b5061032061070881565b34801561070657600080fd5b5061030861071536600461397c565b612bca565b600080546040517fbf40fac10000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063bf40fac190610764908590600401613b76565b60206040518083038186803b15801561077c57600080fd5b505afa158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b49190613c69565b92915050565b6060816107fa57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610824578061080e81613cb5565b915061081d9050600a83613cee565b91506107fe565b60008167ffffffffffffffff81111561083f5761083f613995565b6040519080825280601f01601f191660200182016040528015610869576020820181803683370190505b509050815b851561090e5761087f600182613d29565b9050600061088e600a88613cee565b61089990600a613d40565b6108a39088613d29565b6108ae906030613d7d565b905060008160f81b9050808484815181106108cb576108cb613da2565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610905600a89613cee565b9750505061086e565b50949350505050565b6109556040518060400160405280600d81526020017f4d455449535f4d414e414745520000000000000000000000000000000000000081525061071a565b6001600160a01b0316336001600160a01b031614610a065760405162461bcd60e51b815260206004820152604b60248201527f4d564d5f43616e6f6e6963616c5472616e73616374696f6e3a2046756e63746960448201527f6f6e2063616e206f6e6c792062652063616c6c656420627920746865204d455460648201527f49535f4d414e414745522e000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b60008111610a565760405162461bcd60e51b815260206004820152601660248201527f736c6963652073697a652073686f756c6420677420300000000000000000000060448201526064016109fd565b600154811415610aa85760405162461bcd60e51b815260206004820152601a60248201527f736c6963652073697a6520686173206e6f74206368616e67656400000000000060448201526064016109fd565b600155565b6000858152600b60209081526040808320878452909152902060010154610b3c5760405162461bcd60e51b815260206004820152602660248201527f7468657265206973206e6f207374616b6520666f72207468697320626174636860448201527f20696e646578000000000000000000000000000000000000000000000000000060648201526084016109fd565b6000858152600b6020908152604080832087845290915281206004015460ff166003811115610b6d57610b6d613dd1565b14610bba5760405162461bcd60e51b815260206004820152601560248201527f6e6f7420616c6c6f77656420746f207375626d6974000000000000000000000060448201526064016109fd565b6000858152600b602090815260408083208784529091529020546001600160a01b03163314610c515760405162461bcd60e51b815260206004820152602160248201527f63616e206e6f74207375626d69742077697468206f746865722773207374616b60448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016109fd565b6000858152600b602090815260408083208784529091529020600201544211610ce25760405162461bcd60e51b815260206004820152603160248201527f63616e206e6f74207375626d697420647572696e672073657175656e6365722060448201527f7375626d69742070726f74656374696f6e00000000000000000000000000000060648201526084016109fd565b610cf185858585856000612d10565b8015610f0b576000858152600b6020908152604080832087845280835281842060048101805460ff191660021790553385526009845291842054938890529091526003015411610e9a576000858152600b60209081526040808320878452909152902060030154471015610da75760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e636500000000000000000000000060448201526064016109fd565b6000858152600b6020908152604080832087845282528083206003015433845260099092528220805491929091610ddf908490613d29565b90915550506000858152600b6020908152604080832087845290915280822060030154905133929183918381818185875af1925050503d8060008114610e41576040519150601f19603f3d011682016040523d82523d6000602084013e610e46565b606091505b5050905080610e975760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e636500000000000000000000000060448201526064016109fd565b50505b6000858152600b60209081526040808320878452825280832060030154815133815292830189905290820187905260608201526080810182905260a08101919091527f54c17ad82a3a4f3935f09729dcba25c47e5ecfc0d71e386eb6122f8e7db941909060c0015b60405180910390a15b5050505050565b60065460009060ff1615806107b45750506001600160a01b031660009081526007602052604090205460ff1690565b610f4d610266866107ba565b6001600160a01b0316336001600160a01b031614610fd35760405162461bcd60e51b815260206004820152602d60248201527f46756e6374696f6e2063616e206f6e6c792062652063616c6c6564206279207460448201527f68652053657175656e6365722e0000000000000000000000000000000000000060648201526084016109fd565b610fe285858585856001612d10565b8015610f0b5760408051338152602081018790529081018590526000606082015260016080820181905260a08201527f54c17ad82a3a4f3935f09729dcba25c47e5ecfc0d71e386eb6122f8e7db941909060c001610f02565b6110796040518060400160405280600d81526020017f4d455449535f4d414e414745520000000000000000000000000000000000000081525061071a565b6001600160a01b0316336001600160a01b0316146111255760405162461bcd60e51b815260206004820152604b60248201527f4d564d5f43616e6f6e6963616c5472616e73616374696f6e3a2046756e63746960448201527f6f6e2063616e206f6e6c792062652063616c6c656420627920746865204d455460648201527f49535f4d414e414745522e000000000000000000000000000000000000000000608482015260a4016109fd565b600081116111755760405162461bcd60e51b815260206004820152601760248201527f736c69636520636f756e742073686f756c64206774203000000000000000000060448201526064016109fd565b6004548114156111c75760405162461bcd60e51b815260206004820152601b60248201527f736c69636520636f756e7420686173206e6f74206368616e676564000000000060448201526064016109fd565b600455565b61120a6040518060400160405280600d81526020017f4d455449535f4d414e414745520000000000000000000000000000000000000081525061071a565b6001600160a01b0316336001600160a01b0316146112b65760405162461bcd60e51b815260206004820152604b60248201527f4d564d5f43616e6f6e6963616c5472616e73616374696f6e3a2046756e63746960448201527f6f6e2063616e206f6e6c792062652063616c6c656420627920746865204d455460648201527f49535f4d414e414745522e000000000000000000000000000000000000000000608482015260a4016109fd565b600081116113065760405162461bcd60e51b815260206004820152601660248201527f62617463682073697a652073686f756c6420677420300000000000000000000060448201526064016109fd565b6005548114156113585760405162461bcd60e51b815260206004820152601a60248201527f62617463682073697a6520686173206e6f74206368616e67656400000000000060448201526064016109fd565b600555565b6000828152600c60209081526040808320848452909152812060010154606091906113ca5760405162461bcd60e51b815260206004820152601660248201527f7478206461746120646f6573206e6f742065786973740000000000000000000060448201526064016109fd565b6000848152600c60209081526040808320868452825280832060020180548251818502810185019093528083526114b99492939192909184015b828210156114b057838290600052602060002001805461142390613e00565b80601f016020809104026020016040519081016040528092919081815260200182805461144f90613e00565b801561149c5780601f106114715761010080835404028352916020019161149c565b820191906000526020600020905b81548152906001019060200180831161147f57829003601f168201915b505050505081526020019060010190611404565b50505050613710565b6000948552600c602090815260408087209587529490529290932060030154919360ff909216925050565b6115226040518060400160405280600d81526020017f4d455449535f4d414e414745520000000000000000000000000000000000000081525061071a565b6001600160a01b0316336001600160a01b0316146115ce5760405162461bcd60e51b815260206004820152604b60248201527f4d564d5f43616e6f6e6963616c5472616e73616374696f6e3a2046756e63746960448201527f6f6e2063616e206f6e6c792062652063616c6c656420627920746865204d455460648201527f49535f4d414e414745522e000000000000000000000000000000000000000000608482015260a4016109fd565b6001600160a01b039091166000908152600760205260409020805491151560ff19928316179055600680549091166001179055565b60043560243560d81c60293560e890811c90602c35901c6000803661162a610266886107ba565b6001600160a01b0316336001600160a01b0316146116b05760405162461bcd60e51b815260206004820152602d60248201527f46756e6374696f6e2063616e206f6e6c792062652063616c6c6564206279207460448201527f68652053657175656e6365722e0000000000000000000000000000000000000060648201526084016109fd565b60006116bd856010613e54565b6116c890602f613e7f565b62ffffff169050808211156117675760006116e4826007613ea6565b905060006116f383600b613ea6565b600554843560cc1c975081359650909150823560e01c90611715600283613cee565b11156117635760405162461bcd60e51b815260206004820152601c60248201527f73697a65206f66207478206461746120697320746f6f206c617267650000000060448201526064016109fd565b5050505b60006117a76040518060400160405280601981526020017f43616e6f6e6963616c5472616e73616374696f6e436861696e0000000000000081525061071a565b90506000816001600160a01b031663cfdf677e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117e457600080fd5b505afa1580156117f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181c9190613c69565b6040517f576f2588000000000000000000000000000000000000000000000000000000008152600481018c90529091506000906001600160a01b0383169063576f25889060240160206040518083038186803b15801561187b57600080fd5b505afa15801561188f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b39190613ebe565b9050600080846001600160a01b03166000366040516118d3929190613ed7565b6000604051808303816000865af19150503d8060008114611910576040519150601f19603f3d011682016040523d82523d6000602084013e611915565b606091505b5090925090508161192d576040513d806000833e8082fd5b505060405180608001604052808b64ffffffffff1681526020018a62ffffff16815260200188815260200187815250600a60008d8152602001908152602001600020600083815260200190815260200160002060008201518160000160006101000a81548164ffffffffff021916908364ffffffffff16021790555060208201518160000160056101000a81548162ffffff021916908362ffffff16021790555060408201518160010155606082015181600201559050507fbc126ec1626b22a49c522daccd6a7168b58da9747e30756cd98cf6c679124a248b828c8c8b8b604051611a4d96959493929190958652602086019490945264ffffffffff92909216604085015262ffffff166060840152608083015260a082015260c00190565b60405180910390a15050505050505050505050565b611a6e610266866107ba565b6001600160a01b0316336001600160a01b031614611af45760405162461bcd60e51b815260206004820152602d60248201527f46756e6374696f6e2063616e206f6e6c792062652063616c6c6564206279207460448201527f68652053657175656e6365722e0000000000000000000000000000000000000060648201526084016109fd565b6000858152600b60209081526040808320878452909152902060010154611b835760405162461bcd60e51b815260206004820152602660248201527f7468657265206973206e6f207374616b6520666f72207468697320626174636860448201527f20696e646578000000000000000000000000000000000000000000000000000060648201526084016109fd565b6000858152600b6020908152604080832087845290915281206004015460ff166003811115611bb457611bb4613dd1565b14611c015760405162461bcd60e51b815260206004820152601560248201527f6e6f7420616c6c6f77656420746f207375626d6974000000000000000000000060448201526064016109fd565b6000858152600b60209081526040808320878452909152902060020154421115611c935760405162461bcd60e51b815260206004820152603160248201527f63616e206e6f74207375626d6974206f7574206f662073657175656e6365722060448201527f7375626d69742070726f74656374696f6e00000000000000000000000000000060648201526084016109fd565b611ca285858585856001612d10565b8015610f0b576000858152600b6020908152604080832087845280835281842080546001600160a01b03168552600984529184205493889052909152600301541115611d305760405162461bcd60e51b815260206004820152601260248201527f696e73756666696369656e74207374616b65000000000000000000000000000060448201526064016109fd565b6000858152600b60209081526040808320878452909152902060030154471015611d9c5760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e636500000000000000000000000060448201526064016109fd565b6000858152600b60209081526040808320878452825280832060048101805460ff19166001179055600381015490546001600160a01b0316845260099092528220805491929091611dee908490613d29565b90915550506000858152600b6020908152604080832087845290915280822060030154905133929183918381818185875af1925050503d8060008114611e50576040519150601f19603f3d011682016040523d82523d6000602084013e611e55565b606091505b5050905080611ea65760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e636500000000000000000000000060448201526064016109fd565b6000878152600b602090815260408083208984528252918290206003015482513381529182018a9052818301899052606082015260016080820181905260a082015290517f54c17ad82a3a4f3935f09729dcba25c47e5ecfc0d71e386eb6122f8e7db941909181900360c00190a150505050505050565b611f2633610f12565b611f985760405162461bcd60e51b815260206004820152602360248201527f6f6e6c792077686974656c6973746564207665726966696572732063616e206360448201527f616c6c000000000000000000000000000000000000000000000000000000000060648201526084016109fd565b6003543490611fe95760405162461bcd60e51b815260206004820152601960248201527f7374616b6520636f7374206e6f7420636f6e666967207965740000000000000060448201526064016109fd565b806003541461203a5760405162461bcd60e51b815260206004820152601460248201527f7374616b6520636f737420696e636f727265637400000000000000000000000060448201526064016109fd565b6000600254116120b25760405162461bcd60e51b815260206004820152602760248201527f73657175656e636572207375626d6974207365636f6e6473206e6f7420636f6e60448201527f666967207965740000000000000000000000000000000000000000000000000060648201526084016109fd565b6000838152600a6020908152604080832085845290915290206001015461211b5760405162461bcd60e51b815260206004820152601c60248201527f626174636820656c656d656e7420646f6573206e6f742065786973740000000060448201526064016109fd565b6000838152600b60209081526040808320858452909152902060010154156121e2576000838152600b6020908152604080832085845290915281206004015460ff16600381111561216e5761216e613dd1565b14156121e25760405162461bcd60e51b815260206004820152602560248201527f74686572652069732061207374616b6520666f7220746869732062617463682060448201527f696e64657800000000000000000000000000000000000000000000000000000060648201526084016109fd565b6040518060a00160405280336001600160a01b03168152602001428152602001600254426122109190613ea6565b815260208101839052604001600090526000848152600b60209081526040808320868452825291829020835181547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909116178155908301516001808301919091559183015160028201556060830151600380830191909155608084015160048301805493949193909260ff19909116919084908111156122bc576122bc613dd1565b02179055505033600090815260096020526040812080548493509091906122e4908490613ea6565b90915550506040805133815260208101859052908101839052606081018290527fc8e8ecec98771fd35baf93515536f79f3f5433d9e56a429491095197efe9dbe19060800160405180910390a1505050565b6123746040518060400160405280600d81526020017f4d455449535f4d414e414745520000000000000000000000000000000000000081525061071a565b6001600160a01b0316336001600160a01b0316146124205760405162461bcd60e51b815260206004820152604b60248201527f4d564d5f43616e6f6e6963616c5472616e73616374696f6e3a2046756e63746960448201527f6f6e2063616e206f6e6c792062652063616c6c656420627920746865204d455460648201527f49535f4d414e414745522e000000000000000000000000000000000000000000608482015260a4016109fd565b6006805460ff19169055565b61246a6040518060400160405280600d81526020017f4d455449535f4d414e414745520000000000000000000000000000000000000081525061071a565b6001600160a01b0316336001600160a01b0316146125165760405162461bcd60e51b815260206004820152604b60248201527f4d564d5f43616e6f6e6963616c5472616e73616374696f6e3a2046756e63746960448201527f6f6e2063616e206f6e6c792062652063616c6c656420627920746865204d455460648201527f49535f4d414e414745522e000000000000000000000000000000000000000000608482015260a4016109fd565b600081116125665760405162461bcd60e51b815260206004820152601360248201527f7365636f6e64732073686f756c6420677420300000000000000000000000000060448201526064016109fd565b6002548114156125b85760405162461bcd60e51b815260206004820152601760248201527f7365636f6e647320686173206e6f74206368616e67656400000000000000000060448201526064016109fd565b600255565b6000828152600b6020908152604080832084845290915290206001015461264c5760405162461bcd60e51b815260206004820152602660248201527f7468657265206973206e6f207374616b6520666f72207468697320626174636860448201527f20696e646578000000000000000000000000000000000000000000000000000060648201526084016109fd565b6000828152600b6020908152604080832084845290915281206004015460ff16600381111561267d5761267d613dd1565b146126ca5760405162461bcd60e51b815260206004820152601b60248201527f7769746864726177616c7320617265206e6f7420616c6c6f776564000000000060448201526064016109fd565b6000828152600b602090815260408083208484529091529020546001600160a01b0316331461273b5760405162461bcd60e51b815260206004820152601e60248201527f63616e206e6f74207769746864726177206f746865722773207374616b65000060448201526064016109fd565b6000828152600b6020908152604080832084845290915290206002015442116127cc5760405162461bcd60e51b815260206004820152602960248201527f63616e206e6f7420776974686472617720647572696e67207375626d6974207060448201527f726f74656374696f6e000000000000000000000000000000000000000000000060648201526084016109fd565b33600090815260096020908152604080832054858452600b83528184208585529092529091206003015411156128445760405162461bcd60e51b815260206004820152601260248201527f696e73756666696369656e74207374616b65000000000000000000000000000060448201526064016109fd565b6000828152600b602090815260408083208484529091529020600301544710156128b05760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e636500000000000000000000000060448201526064016109fd565b6000828152600b60209081526040808320848452825280832060048101805460ff191660039081179091550154338452600990925282208054919290916128f8908490613d29565b90915550506000828152600b6020908152604080832084845290915280822060030154905133929183918381818185875af1925050503d806000811461295a576040519150601f19603f3d011682016040523d82523d6000602084013e61295f565b606091505b50509050806129b05760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e636500000000000000000000000060448201526064016109fd565b50505050565b6129f46040518060400160405280600d81526020017f4d455449535f4d414e414745520000000000000000000000000000000000000081525061071a565b6001600160a01b0316336001600160a01b031614612aa05760405162461bcd60e51b815260206004820152604b60248201527f4d564d5f43616e6f6e6963616c5472616e73616374696f6e3a2046756e63746960448201527f6f6e2063616e206f6e6c792062652063616c6c656420627920746865204d455460648201527f49535f4d414e414745522e000000000000000000000000000000000000000000608482015260a4016109fd565b6001600160a01b038216612af65760405162461bcd60e51b815260206004820152601560248201527f61646472657373206e6f7420617661696c61626c65000000000000000000000060448201526064016109fd565b60008111612b465760405162461bcd60e51b815260206004820152601560248201527f636861696e4964206e6f7420617661696c61626c65000000000000000000000060448201526064016109fd565b6001600160a01b038216600090815260086020526040902054811415612bae5760405162461bcd60e51b815260206004820152600960248201527f6e6f206368616e6765000000000000000000000000000000000000000000000060448201526064016109fd565b6001600160a01b03909116600090815260086020526040902055565b612c086040518060400160405280600d81526020017f4d455449535f4d414e414745520000000000000000000000000000000000000081525061071a565b6001600160a01b0316336001600160a01b031614612cb45760405162461bcd60e51b815260206004820152604b60248201527f4d564d5f43616e6f6e6963616c5472616e73616374696f6e3a2046756e63746960448201527f6f6e2063616e206f6e6c792062652063616c6c656420627920746865204d455460648201527f49535f4d414e414745522e000000000000000000000000000000000000000000608482015260a4016109fd565b662386f26fc10000811015612d0b5760405162461bcd60e51b815260206004820152601a60248201527f7374616b6520636f73742073686f756c6420677465203165313600000000000060448201526064016109fd565b600355565b600060015411612d625760405162461bcd60e51b815260206004820152601960248201527f736c6963652073697a65206e6f7420636f6e666967207965740000000000000060448201526064016109fd565b6000835111612db35760405162461bcd60e51b815260206004820152600a60248201527f656d70747920646174610000000000000000000000000000000000000000000060448201526064016109fd565b6000868152600a60209081526040808320888452909152902060010154612e1c5760405162461bcd60e51b815260206004820152601c60248201527f626174636820656c656d656e7420646f6573206e6f742065786973740000000060448201526064016109fd565b6000868152600a6020908152604080832088845290915290205465010000000000900462ffffff16612eb65760405162461bcd60e51b815260206004820152603060248201527f626174636820746f74616c20656c656d656e7420746f20617070656e6420736860448201527f6f756c64206e6f74206265207a65726f0000000000000000000000000000000060648201526084016109fd565b60015460028451612ec79190613cee565b1115612f155760405162461bcd60e51b815260206004820152601f60248201527f736c6963652073697a65206f66206461746120697320746f6f206c617267650060448201526064016109fd565b6004548410612f665760405162461bcd60e51b815260206004820152601660248201527f736c69636520696e64657820697320677265617465720000000000000000000060448201526064016109fd565b6000868152600c60209081526040808320888452909152902060020154841115612fd25760405162461bcd60e51b815260206004820152601560248201527f696e636f727265637420736c69636520696e646578000000000000000000000060448201526064016109fd565b6000868152600c60209081526040808320888452909152902060010154156132ca576000868152600c602090815260408083208884529091529020546001600160a01b031633146131c6576000868152600c6020908152604080832088845290915290206001015442906130499061070890613ea6565b116130965760405162461bcd60e51b815260206004820152600d60248201527f696e207375626d697474696e670000000000000000000000000000000000000060448201526064016109fd565b831561310a5760405162461bcd60e51b815260206004820152602260248201527f736c69636520696e6465782073686f756c642073746172742066726f6d207a6560448201527f726f00000000000000000000000000000000000000000000000000000000000060648201526084016109fd565b6000868152600c6020908152604080832088845280835281842080547fffffffffffffffffffffffff00000000000000000000000000000000000000001633178155426001808301919091558351808601909452888452948a9052925261317692600290920191613776565b506000868152600c60209081526040808320888452909152902060030180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101008415150217905561341a565b6000868152600c6020908152604080832088845290915290206002015484101561323e576000868152600c60209081526040808320888452909152902060020180548491908690811061321b5761321b613da2565b9060005260206000200190805190602001906132389291906137d3565b5061327b565b6000868152600c602090815260408083208884528252822060020180546001810182559083529181902085516131769391909101918601906137d3565b6000868152600c60209081526040808320888452909152902060030180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101008415150217905561341a565b604080516001808252818301909252600091816020015b60608152602001906001900390816132e1579050509050838160008151811061330c5761330c613da2565b6020908102919091018101919091526040805160a0810182523381524281840190815281830185815260006060840181905288151560808501528c8152600c86528481208c8252865293909320825181547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909116178155905160018201559151805191936133ac92600285019290910190613853565b506060820151600390910180546080909301511515610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff921515929092167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090931692909217179055505b8180156134245750805b1561370857604080518082018252600181527f5f000000000000000000000000000000000000000000000000000000000000006020808301919091526000898152600a8252838120898252909152918220549091906134899064ffffffffff166107ba565b6000898152600a602090815260408083208b8452909152812054919250906134be9065010000000000900462ffffff166107ba565b60008a8152600a602090815260408083208c8452909152812060010154919250906134e8906107ba565b60008b8152600c602090815260408083208d84528252808320600201805482518185028101850190935280835294955092936135d1939192859084015b828210156114b057838290600052602060002001805461354490613e00565b80601f016020809104026020016040519081016040528092919081815260200182805461357090613e00565b80156135bd5780601f10613592576101008083540402835291602001916135bd565b820191906000526020600020905b8154815290600101906020018083116135a057829003601f168201915b505050505081526020019060010190613525565b90506000600285878689878b886040516020016135f49796959493929190613ee7565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905261362c91613f79565b602060405180830381855afa158015613649573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061366c9190613ebe565b60008d8152600a602090815260408083208f845290915290206002015490915081146136da5760405162461bcd60e51b815260206004820152601560248201527f7478206461746120766572696679206661696c6564000000000000000000000060448201526064016109fd565b5050506000898152600c602090815260408083208b84529091529020600301805460ff191660011790555050505b505050505050565b60608060005b835181101561376f578184828151811061373257613732613da2565b602002602001015160405160200161374b929190613f95565b6040516020818303038152906040529150808061376790613cb5565b915050613716565b5092915050565b8280548282559060005260206000209081019282156137c3579160200282015b828111156137c357825180516137b39184916020909101906137d3565b5091602001919060010190613796565b506137cf9291506138a0565b5090565b8280546137df90613e00565b90600052602060002090601f0160209004810192826138015760008555613847565b82601f1061381a57805160ff1916838001178555613847565b82800160010185558215613847579182015b8281111561384757825182559160200191906001019061382c565b506137cf9291506138bd565b8280548282559060005260206000209081019282156137c3579160200282015b828111156137c357825180516138909184916020909101906137d3565b5091602001919060010190613873565b808211156137cf5760006138b482826138d2565b506001016138a0565b5b808211156137cf57600081556001016138be565b5080546138de90613e00565b6000825580601f106138ee575050565b601f01602090049060005260206000209081019061390c91906138bd565b50565b60005b8381101561392a578181015183820152602001613912565b838111156129b05750506000910152565b6000825161394d81846020870161390f565b7f5f4d564d5f53657175656e6365725f5772617070657200000000000000000000920191825250601601919050565b60006020828403121561398e57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126139d557600080fd5b813567ffffffffffffffff808211156139f0576139f0613995565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715613a3657613a36613995565b81604052838152866020858801011115613a4f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b80358015158114613a7f57600080fd5b919050565b600080600080600060a08688031215613a9c57600080fd5b853594506020860135935060408601359250606086013567ffffffffffffffff811115613ac857600080fd5b613ad4888289016139c4565b925050613ae360808701613a6f565b90509295509295909350565b600060208284031215613b0157600080fd5b813567ffffffffffffffff811115613b1857600080fd5b613b24848285016139c4565b949350505050565b60008151808452613b4481602086016020860161390f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000613b896020830184613b2c565b9392505050565b6001600160a01b038116811461390c57600080fd5b600060208284031215613bb757600080fd5b8135613b8981613b90565b60008060408385031215613bd557600080fd5b50508035926020909101359150565b604081526000613bf76040830185613b2c565b905082151560208301529392505050565b60008060408385031215613c1b57600080fd5b8235613c2681613b90565b9150613c3460208401613a6f565b90509250929050565b60008060408385031215613c5057600080fd5b8235613c5b81613b90565b946020939093013593505050565b600060208284031215613c7b57600080fd5b8151613b8981613b90565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613ce757613ce7613c86565b5060010190565b600082613d24577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082821015613d3b57613d3b613c86565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613d7857613d78613c86565b500290565b600060ff821660ff84168060ff03821115613d9a57613d9a613c86565b019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600181811c90821680613e1457607f821691505b60208210811415613e4e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600062ffffff80831681851681830481118215151615613e7657613e76613c86565b02949350505050565b600062ffffff808316818516808303821115613e9d57613e9d613c86565b01949350505050565b60008219821115613eb957613eb9613c86565b500190565b600060208284031215613ed057600080fd5b5051919050565b8183823760009101908152919050565b600088516020613efa8285838e0161390f565b895191840191613f0d8184848e0161390f565b8951920191613f1f8184848d0161390f565b8851920191613f318184848c0161390f565b8751920191613f438184848b0161390f565b8651920191613f558184848a0161390f565b8551920191613f67818484890161390f565b919091019a9950505050505050505050565b60008251613f8b81846020870161390f565b9190910192915050565b60008351613fa781846020880161390f565b835190830190613e9d81836020880161390f56fea264697066735822122069edc1dafd68972e418b22501ef8a0e80dca273fc6ca4aeb6ba8d79ed39f29a964736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106101e65760003560e01c80638d0cb84811610102578063d6a97a3411610095578063f281c1d711610064578063f281c1d71461068e578063f304d868146106ae578063f6f24f67146106e4578063fa3a0e58146106fa57600080fd5b8063d6a97a3414610624578063dcd8361614610639578063f13739161461064e578063f1fdf4691461066e57600080fd5b8063a8cda37b116100d1578063a8cda37b146105c7578063b0002ff8146105dc578063b9112540146105fc578063ceea752f1461060f57600080fd5b80638d0cb848146105335780638d14e127146105615780639447fe88146105815780639b19251a1461059757600080fd5b8063461a44781161017a57806374a46d591161014957806374a46d59146104bd5780637f9c9777146104dd57806381147877146104fd57806386e4206e1461051357600080fd5b8063461a4478146104025780635e7ce13a14610422578063669fdeb5146104375780636f9170f61461048d57600080fd5b8063299ca478116101b6578063299ca4781461037457806335005ffb146103ac57806338897fdd146103cc57806341b6d486146103e257600080fd5b806213c63d1461030f57806302adf2d6146103335780630725be4b14610348578063167c70501461035e57600080fd5b3661030a576102296040518060400160405280601281526020017f4d564d5f446973636f756e744f7261636c65000000000000000000000000000081525061071a565b6001600160a01b0316336001600160a01b031614156103085733600090815260086020526040902054801561030657600061028a610266836107ba565b604051602001610276919061393b565b60405160208183030381529060405261071a565b90506001600160a01b038116158015906102ad57506001600160a01b0381163014155b15610304576040516001600160a01b038216903490600081818185875af1925050503d80600081146102fb576040519150601f19603f3d011682016040523d82523d6000602084013e610300565b606091505b5050505b505b505b005b600080fd5b34801561031b57600080fd5b506002545b6040519081526020015b60405180910390f35b34801561033f57600080fd5b50600454610320565b34801561035457600080fd5b5061032060035481565b34801561036a57600080fd5b5061032060045481565b34801561038057600080fd5b50600054610394906001600160a01b031681565b6040516001600160a01b03909116815260200161032a565b3480156103b857600080fd5b506103086103c736600461397c565b610917565b3480156103d857600080fd5b5061032060015481565b3480156103ee57600080fd5b506103086103fd366004613a84565b610aad565b34801561040e57600080fd5b5061039461041d366004613aef565b61071a565b34801561042e57600080fd5b50600554610320565b34801561044357600080fd5b506104806040518060400160405280600d81526020017f4d455449535f4d414e414745520000000000000000000000000000000000000081525081565b60405161032a9190613b76565b34801561049957600080fd5b506104ad6104a8366004613ba5565b610f12565b604051901515815260200161032a565b3480156104c957600080fd5b506103086104d8366004613a84565b610f41565b3480156104e957600080fd5b506103086104f836600461397c565b61103b565b34801561050957600080fd5b5061032060055481565b34801561051f57600080fd5b5061030861052e36600461397c565b6111cc565b34801561053f57600080fd5b5061055361054e366004613bc2565b61135d565b60405161032a929190613be4565b34801561056d57600080fd5b5061030861057c366004613c08565b6114e4565b34801561058d57600080fd5b5061032060025481565b3480156105a357600080fd5b506104ad6105b2366004613ba5565b60076020526000908152604090205460ff1681565b3480156105d357600080fd5b50610308611603565b3480156105e857600080fd5b506103086105f7366004613a84565b611a62565b61030861060a366004613bc2565b611f1d565b34801561061b57600080fd5b50600354610320565b34801561063057600080fd5b50600154610320565b34801561064557600080fd5b50610308612336565b34801561065a57600080fd5b5061030861066936600461397c565b61242c565b34801561067a57600080fd5b50610308610689366004613bc2565b6125bd565b34801561069a57600080fd5b506103086106a9366004613c3d565b6129b6565b3480156106ba57600080fd5b506103206106c9366004613ba5565b6001600160a01b031660009081526008602052604090205490565b3480156106f057600080fd5b5061032061070881565b34801561070657600080fd5b5061030861071536600461397c565b612bca565b600080546040517fbf40fac10000000000000000000000000000000000000000000000000000000081526001600160a01b039091169063bf40fac190610764908590600401613b76565b60206040518083038186803b15801561077c57600080fd5b505afa158015610790573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b49190613c69565b92915050565b6060816107fa57505060408051808201909152600181527f3000000000000000000000000000000000000000000000000000000000000000602082015290565b8160005b8115610824578061080e81613cb5565b915061081d9050600a83613cee565b91506107fe565b60008167ffffffffffffffff81111561083f5761083f613995565b6040519080825280601f01601f191660200182016040528015610869576020820181803683370190505b509050815b851561090e5761087f600182613d29565b9050600061088e600a88613cee565b61089990600a613d40565b6108a39088613d29565b6108ae906030613d7d565b905060008160f81b9050808484815181106108cb576108cb613da2565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350610905600a89613cee565b9750505061086e565b50949350505050565b6109556040518060400160405280600d81526020017f4d455449535f4d414e414745520000000000000000000000000000000000000081525061071a565b6001600160a01b0316336001600160a01b031614610a065760405162461bcd60e51b815260206004820152604b60248201527f4d564d5f43616e6f6e6963616c5472616e73616374696f6e3a2046756e63746960448201527f6f6e2063616e206f6e6c792062652063616c6c656420627920746865204d455460648201527f49535f4d414e414745522e000000000000000000000000000000000000000000608482015260a4015b60405180910390fd5b60008111610a565760405162461bcd60e51b815260206004820152601660248201527f736c6963652073697a652073686f756c6420677420300000000000000000000060448201526064016109fd565b600154811415610aa85760405162461bcd60e51b815260206004820152601a60248201527f736c6963652073697a6520686173206e6f74206368616e67656400000000000060448201526064016109fd565b600155565b6000858152600b60209081526040808320878452909152902060010154610b3c5760405162461bcd60e51b815260206004820152602660248201527f7468657265206973206e6f207374616b6520666f72207468697320626174636860448201527f20696e646578000000000000000000000000000000000000000000000000000060648201526084016109fd565b6000858152600b6020908152604080832087845290915281206004015460ff166003811115610b6d57610b6d613dd1565b14610bba5760405162461bcd60e51b815260206004820152601560248201527f6e6f7420616c6c6f77656420746f207375626d6974000000000000000000000060448201526064016109fd565b6000858152600b602090815260408083208784529091529020546001600160a01b03163314610c515760405162461bcd60e51b815260206004820152602160248201527f63616e206e6f74207375626d69742077697468206f746865722773207374616b60448201527f650000000000000000000000000000000000000000000000000000000000000060648201526084016109fd565b6000858152600b602090815260408083208784529091529020600201544211610ce25760405162461bcd60e51b815260206004820152603160248201527f63616e206e6f74207375626d697420647572696e672073657175656e6365722060448201527f7375626d69742070726f74656374696f6e00000000000000000000000000000060648201526084016109fd565b610cf185858585856000612d10565b8015610f0b576000858152600b6020908152604080832087845280835281842060048101805460ff191660021790553385526009845291842054938890529091526003015411610e9a576000858152600b60209081526040808320878452909152902060030154471015610da75760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e636500000000000000000000000060448201526064016109fd565b6000858152600b6020908152604080832087845282528083206003015433845260099092528220805491929091610ddf908490613d29565b90915550506000858152600b6020908152604080832087845290915280822060030154905133929183918381818185875af1925050503d8060008114610e41576040519150601f19603f3d011682016040523d82523d6000602084013e610e46565b606091505b5050905080610e975760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e636500000000000000000000000060448201526064016109fd565b50505b6000858152600b60209081526040808320878452825280832060030154815133815292830189905290820187905260608201526080810182905260a08101919091527f54c17ad82a3a4f3935f09729dcba25c47e5ecfc0d71e386eb6122f8e7db941909060c0015b60405180910390a15b5050505050565b60065460009060ff1615806107b45750506001600160a01b031660009081526007602052604090205460ff1690565b610f4d610266866107ba565b6001600160a01b0316336001600160a01b031614610fd35760405162461bcd60e51b815260206004820152602d60248201527f46756e6374696f6e2063616e206f6e6c792062652063616c6c6564206279207460448201527f68652053657175656e6365722e0000000000000000000000000000000000000060648201526084016109fd565b610fe285858585856001612d10565b8015610f0b5760408051338152602081018790529081018590526000606082015260016080820181905260a08201527f54c17ad82a3a4f3935f09729dcba25c47e5ecfc0d71e386eb6122f8e7db941909060c001610f02565b6110796040518060400160405280600d81526020017f4d455449535f4d414e414745520000000000000000000000000000000000000081525061071a565b6001600160a01b0316336001600160a01b0316146111255760405162461bcd60e51b815260206004820152604b60248201527f4d564d5f43616e6f6e6963616c5472616e73616374696f6e3a2046756e63746960448201527f6f6e2063616e206f6e6c792062652063616c6c656420627920746865204d455460648201527f49535f4d414e414745522e000000000000000000000000000000000000000000608482015260a4016109fd565b600081116111755760405162461bcd60e51b815260206004820152601760248201527f736c69636520636f756e742073686f756c64206774203000000000000000000060448201526064016109fd565b6004548114156111c75760405162461bcd60e51b815260206004820152601b60248201527f736c69636520636f756e7420686173206e6f74206368616e676564000000000060448201526064016109fd565b600455565b61120a6040518060400160405280600d81526020017f4d455449535f4d414e414745520000000000000000000000000000000000000081525061071a565b6001600160a01b0316336001600160a01b0316146112b65760405162461bcd60e51b815260206004820152604b60248201527f4d564d5f43616e6f6e6963616c5472616e73616374696f6e3a2046756e63746960448201527f6f6e2063616e206f6e6c792062652063616c6c656420627920746865204d455460648201527f49535f4d414e414745522e000000000000000000000000000000000000000000608482015260a4016109fd565b600081116113065760405162461bcd60e51b815260206004820152601660248201527f62617463682073697a652073686f756c6420677420300000000000000000000060448201526064016109fd565b6005548114156113585760405162461bcd60e51b815260206004820152601a60248201527f62617463682073697a6520686173206e6f74206368616e67656400000000000060448201526064016109fd565b600555565b6000828152600c60209081526040808320848452909152812060010154606091906113ca5760405162461bcd60e51b815260206004820152601660248201527f7478206461746120646f6573206e6f742065786973740000000000000000000060448201526064016109fd565b6000848152600c60209081526040808320868452825280832060020180548251818502810185019093528083526114b99492939192909184015b828210156114b057838290600052602060002001805461142390613e00565b80601f016020809104026020016040519081016040528092919081815260200182805461144f90613e00565b801561149c5780601f106114715761010080835404028352916020019161149c565b820191906000526020600020905b81548152906001019060200180831161147f57829003601f168201915b505050505081526020019060010190611404565b50505050613710565b6000948552600c602090815260408087209587529490529290932060030154919360ff909216925050565b6115226040518060400160405280600d81526020017f4d455449535f4d414e414745520000000000000000000000000000000000000081525061071a565b6001600160a01b0316336001600160a01b0316146115ce5760405162461bcd60e51b815260206004820152604b60248201527f4d564d5f43616e6f6e6963616c5472616e73616374696f6e3a2046756e63746960448201527f6f6e2063616e206f6e6c792062652063616c6c656420627920746865204d455460648201527f49535f4d414e414745522e000000000000000000000000000000000000000000608482015260a4016109fd565b6001600160a01b039091166000908152600760205260409020805491151560ff19928316179055600680549091166001179055565b60043560243560d81c60293560e890811c90602c35901c6000803661162a610266886107ba565b6001600160a01b0316336001600160a01b0316146116b05760405162461bcd60e51b815260206004820152602d60248201527f46756e6374696f6e2063616e206f6e6c792062652063616c6c6564206279207460448201527f68652053657175656e6365722e0000000000000000000000000000000000000060648201526084016109fd565b60006116bd856010613e54565b6116c890602f613e7f565b62ffffff169050808211156117675760006116e4826007613ea6565b905060006116f383600b613ea6565b600554843560cc1c975081359650909150823560e01c90611715600283613cee565b11156117635760405162461bcd60e51b815260206004820152601c60248201527f73697a65206f66207478206461746120697320746f6f206c617267650000000060448201526064016109fd565b5050505b60006117a76040518060400160405280601981526020017f43616e6f6e6963616c5472616e73616374696f6e436861696e0000000000000081525061071a565b90506000816001600160a01b031663cfdf677e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117e457600080fd5b505afa1580156117f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181c9190613c69565b6040517f576f2588000000000000000000000000000000000000000000000000000000008152600481018c90529091506000906001600160a01b0383169063576f25889060240160206040518083038186803b15801561187b57600080fd5b505afa15801561188f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118b39190613ebe565b9050600080846001600160a01b03166000366040516118d3929190613ed7565b6000604051808303816000865af19150503d8060008114611910576040519150601f19603f3d011682016040523d82523d6000602084013e611915565b606091505b5090925090508161192d576040513d806000833e8082fd5b505060405180608001604052808b64ffffffffff1681526020018a62ffffff16815260200188815260200187815250600a60008d8152602001908152602001600020600083815260200190815260200160002060008201518160000160006101000a81548164ffffffffff021916908364ffffffffff16021790555060208201518160000160056101000a81548162ffffff021916908362ffffff16021790555060408201518160010155606082015181600201559050507fbc126ec1626b22a49c522daccd6a7168b58da9747e30756cd98cf6c679124a248b828c8c8b8b604051611a4d96959493929190958652602086019490945264ffffffffff92909216604085015262ffffff166060840152608083015260a082015260c00190565b60405180910390a15050505050505050505050565b611a6e610266866107ba565b6001600160a01b0316336001600160a01b031614611af45760405162461bcd60e51b815260206004820152602d60248201527f46756e6374696f6e2063616e206f6e6c792062652063616c6c6564206279207460448201527f68652053657175656e6365722e0000000000000000000000000000000000000060648201526084016109fd565b6000858152600b60209081526040808320878452909152902060010154611b835760405162461bcd60e51b815260206004820152602660248201527f7468657265206973206e6f207374616b6520666f72207468697320626174636860448201527f20696e646578000000000000000000000000000000000000000000000000000060648201526084016109fd565b6000858152600b6020908152604080832087845290915281206004015460ff166003811115611bb457611bb4613dd1565b14611c015760405162461bcd60e51b815260206004820152601560248201527f6e6f7420616c6c6f77656420746f207375626d6974000000000000000000000060448201526064016109fd565b6000858152600b60209081526040808320878452909152902060020154421115611c935760405162461bcd60e51b815260206004820152603160248201527f63616e206e6f74207375626d6974206f7574206f662073657175656e6365722060448201527f7375626d69742070726f74656374696f6e00000000000000000000000000000060648201526084016109fd565b611ca285858585856001612d10565b8015610f0b576000858152600b6020908152604080832087845280835281842080546001600160a01b03168552600984529184205493889052909152600301541115611d305760405162461bcd60e51b815260206004820152601260248201527f696e73756666696369656e74207374616b65000000000000000000000000000060448201526064016109fd565b6000858152600b60209081526040808320878452909152902060030154471015611d9c5760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e636500000000000000000000000060448201526064016109fd565b6000858152600b60209081526040808320878452825280832060048101805460ff19166001179055600381015490546001600160a01b0316845260099092528220805491929091611dee908490613d29565b90915550506000858152600b6020908152604080832087845290915280822060030154905133929183918381818185875af1925050503d8060008114611e50576040519150601f19603f3d011682016040523d82523d6000602084013e611e55565b606091505b5050905080611ea65760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e636500000000000000000000000060448201526064016109fd565b6000878152600b602090815260408083208984528252918290206003015482513381529182018a9052818301899052606082015260016080820181905260a082015290517f54c17ad82a3a4f3935f09729dcba25c47e5ecfc0d71e386eb6122f8e7db941909181900360c00190a150505050505050565b611f2633610f12565b611f985760405162461bcd60e51b815260206004820152602360248201527f6f6e6c792077686974656c6973746564207665726966696572732063616e206360448201527f616c6c000000000000000000000000000000000000000000000000000000000060648201526084016109fd565b6003543490611fe95760405162461bcd60e51b815260206004820152601960248201527f7374616b6520636f7374206e6f7420636f6e666967207965740000000000000060448201526064016109fd565b806003541461203a5760405162461bcd60e51b815260206004820152601460248201527f7374616b6520636f737420696e636f727265637400000000000000000000000060448201526064016109fd565b6000600254116120b25760405162461bcd60e51b815260206004820152602760248201527f73657175656e636572207375626d6974207365636f6e6473206e6f7420636f6e60448201527f666967207965740000000000000000000000000000000000000000000000000060648201526084016109fd565b6000838152600a6020908152604080832085845290915290206001015461211b5760405162461bcd60e51b815260206004820152601c60248201527f626174636820656c656d656e7420646f6573206e6f742065786973740000000060448201526064016109fd565b6000838152600b60209081526040808320858452909152902060010154156121e2576000838152600b6020908152604080832085845290915281206004015460ff16600381111561216e5761216e613dd1565b14156121e25760405162461bcd60e51b815260206004820152602560248201527f74686572652069732061207374616b6520666f7220746869732062617463682060448201527f696e64657800000000000000000000000000000000000000000000000000000060648201526084016109fd565b6040518060a00160405280336001600160a01b03168152602001428152602001600254426122109190613ea6565b815260208101839052604001600090526000848152600b60209081526040808320868452825291829020835181547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909116178155908301516001808301919091559183015160028201556060830151600380830191909155608084015160048301805493949193909260ff19909116919084908111156122bc576122bc613dd1565b02179055505033600090815260096020526040812080548493509091906122e4908490613ea6565b90915550506040805133815260208101859052908101839052606081018290527fc8e8ecec98771fd35baf93515536f79f3f5433d9e56a429491095197efe9dbe19060800160405180910390a1505050565b6123746040518060400160405280600d81526020017f4d455449535f4d414e414745520000000000000000000000000000000000000081525061071a565b6001600160a01b0316336001600160a01b0316146124205760405162461bcd60e51b815260206004820152604b60248201527f4d564d5f43616e6f6e6963616c5472616e73616374696f6e3a2046756e63746960448201527f6f6e2063616e206f6e6c792062652063616c6c656420627920746865204d455460648201527f49535f4d414e414745522e000000000000000000000000000000000000000000608482015260a4016109fd565b6006805460ff19169055565b61246a6040518060400160405280600d81526020017f4d455449535f4d414e414745520000000000000000000000000000000000000081525061071a565b6001600160a01b0316336001600160a01b0316146125165760405162461bcd60e51b815260206004820152604b60248201527f4d564d5f43616e6f6e6963616c5472616e73616374696f6e3a2046756e63746960448201527f6f6e2063616e206f6e6c792062652063616c6c656420627920746865204d455460648201527f49535f4d414e414745522e000000000000000000000000000000000000000000608482015260a4016109fd565b600081116125665760405162461bcd60e51b815260206004820152601360248201527f7365636f6e64732073686f756c6420677420300000000000000000000000000060448201526064016109fd565b6002548114156125b85760405162461bcd60e51b815260206004820152601760248201527f7365636f6e647320686173206e6f74206368616e67656400000000000000000060448201526064016109fd565b600255565b6000828152600b6020908152604080832084845290915290206001015461264c5760405162461bcd60e51b815260206004820152602660248201527f7468657265206973206e6f207374616b6520666f72207468697320626174636860448201527f20696e646578000000000000000000000000000000000000000000000000000060648201526084016109fd565b6000828152600b6020908152604080832084845290915281206004015460ff16600381111561267d5761267d613dd1565b146126ca5760405162461bcd60e51b815260206004820152601b60248201527f7769746864726177616c7320617265206e6f7420616c6c6f776564000000000060448201526064016109fd565b6000828152600b602090815260408083208484529091529020546001600160a01b0316331461273b5760405162461bcd60e51b815260206004820152601e60248201527f63616e206e6f74207769746864726177206f746865722773207374616b65000060448201526064016109fd565b6000828152600b6020908152604080832084845290915290206002015442116127cc5760405162461bcd60e51b815260206004820152602960248201527f63616e206e6f7420776974686472617720647572696e67207375626d6974207060448201527f726f74656374696f6e000000000000000000000000000000000000000000000060648201526084016109fd565b33600090815260096020908152604080832054858452600b83528184208585529092529091206003015411156128445760405162461bcd60e51b815260206004820152601260248201527f696e73756666696369656e74207374616b65000000000000000000000000000060448201526064016109fd565b6000828152600b602090815260408083208484529091529020600301544710156128b05760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e636500000000000000000000000060448201526064016109fd565b6000828152600b60209081526040808320848452825280832060048101805460ff191660039081179091550154338452600990925282208054919290916128f8908490613d29565b90915550506000828152600b6020908152604080832084845290915280822060030154905133929183918381818185875af1925050503d806000811461295a576040519150601f19603f3d011682016040523d82523d6000602084013e61295f565b606091505b50509050806129b05760405162461bcd60e51b815260206004820152601460248201527f696e73756666696369656e742062616c616e636500000000000000000000000060448201526064016109fd565b50505050565b6129f46040518060400160405280600d81526020017f4d455449535f4d414e414745520000000000000000000000000000000000000081525061071a565b6001600160a01b0316336001600160a01b031614612aa05760405162461bcd60e51b815260206004820152604b60248201527f4d564d5f43616e6f6e6963616c5472616e73616374696f6e3a2046756e63746960448201527f6f6e2063616e206f6e6c792062652063616c6c656420627920746865204d455460648201527f49535f4d414e414745522e000000000000000000000000000000000000000000608482015260a4016109fd565b6001600160a01b038216612af65760405162461bcd60e51b815260206004820152601560248201527f61646472657373206e6f7420617661696c61626c65000000000000000000000060448201526064016109fd565b60008111612b465760405162461bcd60e51b815260206004820152601560248201527f636861696e4964206e6f7420617661696c61626c65000000000000000000000060448201526064016109fd565b6001600160a01b038216600090815260086020526040902054811415612bae5760405162461bcd60e51b815260206004820152600960248201527f6e6f206368616e6765000000000000000000000000000000000000000000000060448201526064016109fd565b6001600160a01b03909116600090815260086020526040902055565b612c086040518060400160405280600d81526020017f4d455449535f4d414e414745520000000000000000000000000000000000000081525061071a565b6001600160a01b0316336001600160a01b031614612cb45760405162461bcd60e51b815260206004820152604b60248201527f4d564d5f43616e6f6e6963616c5472616e73616374696f6e3a2046756e63746960448201527f6f6e2063616e206f6e6c792062652063616c6c656420627920746865204d455460648201527f49535f4d414e414745522e000000000000000000000000000000000000000000608482015260a4016109fd565b662386f26fc10000811015612d0b5760405162461bcd60e51b815260206004820152601a60248201527f7374616b6520636f73742073686f756c6420677465203165313600000000000060448201526064016109fd565b600355565b600060015411612d625760405162461bcd60e51b815260206004820152601960248201527f736c6963652073697a65206e6f7420636f6e666967207965740000000000000060448201526064016109fd565b6000835111612db35760405162461bcd60e51b815260206004820152600a60248201527f656d70747920646174610000000000000000000000000000000000000000000060448201526064016109fd565b6000868152600a60209081526040808320888452909152902060010154612e1c5760405162461bcd60e51b815260206004820152601c60248201527f626174636820656c656d656e7420646f6573206e6f742065786973740000000060448201526064016109fd565b6000868152600a6020908152604080832088845290915290205465010000000000900462ffffff16612eb65760405162461bcd60e51b815260206004820152603060248201527f626174636820746f74616c20656c656d656e7420746f20617070656e6420736860448201527f6f756c64206e6f74206265207a65726f0000000000000000000000000000000060648201526084016109fd565b60015460028451612ec79190613cee565b1115612f155760405162461bcd60e51b815260206004820152601f60248201527f736c6963652073697a65206f66206461746120697320746f6f206c617267650060448201526064016109fd565b6004548410612f665760405162461bcd60e51b815260206004820152601660248201527f736c69636520696e64657820697320677265617465720000000000000000000060448201526064016109fd565b6000868152600c60209081526040808320888452909152902060020154841115612fd25760405162461bcd60e51b815260206004820152601560248201527f696e636f727265637420736c69636520696e646578000000000000000000000060448201526064016109fd565b6000868152600c60209081526040808320888452909152902060010154156132ca576000868152600c602090815260408083208884529091529020546001600160a01b031633146131c6576000868152600c6020908152604080832088845290915290206001015442906130499061070890613ea6565b116130965760405162461bcd60e51b815260206004820152600d60248201527f696e207375626d697474696e670000000000000000000000000000000000000060448201526064016109fd565b831561310a5760405162461bcd60e51b815260206004820152602260248201527f736c69636520696e6465782073686f756c642073746172742066726f6d207a6560448201527f726f00000000000000000000000000000000000000000000000000000000000060648201526084016109fd565b6000868152600c6020908152604080832088845280835281842080547fffffffffffffffffffffffff00000000000000000000000000000000000000001633178155426001808301919091558351808601909452888452948a9052925261317692600290920191613776565b506000868152600c60209081526040808320888452909152902060030180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101008415150217905561341a565b6000868152600c6020908152604080832088845290915290206002015484101561323e576000868152600c60209081526040808320888452909152902060020180548491908690811061321b5761321b613da2565b9060005260206000200190805190602001906132389291906137d3565b5061327b565b6000868152600c602090815260408083208884528252822060020180546001810182559083529181902085516131769391909101918601906137d3565b6000868152600c60209081526040808320888452909152902060030180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101008415150217905561341a565b604080516001808252818301909252600091816020015b60608152602001906001900390816132e1579050509050838160008151811061330c5761330c613da2565b6020908102919091018101919091526040805160a0810182523381524281840190815281830185815260006060840181905288151560808501528c8152600c86528481208c8252865293909320825181547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909116178155905160018201559151805191936133ac92600285019290910190613853565b506060820151600390910180546080909301511515610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff921515929092167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090931692909217179055505b8180156134245750805b1561370857604080518082018252600181527f5f000000000000000000000000000000000000000000000000000000000000006020808301919091526000898152600a8252838120898252909152918220549091906134899064ffffffffff166107ba565b6000898152600a602090815260408083208b8452909152812054919250906134be9065010000000000900462ffffff166107ba565b60008a8152600a602090815260408083208c8452909152812060010154919250906134e8906107ba565b60008b8152600c602090815260408083208d84528252808320600201805482518185028101850190935280835294955092936135d1939192859084015b828210156114b057838290600052602060002001805461354490613e00565b80601f016020809104026020016040519081016040528092919081815260200182805461357090613e00565b80156135bd5780601f10613592576101008083540402835291602001916135bd565b820191906000526020600020905b8154815290600101906020018083116135a057829003601f168201915b505050505081526020019060010190613525565b90506000600285878689878b886040516020016135f49796959493929190613ee7565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529082905261362c91613f79565b602060405180830381855afa158015613649573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061366c9190613ebe565b60008d8152600a602090815260408083208f845290915290206002015490915081146136da5760405162461bcd60e51b815260206004820152601560248201527f7478206461746120766572696679206661696c6564000000000000000000000060448201526064016109fd565b5050506000898152600c602090815260408083208b84529091529020600301805460ff191660011790555050505b505050505050565b60608060005b835181101561376f578184828151811061373257613732613da2565b602002602001015160405160200161374b929190613f95565b6040516020818303038152906040529150808061376790613cb5565b915050613716565b5092915050565b8280548282559060005260206000209081019282156137c3579160200282015b828111156137c357825180516137b39184916020909101906137d3565b5091602001919060010190613796565b506137cf9291506138a0565b5090565b8280546137df90613e00565b90600052602060002090601f0160209004810192826138015760008555613847565b82601f1061381a57805160ff1916838001178555613847565b82800160010185558215613847579182015b8281111561384757825182559160200191906001019061382c565b506137cf9291506138bd565b8280548282559060005260206000209081019282156137c3579160200282015b828111156137c357825180516138909184916020909101906137d3565b5091602001919060010190613873565b808211156137cf5760006138b482826138d2565b506001016138a0565b5b808211156137cf57600081556001016138be565b5080546138de90613e00565b6000825580601f106138ee575050565b601f01602090049060005260206000209081019061390c91906138bd565b50565b60005b8381101561392a578181015183820152602001613912565b838111156129b05750506000910152565b6000825161394d81846020870161390f565b7f5f4d564d5f53657175656e6365725f5772617070657200000000000000000000920191825250601601919050565b60006020828403121561398e57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126139d557600080fd5b813567ffffffffffffffff808211156139f0576139f0613995565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715613a3657613a36613995565b81604052838152866020858801011115613a4f57600080fd5b836020870160208301376000602085830101528094505050505092915050565b80358015158114613a7f57600080fd5b919050565b600080600080600060a08688031215613a9c57600080fd5b853594506020860135935060408601359250606086013567ffffffffffffffff811115613ac857600080fd5b613ad4888289016139c4565b925050613ae360808701613a6f565b90509295509295909350565b600060208284031215613b0157600080fd5b813567ffffffffffffffff811115613b1857600080fd5b613b24848285016139c4565b949350505050565b60008151808452613b4481602086016020860161390f565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000613b896020830184613b2c565b9392505050565b6001600160a01b038116811461390c57600080fd5b600060208284031215613bb757600080fd5b8135613b8981613b90565b60008060408385031215613bd557600080fd5b50508035926020909101359150565b604081526000613bf76040830185613b2c565b905082151560208301529392505050565b60008060408385031215613c1b57600080fd5b8235613c2681613b90565b9150613c3460208401613a6f565b90509250929050565b60008060408385031215613c5057600080fd5b8235613c5b81613b90565b946020939093013593505050565b600060208284031215613c7b57600080fd5b8151613b8981613b90565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613ce757613ce7613c86565b5060010190565b600082613d24577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082821015613d3b57613d3b613c86565b500390565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613d7857613d78613c86565b500290565b600060ff821660ff84168060ff03821115613d9a57613d9a613c86565b019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600181811c90821680613e1457607f821691505b60208210811415613e4e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b600062ffffff80831681851681830481118215151615613e7657613e76613c86565b02949350505050565b600062ffffff808316818516808303821115613e9d57613e9d613c86565b01949350505050565b60008219821115613eb957613eb9613c86565b500190565b600060208284031215613ed057600080fd5b5051919050565b8183823760009101908152919050565b600088516020613efa8285838e0161390f565b895191840191613f0d8184848e0161390f565b8951920191613f1f8184848d0161390f565b8851920191613f318184848c0161390f565b8751920191613f438184848b0161390f565b8651920191613f558184848a0161390f565b8551920191613f67818484890161390f565b919091019a9950505050505050505050565b60008251613f8b81846020870161390f565b9190910192915050565b60008351613fa781846020880161390f565b835190830190613e9d81836020880161390f56fea264697066735822122069edc1dafd68972e418b22501ef8a0e80dca273fc6ca4aeb6ba8d79ed39f29a964736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "appendSequencerBatchByChainId()": {
        "details": "This function uses a custom encoding scheme for efficiency reasons."
      },
      "getBatchTxData(uint256,uint256)": {
        "params": {
          "_batchIndex": "batch index of CTC.",
          "_chainId": "chain id."
        },
        "returns": {
          "txData": "txData",
          "verified": "verified"
        }
      },
      "getStakeSeqSeconds()": {
        "returns": {
          "_0": "Seconds the Sequencer can sumbit transaction data after verifier staking."
        }
      },
      "resolve(string)": {
        "params": {
          "_name": "Name to resolve an address for."
        },
        "returns": {
          "_0": "Address associated with the given name."
        }
      },
      "setAddressChainId(address,uint256)": {
        "params": {
          "_address": "contract address.",
          "_chainId": "chain id."
        }
      },
      "setBatchTxData(uint256,uint256,uint256,string,bool)": {
        "params": {
          "_batchIndex": "batch index of CTC.",
          "_chainId": "chain id.",
          "_data": "tx data hex.",
          "_end": "sliceIndex is the end or not.",
          "_sliceIndex": "slice index."
        }
      },
      "setBatchTxDataForStake(uint256,uint256,uint256,string,bool)": {
        "params": {
          "_batchIndex": "batch index of CTC.",
          "_chainId": "chain id.",
          "_data": "tx data hex.",
          "_end": "sliceIndex is the end or not.",
          "_sliceIndex": "slice index."
        }
      },
      "setBatchTxDataForVerifier(uint256,uint256,uint256,string,bool)": {
        "params": {
          "_batchIndex": "batch index of CTC.",
          "_chainId": "chain id.",
          "_data": "tx data hex.",
          "_end": "sliceIndex is the end or not.",
          "_sliceIndex": "slice index."
        }
      },
      "setStakeCost(uint256)": {
        "params": {
          "_stakeCost": "Stake cost for verifier."
        }
      },
      "setStakeSeqSeconds(uint256)": {
        "params": {
          "_seconds": "Seconds the Sequencer can sumbit transaction data after verifier staking."
        }
      },
      "setTxBatchSize(uint256)": {
        "params": {
          "_size": "Batch size of batch."
        }
      },
      "setTxDataSliceCount(uint256)": {
        "params": {
          "_count": "Slice count per batch transaction data."
        }
      },
      "setTxDataSliceSize(uint256)": {
        "params": {
          "_size": "Slice size of batch transaction data."
        }
      },
      "verifierStake(uint256,uint256)": {
        "params": {
          "_batchIndex": "batch index of CTC.",
          "_chainId": "chain id."
        }
      },
      "withdrawStake(uint256,uint256)": {
        "params": {
          "_batchIndex": "batch index of CTC.",
          "_chainId": "chain id."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "appendSequencerBatchByChainId()": {
        "notice": "Allows the sequencer to append a batch of transactions."
      },
      "getAddressChainId(address)": {
        "notice": "Gets address's chain id."
      },
      "getBatchTxData(uint256,uint256)": {
        "notice": "Gets batch tx data."
      },
      "getStakeCost()": {
        "notice": "Gets the verifier stake cost of ETH."
      },
      "getStakeSeqSeconds()": {
        "notice": "Gets seconds can submit transaction data after staking."
      },
      "getTxBatchSize()": {
        "notice": "Gets batch size per batch."
      },
      "getTxDataSliceCount()": {
        "notice": "Gets slice count per batch transaction data."
      },
      "getTxDataSliceSize()": {
        "notice": "Gets batch transaction data slice size per submit."
      },
      "resolve(string)": {
        "notice": "Resolves the address associated with a given name."
      },
      "setAddressChainId(address,uint256)": {
        "notice": "Sets address's chain id."
      },
      "setBatchTxData(uint256,uint256,uint256,string,bool)": {
        "notice": "Sets batch tx data."
      },
      "setBatchTxDataForStake(uint256,uint256,uint256,string,bool)": {
        "notice": "Sets batch tx data for stake."
      },
      "setBatchTxDataForVerifier(uint256,uint256,uint256,string,bool)": {
        "notice": "Sets batch tx data for verifier."
      },
      "setStakeCost(uint256)": {
        "notice": "Sets the verifier stake cost of ETH."
      },
      "setStakeSeqSeconds(uint256)": {
        "notice": "Sets seconds can submit transaction data after staking."
      },
      "setTxBatchSize(uint256)": {
        "notice": "Sets batch size per batch."
      },
      "setTxDataSliceCount(uint256)": {
        "notice": "Sets slice count per batch transaction data."
      },
      "setTxDataSliceSize(uint256)": {
        "notice": "Sets batch transaction data slice size per submit."
      },
      "verifierStake(uint256,uint256)": {
        "notice": "Stake by verifier."
      },
      "withdrawStake(uint256,uint256)": {
        "notice": "Withdraw stake by verifier."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16130,
        "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
        "label": "libAddressManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Lib_AddressManager)16122"
      },
      {
        "astId": 10748,
        "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
        "label": "txDataSliceSize",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 10750,
        "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
        "label": "stakeSeqSeconds",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 10752,
        "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
        "label": "stakeCost",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 10754,
        "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
        "label": "txDataSliceCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 10756,
        "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
        "label": "txBatchSize",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 10758,
        "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
        "label": "useWhiteList",
        "offset": 0,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 10762,
        "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
        "label": "whitelist",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 10766,
        "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
        "label": "addressChains",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10770,
        "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
        "label": "verifierStakes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 10777,
        "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
        "label": "queueBatchElement",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(BatchElement)15275_storage))"
      },
      {
        "astId": 10784,
        "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
        "label": "queueTxDataRequestStake",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TxDataRequestStake)15266_storage))"
      },
      {
        "astId": 10791,
        "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
        "label": "queueTxData",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TxDataSlice)15254_storage))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(Lib_AddressManager)16122": {
        "encoding": "inplace",
        "label": "contract Lib_AddressManager",
        "numberOfBytes": "20"
      },
      "t_enum(STAKESTATUS)15204": {
        "encoding": "inplace",
        "label": "enum iMVM_CanonicalTransaction.STAKESTATUS",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(BatchElement)15275_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct iMVM_CanonicalTransaction.BatchElement))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(BatchElement)15275_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TxDataRequestStake)15266_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct iMVM_CanonicalTransaction.TxDataRequestStake))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(TxDataRequestStake)15266_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(TxDataSlice)15254_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct iMVM_CanonicalTransaction.TxDataSlice))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(TxDataSlice)15254_storage)"
      },
      "t_mapping(t_uint256,t_struct(BatchElement)15275_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct iMVM_CanonicalTransaction.BatchElement)",
        "numberOfBytes": "32",
        "value": "t_struct(BatchElement)15275_storage"
      },
      "t_mapping(t_uint256,t_struct(TxDataRequestStake)15266_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct iMVM_CanonicalTransaction.TxDataRequestStake)",
        "numberOfBytes": "32",
        "value": "t_struct(TxDataRequestStake)15266_storage"
      },
      "t_mapping(t_uint256,t_struct(TxDataSlice)15254_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct iMVM_CanonicalTransaction.TxDataSlice)",
        "numberOfBytes": "32",
        "value": "t_struct(TxDataSlice)15254_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BatchElement)15275_storage": {
        "encoding": "inplace",
        "label": "struct iMVM_CanonicalTransaction.BatchElement",
        "members": [
          {
            "astId": 15268,
            "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
            "label": "shouldStartAtElement",
            "offset": 0,
            "slot": "0",
            "type": "t_uint40"
          },
          {
            "astId": 15270,
            "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
            "label": "totalElementsToAppend",
            "offset": 5,
            "slot": "0",
            "type": "t_uint24"
          },
          {
            "astId": 15272,
            "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
            "label": "txBatchTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15274,
            "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
            "label": "txBatchHash",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TxDataRequestStake)15266_storage": {
        "encoding": "inplace",
        "label": "struct iMVM_CanonicalTransaction.TxDataRequestStake",
        "members": [
          {
            "astId": 15256,
            "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
            "label": "sender",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 15258,
            "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15260,
            "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
            "label": "endtime",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15262,
            "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
            "label": "amount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15265,
            "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
            "label": "status",
            "offset": 0,
            "slot": "4",
            "type": "t_enum(STAKESTATUS)15204"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(TxDataSlice)15254_storage": {
        "encoding": "inplace",
        "label": "struct iMVM_CanonicalTransaction.TxDataSlice",
        "members": [
          {
            "astId": 15244,
            "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
            "label": "sender",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 15246,
            "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15249,
            "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
            "label": "txDataSlices",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_string_storage)dyn_storage"
          },
          {
            "astId": 15251,
            "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
            "label": "verified",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 15253,
            "contract": "contracts/MVM/MVM_CanonicalTransaction.sol:MVM_CanonicalTransaction",
            "label": "end",
            "offset": 1,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}