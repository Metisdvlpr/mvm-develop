{
  "address": "0xA9b8E3a95e0E22352747Ab5395Ec535Cd113016a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_metis",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "batchIndex",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "batchRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "batchSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "prevTotalElements",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "indexed": false,
          "internalType": "struct Lib_OVMCodec.ChainBatchHeader",
          "name": "header",
          "type": "tuple"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "NewChallenge",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CONFIG_OWNER_KEY",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "activeChallenges",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "chain_under_challenge",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "challenges",
      "outputs": [
        {
          "internalType": "address",
          "name": "challenger",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "batchIndex",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "batchRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "batchSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "prevTotalElements",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Lib_OVMCodec.ChainBatchHeader",
          "name": "header",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numQualifiedVerifiers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numVerify1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numVerify2",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "consensus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "key",
          "type": "bytes"
        }
      ],
      "name": "encrypt",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "isSufficientlyStaked",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "libAddressManager",
      "outputs": [
        {
          "internalType": "contract Lib_AddressManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "metis",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainID",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "batchIndex",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "batchRoot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "batchSize",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "prevTotalElements",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "extraData",
              "type": "bytes"
            }
          ],
          "internalType": "struct Lib_OVMCodec.ChainBatchHeader",
          "name": "header",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "proposedHash",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "keyhash",
          "type": "bytes"
        }
      ],
      "name": "newChallenge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numQualifiedVerifiers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "penalties",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        }
      ],
      "name": "resolve",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minStake",
          "type": "uint256"
        }
      ],
      "name": "setMinStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "window",
          "type": "uint256"
        }
      ],
      "name": "setVerifyWindow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "verifier",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "setWhiteList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "stake",
          "type": "uint256"
        }
      ],
      "name": "verifierStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "verifier_stakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "verifiers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "hash",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "keyhash",
          "type": "bytes"
        }
      ],
      "name": "verify1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "key",
          "type": "bytes"
        }
      ],
      "name": "verify2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifyWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd1b1869d088bbb0894850f35bfa7cd538f521919cc516eeb1e8c915c16b5717c",
  "receipt": {
    "to": null,
    "from": "0x67bE001A254B81Dc44EaB9F5a7C66889a5c009AE",
    "contractAddress": "0xBde12E56D6d029Bed3e61d6E3b0CCb3311c0bCFb",
    "transactionIndex": 43,
    "gasUsed": "2937541",
    "logsBloom": "0x
    "blockHash": "0x5801f0d390593791d1bbc3e78ae5602bbc9f0326879794db918782a63589c417",
    "transactionHash": "0xd1b1869d088bbb0894850f35bfa7cd538f521919cc516eeb1e8c915c16b5717c",
    "logs": [],
    "blockNumber": 9643568,
    "cumulativeGasUsed": "10951440",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3870c347e84dE40F8bD8b5FB8CbCC423Ed38CE12",
    "0xe552Fb52a4F19e44ef5A967632DBc320B0820639"
  ],
  "solcInputHash": "a45fd09b0c3f6ec19daab95bc864a518",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_metis\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"batchIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevTotalElements\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct Lib_OVMCodec.ChainBatchHeader\",\"name\":\"header\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"NewChallenge\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONFIG_OWNER_KEY\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"activeChallenges\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chain_under_challenge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"challenges\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"challenger\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"batchIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevTotalElements\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct Lib_OVMCodec.ChainBatchHeader\",\"name\":\"header\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numQualifiedVerifiers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numVerify1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numVerify2\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"consensus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"encrypt\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isSufficientlyStaked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"libAddressManager\",\"outputs\":[{\"internalType\":\"contract Lib_AddressManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metis\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"batchIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"batchRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"batchSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"prevTotalElements\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"extraData\",\"type\":\"bytes\"}],\"internalType\":\"struct Lib_OVMCodec.ChainBatchHeader\",\"name\":\"header\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"proposedHash\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"keyhash\",\"type\":\"bytes\"}],\"name\":\"newChallenge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numQualifiedVerifiers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"penalties\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"resolve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minStake\",\"type\":\"uint256\"}],\"name\":\"setMinStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"setVerifyWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"verifier\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"setWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stake\",\"type\":\"uint256\"}],\"name\":\"verifierStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"verifier_stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"verifiers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"hash\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"keyhash\",\"type\":\"bytes\"}],\"name\":\"verify1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"verify2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifyWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"resolve(string)\":{\"params\":{\"_name\":\"Name to resolve an address for.\"},\"returns\":{\"_0\":\"Address associated with the given name.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"resolve(string)\":{\"notice\":\"Resolves the address associated with a given name.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MVM/MVM_Verifier.sol\":\"MVM_Verifier\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/L1/rollup/IChainStorageContainer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\n/**\\n * @title IChainStorageContainer\\n */\\ninterface IChainStorageContainer {\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Sets the container's global metadata field. We're using `bytes27` here because we use five\\n     * bytes to maintain the length of the underlying data structure, meaning we have an extra\\n     * 27 bytes to store arbitrary data.\\n     * @param _globalMetadata New global metadata to set.\\n     */\\n    function setGlobalMetadata(bytes27 _globalMetadata) external;\\n\\n    /**\\n     * Retrieves the container's global metadata field.\\n     * @return Container global metadata field.\\n     */\\n    function getGlobalMetadata() external view returns (bytes27);\\n\\n    /**\\n     * Retrieves the number of objects stored in the container.\\n     * @return Number of objects in the container.\\n     */\\n    function length() external view returns (uint256);\\n\\n    /**\\n     * Pushes an object into the container.\\n     * @param _object A 32 byte value to insert into the container.\\n     */\\n    function push(bytes32 _object) external;\\n\\n    /**\\n     * Pushes an object into the container. Function allows setting the global metadata since\\n     * we'll need to touch the \\\"length\\\" storage slot anyway, which also contains the global\\n     * metadata (it's an optimization).\\n     * @param _object A 32 byte value to insert into the container.\\n     * @param _globalMetadata New global metadata for the container.\\n     */\\n    function push(bytes32 _object, bytes27 _globalMetadata) external;\\n\\n    /**\\n     * Set an object into the container. Function allows setting the global metadata since\\n     * we'll need to touch the \\\"length\\\" storage slot anyway, which also contains the global\\n     * metadata (it's an optimization).\\n     * @param _index position.\\n     * @param _object A 32 byte value to insert into the container.\\n     */  \\n    function setByChainId(\\n        uint256 _chainId,\\n        uint256 _index,\\n        bytes32 _object\\n    )\\n        external;\\n        \\n    /**\\n     * Retrieves an object from the container.\\n     * @param _index Index of the particular object to access.\\n     * @return 32 byte object value.\\n     */\\n    function get(uint256 _index) external view returns (bytes32);\\n\\n    /**\\n     * Removes all objects after and including a given index.\\n     * @param _index Object index to delete from.\\n     */\\n    function deleteElementsAfterInclusive(uint256 _index) external;\\n\\n    /**\\n     * Removes all objects after and including a given index. Also allows setting the global\\n     * metadata field.\\n     * @param _index Object index to delete from.\\n     * @param _globalMetadata New global metadata for the container.\\n     */\\n    function deleteElementsAfterInclusive(uint256 _index, bytes27 _globalMetadata) external;\\n\\n    /**\\n     * Sets the container's global metadata field. We're using `bytes27` here because we use five\\n     * bytes to maintain the length of the underlying data structure, meaning we have an extra\\n     * 27 bytes to store arbitrary data.\\n     * @param _chainId identity for the l2 chain.\\n     * @param _globalMetadata New global metadata to set.\\n     */\\n    function setGlobalMetadataByChainId(\\n        uint256 _chainId,\\n        bytes27 _globalMetadata\\n    )\\n        external;\\n\\n    /**\\n     * Retrieves the container's global metadata field.\\n     * @param _chainId identity for the l2 chain.\\n     * @return Container global metadata field.\\n     */\\n    function getGlobalMetadataByChainId(\\n        uint256 _chainId\\n        )\\n        external\\n        view\\n        returns (\\n            bytes27\\n        );\\n\\n    /**\\n     * Retrieves the number of objects stored in the container.\\n     * @param _chainId identity for the l2 chain.\\n     * @return Number of objects in the container.\\n     */\\n    function lengthByChainId(\\n        uint256 _chainId\\n        )\\n        external\\n        view\\n        returns (\\n            uint256\\n        );\\n\\n    /**\\n     * Pushes an object into the container.\\n     * @param _chainId identity for the l2 chain.\\n     * @param _object A 32 byte value to insert into the container.\\n     */\\n    function pushByChainId(\\n        uint256 _chainId,\\n        bytes32 _object\\n    )\\n        external;\\n\\n    /**\\n     * Pushes an object into the container. Function allows setting the global metadata since\\n     * we'll need to touch the \\\"length\\\" storage slot anyway, which also contains the global\\n     * metadata (it's an optimization).\\n     * @param _chainId identity for the l2 chain.\\n     * @param _object A 32 byte value to insert into the container.\\n     * @param _globalMetadata New global metadata for the container.\\n     */\\n    function pushByChainId(\\n        uint256 _chainId,\\n        bytes32 _object,\\n        bytes27 _globalMetadata\\n    )\\n        external;\\n\\n    /**\\n     * Retrieves an object from the container.\\n     * @param _chainId identity for the l2 chain.\\n     * @param _index Index of the particular object to access.\\n     * @return 32 byte object value.\\n     */\\n    function getByChainId(\\n        uint256 _chainId,\\n        uint256 _index\\n    )\\n        external\\n        view\\n        returns (\\n            bytes32\\n        );\\n\\n    /**\\n     * Removes all objects after and including a given index.\\n     * @param _chainId identity for the l2 chain.\\n     * @param _index Object index to delete from.\\n     */\\n    function deleteElementsAfterInclusiveByChainId(\\n        uint256 _chainId,\\n        uint256 _index\\n    )\\n        external;\\n        \\n    /**\\n     * Removes all objects after and including a given index. Also allows setting the global\\n     * metadata field.\\n     * @param _chainId identity for the l2 chain.\\n     * @param _index Object index to delete from.\\n     * @param _globalMetadata New global metadata for the container.\\n     */\\n    function deleteElementsAfterInclusiveByChainId(\\n        uint256 _chainId,\\n        uint256 _index,\\n        bytes27 _globalMetadata\\n    )\\n        external;\\n        \\n}\\n\",\"keccak256\":\"0x51ac539391aa0073ef1b710697471b6c0298d8599d36bf7bb3208ddc7f5cef67\",\"license\":\"MIT\"},\"contracts/L1/rollup/IStateCommitmentChain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >0.5.0 <0.9.0;\\n\\n/* Library Imports */\\nimport { Lib_OVMCodec } from \\\"../../libraries/codec/Lib_OVMCodec.sol\\\";\\nimport { IChainStorageContainer } from \\\"./IChainStorageContainer.sol\\\";\\n\\n/**\\n * @title IStateCommitmentChain\\n */\\ninterface IStateCommitmentChain {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event StateBatchAppended(\\n        uint256 _chainId,\\n        uint256 indexed _batchIndex,\\n        bytes32 _batchRoot,\\n        uint256 _batchSize,\\n        uint256 _prevTotalElements,\\n        bytes _extraData\\n    );\\n\\n    event StateBatchDeleted(\\n        uint256 _chainId,\\n        uint256 indexed _batchIndex,\\n        bytes32 _batchRoot\\n    );\\n\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n    \\n    function batches() external view returns (IChainStorageContainer);\\n    \\n    /**\\n     * Retrieves the total number of elements submitted.\\n     * @return _totalElements Total submitted elements.\\n     */\\n    function getTotalElements() external view returns (uint256 _totalElements);\\n\\n    /**\\n     * Retrieves the total number of batches submitted.\\n     * @return _totalBatches Total submitted batches.\\n     */\\n    function getTotalBatches() external view returns (uint256 _totalBatches);\\n\\n    /**\\n     * Retrieves the timestamp of the last batch submitted by the sequencer.\\n     * @return _lastSequencerTimestamp Last sequencer batch timestamp.\\n     */\\n    function getLastSequencerTimestamp() external view returns (uint256 _lastSequencerTimestamp);\\n\\n    /**\\n     * Appends a batch of state roots to the chain.\\n     * @param _batch Batch of state roots.\\n     * @param _shouldStartAtElement Index of the element at which this batch should start.\\n     */\\n    function appendStateBatch(bytes32[] calldata _batch, uint256 _shouldStartAtElement) external;\\n\\n    /**\\n     * Deletes all state roots after (and including) a given batch.\\n     * @param _batchHeader Header of the batch to start deleting from.\\n     */\\n    function deleteStateBatch(Lib_OVMCodec.ChainBatchHeader memory _batchHeader) external;\\n\\n    /**\\n     * Verifies a batch inclusion proof.\\n     * @param _element Hash of the element to verify a proof for.\\n     * @param _batchHeader Header of the batch in which the element was included.\\n     * @param _proof Merkle inclusion proof for the element.\\n     */\\n    function verifyStateCommitment(\\n        bytes32 _element,\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader,\\n        Lib_OVMCodec.ChainInclusionProof memory _proof\\n    ) external view returns (bool _verified);\\n\\n    /**\\n     * Checks whether a given batch is still inside its fraud proof window.\\n     * @param _batchHeader Header of the batch to check.\\n     * @return _inside Whether or not the batch is inside the fraud proof window.\\n     */\\n    function insideFraudProofWindow(Lib_OVMCodec.ChainBatchHeader memory _batchHeader)\\n        external\\n        view\\n        returns (\\n            bool _inside\\n        );\\n        \\n        \\n        \\n     /********************\\n     * chain id added func *\\n     ********************/\\n\\n    /**\\n     * Retrieves the total number of elements submitted.\\n     * @param _chainId identity for the l2 chain.\\n     * @return _totalElements Total submitted elements.\\n     */\\n    function getTotalElementsByChainId(uint256 _chainId)\\n        external\\n        view\\n        returns (\\n            uint256 _totalElements\\n        );\\n\\n    /**\\n     * Retrieves the total number of batches submitted.\\n     * @param _chainId identity for the l2 chain.\\n     * @return _totalBatches Total submitted batches.\\n     */\\n    function getTotalBatchesByChainId(uint256 _chainId)\\n        external\\n        view\\n        returns (\\n            uint256 _totalBatches\\n        );\\n\\n    /**\\n     * Retrieves the timestamp of the last batch submitted by the sequencer.\\n     * @param _chainId identity for the l2 chain.\\n     * @return _lastSequencerTimestamp Last sequencer batch timestamp.\\n     */\\n    function getLastSequencerTimestampByChainId(uint256 _chainId)\\n        external\\n        view\\n        returns (\\n            uint256 _lastSequencerTimestamp\\n        );\\n        \\n    /**\\n     * Appends a batch of state roots to the chain.\\n     * @param _chainId identity for the l2 chain.\\n     * @param _batch Batch of state roots.\\n     * @param _shouldStartAtElement Index of the element at which this batch should start.\\n     */\\n    function appendStateBatchByChainId(\\n        uint256 _chainId,\\n        bytes32[] calldata _batch,\\n        uint256 _shouldStartAtElement,\\n        string calldata proposer\\n    )\\n        external;\\n\\n    /**\\n     * Deletes all state roots after (and including) a given batch.\\n     * @param _chainId identity for the l2 chain.\\n     * @param _batchHeader Header of the batch to start deleting from.\\n     */\\n    function deleteStateBatchByChainId(\\n        uint256 _chainId,\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader\\n    )\\n        external;\\n\\n    /**\\n     * Verifies a batch inclusion proof.\\n     * @param _chainId identity for the l2 chain.\\n     * @param _element Hash of the element to verify a proof for.\\n     * @param _batchHeader Header of the batch in which the element was included.\\n     * @param _proof Merkle inclusion proof for the element.\\n     */\\n    function verifyStateCommitmentByChainId(\\n        uint256 _chainId,\\n        bytes32 _element,\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader,\\n        Lib_OVMCodec.ChainInclusionProof memory _proof\\n    )\\n        external\\n        view\\n        returns (\\n            bool _verified\\n        );\\n\\n    /**\\n     * Checks whether a given batch is still inside its fraud proof window.\\n     * @param _chainId identity for the l2 chain.\\n     * @param _batchHeader Header of the batch to check.\\n     * @return _inside Whether or not the batch is inside the fraud proof window.\\n     */\\n    function insideFraudProofWindowByChainId(\\n        uint256 _chainId,\\n        Lib_OVMCodec.ChainBatchHeader memory _batchHeader\\n    )\\n        external\\n        view\\n        returns (\\n            bool _inside\\n        );\\n}\\n\",\"keccak256\":\"0x9148aec4ba238c96f6a738773726be9ce942dbc5e51d97d6f9555bdeae70ff73\",\"license\":\"MIT\"},\"contracts/MVM/MVM_Verifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n/* Contract Imports */\\n/* External Imports */\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { iMVM_DiscountOracle } from \\\"./iMVM_DiscountOracle.sol\\\";\\nimport { Lib_AddressResolver } from \\\"../libraries/resolver/Lib_AddressResolver.sol\\\";\\nimport { Lib_OVMCodec } from \\\"../libraries/codec/Lib_OVMCodec.sol\\\";\\nimport { IStateCommitmentChain } from \\\"../L1/rollup/IStateCommitmentChain.sol\\\";\\n\\ncontract MVM_Verifier is Lib_AddressResolver{\\n    event NewChallenge(uint256 cIndex, uint256 chainID, Lib_OVMCodec.ChainBatchHeader header, uint256 timestamp);\\n    \\n    /*************\\n     * Constants *\\n     *************/\\n    string constant public CONFIG_OWNER_KEY = \\\"METIS_MANAGER\\\";\\n    \\n    //challenge info\\n    struct Challenge {\\n       address challenger;\\n       uint256 chainID;\\n       uint256 index;\\n       Lib_OVMCodec.ChainBatchHeader header;\\n       uint256 timestamp;\\n       uint256 numQualifiedVerifiers;\\n       uint256 numVerify1;\\n       uint256 numVerify2;\\n    }\\n    \\n    mapping (address => uint256) public verifier_stakes;\\n    mapping (uint256 => mapping (address=>bytes)) private challenge_keys;\\n    mapping (uint256 => mapping (address=>bytes)) private challenge_key_hashes;\\n    mapping (uint256 => mapping (address=>bytes)) private challenge_hashes;\\n    mapping (uint256 => mapping (address => bool)) public consensus;\\n    mapping (uint256 => mapping (address => bool)) public penalties;\\n    mapping (uint256 => address[]) private challenge_verifiers;\\n    mapping (uint256 => bool) public chain_under_challenge;\\n    mapping (address => bool) public whitelist;\\n    \\n    bool useWhiteList;\\n    \\n    address[] public verifiers;\\n    Challenge[] public challenges;\\n    \\n    uint public verifyWindow = 3600 * 24; // 24 hours of window to complete the first verify phase\\n    uint public activeChallenges;\\n\\n    mapping (address => uint256) public rewards;\\n\\n    address public metis;\\n\\n    uint256 public minStake;\\n    bool allowWithdraw;\\n    uint256 public numQualifiedVerifiers;\\n\\n    modifier onlyManager {\\n        require(\\n            msg.sender == resolve(CONFIG_OWNER_KEY),\\n            \\\"MVM_Verifier: Function can only be called by the METIS_MANAGER.\\\"\\n        );\\n        _;\\n    }\\n    \\n    modifier onlyWhitelisted {\\n        require(!useWhiteList || whitelist[msg.sender] == true, \\\"only whitelisted verifiers can call\\\");\\n        _;\\n    }\\n    \\n    modifier onlyStaked {\\n        require(isSufficientlyStaked(msg.sender), \\\"insufficient stake\\\");\\n        _;\\n    }\\n\\n    constructor(\\n      address _addressManager,\\n      address _metis\\n    )\\n      Lib_AddressResolver(_addressManager)\\n    {\\n       minStake = 200 ether;\\n       metis = _metis;\\n       allowWithdraw = true;\\n       useWhiteList = true;\\n    }\\n    \\n    // set the length of the time windows for each verification phase\\n    function setVerifyWindow (uint256 window) onlyManager public {\\n        verifyWindow = window;\\n    }\\n    \\n    // add the verifier to the whitelist\\n    function setWhiteList(address verifier, bool allowed) public onlyManager {\\n        whitelist[verifier] = allowed;\\n        useWhiteList = true;\\n    }\\n    \\n    // allow everyone to be the verifier\\n    function disableWhiteList() public onlyManager {\\n        useWhiteList = false;\\n    }\\n    \\n    // add stake as a verifier\\n    function verifierStake(uint256 stake) public onlyWhitelisted{\\n       require(allowWithdraw, \\\"stake is currently prohibited\\\"); //ongoing challenge\\n       require(stake > 0, \\\"zero stake not allowed\\\");\\n       require(IERC20(metis).transferFrom(msg.sender, address(this), stake), \\\"transfer metis failed\\\");\\n       uint256 previousBalance = verifier_stakes[msg.sender];\\n       if (previousBalance == 0) {\\n          verifier_stakes[msg.sender] = stake;\\n          verifiers.push(msg.sender);\\n          numQualifiedVerifiers++;\\n       } else {\\n          verifier_stakes[msg.sender] += stake;\\n       }\\n       require(isSufficientlyStaked(msg.sender), \\\"insufficient stake to qualify as a verifier\\\");\\n    }\\n    \\n    // start a new challenge\\n    // @param chainID chainid\\n    // @param header chainbatch header\\n    // @param proposedHash encrypted hash of the correct state\\n    // @param keyhash hash of the decryption key\\n    //\\n    // @dev why do we ask for key and keyhash? because we want verifiers compute the state instead\\n    // of just copying from other verifiers.\\n    function newChallenge(uint256 chainID, Lib_OVMCodec.ChainBatchHeader calldata header, bytes calldata proposedHash, bytes calldata keyhash) \\n        public onlyWhitelisted onlyStaked {\\n       \\n       Challenge memory c;\\n       c.chainID = chainID;\\n       c.challenger = msg.sender; \\n       c.timestamp = block.timestamp;\\n       c.header = header;\\n       \\n       challenges.push(c);\\n       uint cIndex = challenges.length;\\n       \\n       // house keeping\\n       challenge_hashes[cIndex][msg.sender] = proposedHash;\\n       challenge_key_hashes[cIndex][msg.sender] = keyhash;\\n       challenges[cIndex].numVerify1++;\\n       \\n       // prevent stake changes\\n       allowWithdraw = false;\\n       activeChallenges++;\\n       \\n       emit NewChallenge(cIndex, chainID, header, block.timestamp);\\n    }\\n\\n    // phase 1 of the verify, provide an encrypted hash and the hash of the decryption key\\n    // @param cIndex index of the challenge\\n    // @param hash encrypted hash of the correct state (for the index referred in the challenge)\\n    // @param keyhash hash of the decryption key\\n    function verify1(uint256 cIndex, bytes calldata hash, bytes calldata keyhash) public onlyWhitelisted onlyStaked{\\n       require(challenge_hashes[cIndex][msg.sender].length == 0, \\\"verify1 already completed for the sender\\\");\\n       challenge_hashes[cIndex][msg.sender] = hash;\\n       challenge_key_hashes[cIndex][msg.sender] = keyhash;\\n       challenges[cIndex].numVerify1++;\\n    }\\n    \\n    // phase 2 of the verify, provide the actual key to decrypt the hash\\n    // @param cIndex index of the challenge\\n    // @param key the decryption key\\n    function verify2(uint256 cIndex, bytes calldata key) public onlyStaked onlyWhitelisted{\\n        require(challenges[cIndex].numVerify1 == verifiers.length \\n               || block.timestamp - challenges[cIndex].timestamp > verifyWindow, \\\"phase 2 not ready\\\");\\n        require(challenge_hashes[cIndex][msg.sender].length > 0, \\\"you didn't participate in phase 1\\\");   \\n        if (challenge_keys[cIndex][msg.sender].length > 0) {\\n            finalize(cIndex);\\n            return;\\n        }\\n       \\n        //verify whether the key matches the keyhash initially provided.\\n        require(sha256(key) == bytes32(challenge_key_hashes[cIndex][msg.sender]), \\\"key and keyhash don't match\\\");\\n       \\n        if (msg.sender == challenges[cIndex].challenger) {\\n            //decode the root in the header too\\n            challenges[cIndex].header.batchRoot = bytes32(decrypt(abi.encodePacked(challenges[cIndex].header.batchRoot), key));\\n        }\\n        challenge_keys[cIndex][msg.sender] = key;\\n        challenge_hashes[cIndex][msg.sender] = decrypt(challenge_hashes[cIndex][msg.sender], key);\\n        challenges[cIndex].numVerify2++;\\n        finalize(cIndex);\\n    }\\n    \\n    function finalize(uint256 cIndex) internal {\\n    \\n        Challenge memory challenge = challenges[cIndex];\\n        \\n        if (challenge.numVerify2 != challenges.length \\n           && block.timestamp - challenge.timestamp < verifyWindow) {\\n           // not ready to finalize. do nothing\\n           return;\\n        }\\n        IStateCommitmentChain stateChain = IStateCommitmentChain(resolve(\\\"StateCommitmentChain\\\"));\\n        bytes32 proposedHash = bytes32(challenge_hashes[cIndex][challenge.challenger]);\\n        \\n        uint numAgrees = 0;\\n        \\n        for (uint256 i = 0; i < verifiers.length; i++) {\\n            if (bytes32(challenge_hashes[cIndex][verifiers[i]]) == proposedHash) {\\n                numAgrees++;\\n                consensus[cIndex][verifiers[i]] = true;\\n            }\\n        }\\n        \\n        if (Lib_OVMCodec.hashBatchHeader(challenge.header) != \\n                stateChain.batches().getByChainId(challenge.chainID, challenge.header.batchIndex)) {\\n           // challenger provided an invalid header, losing all stakes\\n        }\\n            \\n        if (proposedHash != challenge.header.batchRoot) {\\n           if (numAgrees < numQualifiedVerifiers) {\\n               // no consensus, challenge failed\\n           } else {\\n               // delete the batch root and slash the sequencer\\n               stateChain.deleteStateBatchByChainId(challenge.chainID, challenge.header);\\n           }\\n        } else {\\n           //fail right away but penzalize the challenger only\\n        }\\n       \\n        activeChallenges--;\\n        if (activeChallenges == 0) {\\n           allowWithdraw = true;\\n        }\\n    }\\n    \\n    function isSufficientlyStaked (address target) view public returns(bool) {\\n       return (verifier_stakes[target] >= minStake);\\n    }\\n\\n    function claim() public {\\n       require(rewards[msg.sender] > 0, \\\"no reward to claim\\\");\\n       uint256 amount = rewards[msg.sender];\\n       rewards[msg.sender] = 0;\\n\\n       require(IERC20(metis).transfer(msg.sender, amount), \\\"token transfer failed\\\");\\n    }\\n\\n    function withdraw(uint256 amount) public {\\n       require(allowWithdraw, \\\"withdraw is currently prohibited\\\"); //ongoing challenge\\n       \\n       uint256 balance = verifier_stakes[msg.sender];\\n       require(balance >= amount, \\\"insufficient stake to withdraw\\\");\\n       \\n       if (balance - amount < minStake && balance >= minStake) {\\n          numQualifiedVerifiers--;\\n       }\\n       verifier_stakes[msg.sender] -= amount;\\n       \\n       require(IERC20(metis).transfer(msg.sender, amount), \\\"token transfer failed\\\");\\n       \\n    }\\n    \\n    function setMinStake(\\n        uint256 _minStake\\n    )\\n        public\\n        onlyManager\\n    {\\n        minStake = _minStake;\\n        uint num = 0;\\n        for (uint i = 0; i < verifiers.length; ++i) {\\n          if (verifier_stakes[verifiers[i]] >= minStake) {\\n             num++;\\n          }\\n        }\\n        numQualifiedVerifiers = num;\\n    }\\n    \\n    //helper fucntion to encrypt data\\n    function encrypt(bytes calldata data, bytes calldata key) pure public returns (bytes memory) {\\n      bytes memory encryptedData = data;\\n      uint j = 0;\\n      \\n      for (uint i = 0; i < encryptedData.length; i++) {\\n          if (j == key.length) {\\n             j = 0;\\n          } \\n          encryptedData[i] = encryptByte(encryptedData[i], uint8(key[j]));\\n          j++;\\n      }\\n\\n      return encryptedData;\\n    }\\n\\n    function encryptByte(bytes1 b, uint8 k) pure internal returns (bytes1) {\\n      uint16 temp16 = uint16(uint8(b));\\n      temp16 += k;\\n      \\n      if (temp16 > 255) {\\n         temp16 -= 256;\\n      } \\n      return bytes1(uint8(temp16));\\n    }\\n    \\n    // helper fucntion to decrypt the data\\n    function decrypt(bytes memory data, bytes memory key) pure internal returns (bytes memory) {\\n      bytes memory decryptedData = data;\\n      uint j = 0;\\n      \\n      for (uint i = 0; i < decryptedData.length; i++) {\\n          if (j == key.length) {\\n             j = 0;\\n          }\\n          \\n          decryptedData[i] = decryptByte(decryptedData[i], uint8(key[j]));\\n          \\n          j++;\\n      }\\n\\n      return decryptedData;\\n    }\\n\\n    function decryptByte(bytes1 b, uint8 k) pure internal returns (bytes1) {\\n      uint16 temp16 = uint16(uint8(b));\\n      if (temp16 > k) {\\n         temp16 -= k;\\n      } else {\\n         temp16 = 256 - k;\\n      }\\n\\n      return bytes1(uint8(temp16));\\n    }\\n    \\n}\\n\",\"keccak256\":\"0xb8917994510f2afb845f5a9f190550c8e01552b4d0540a70ee5fa6bbaad36c08\",\"license\":\"MIT\"},\"contracts/MVM/iMVM_DiscountOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface iMVM_DiscountOracle{\\n\\n    function setDiscount(\\n        uint256 _discount\\n    ) external;\\n    \\n    function setMinL2Gas(\\n        uint256 _minL2Gas\\n    ) external;\\n    \\n    function setWhitelistedXDomainSender(\\n        address _sender,\\n        bool _isWhitelisted\\n    ) external;\\n    \\n    function isXDomainSenderAllowed(\\n        address _sender\\n    ) view external returns(bool);\\n    \\n    function setAllowAllXDomainSenders(\\n        bool _allowAllXDomainSenders\\n    ) external;\\n    \\n    function getMinL2Gas() view external returns(uint256);\\n    function getDiscount() view external returns(uint256);\\n    function processL2SeqGas(address sender, uint256 _chainId) external payable;\\n}\\n\",\"keccak256\":\"0xa668af0f127c69cc2964dcc5a35e96f4ab1f7716e2b0396db682ac9a361e093c\",\"license\":\"MIT\"},\"contracts/libraries/codec/Lib_OVMCodec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/* Library Imports */\\nimport { Lib_RLPReader } from \\\"../rlp/Lib_RLPReader.sol\\\";\\nimport { Lib_RLPWriter } from \\\"../rlp/Lib_RLPWriter.sol\\\";\\nimport { Lib_BytesUtils } from \\\"../utils/Lib_BytesUtils.sol\\\";\\nimport { Lib_Bytes32Utils } from \\\"../utils/Lib_Bytes32Utils.sol\\\";\\n\\n/**\\n * @title Lib_OVMCodec\\n */\\nlibrary Lib_OVMCodec {\\n    /*********\\n     * Enums *\\n     *********/\\n\\n    enum QueueOrigin {\\n        SEQUENCER_QUEUE,\\n        L1TOL2_QUEUE\\n    }\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct EVMAccount {\\n        uint256 nonce;\\n        uint256 balance;\\n        bytes32 storageRoot;\\n        bytes32 codeHash;\\n    }\\n\\n    struct ChainBatchHeader {\\n        uint256 batchIndex;\\n        bytes32 batchRoot;\\n        uint256 batchSize;\\n        uint256 prevTotalElements;\\n        bytes extraData;\\n    }\\n\\n    struct ChainInclusionProof {\\n        uint256 index;\\n        bytes32[] siblings;\\n    }\\n\\n    struct Transaction {\\n        uint256 timestamp;\\n        uint256 blockNumber;\\n        QueueOrigin l1QueueOrigin;\\n        address l1TxOrigin;\\n        address entrypoint;\\n        uint256 gasLimit;\\n        bytes data;\\n    }\\n\\n    struct TransactionChainElement {\\n        bool isSequenced;\\n        uint256 queueIndex; // QUEUED TX ONLY\\n        uint256 timestamp; // SEQUENCER TX ONLY\\n        uint256 blockNumber; // SEQUENCER TX ONLY\\n        bytes txData; // SEQUENCER TX ONLY\\n    }\\n\\n    struct QueueElement {\\n        bytes32 transactionHash;\\n        uint40 timestamp;\\n        uint40 blockNumber;\\n    }\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Encodes a standard OVM transaction.\\n     * @param _transaction OVM transaction to encode.\\n     * @return Encoded transaction bytes.\\n     */\\n    function encodeTransaction(Transaction memory _transaction)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        return\\n            abi.encodePacked(\\n                _transaction.timestamp,\\n                _transaction.blockNumber,\\n                _transaction.l1QueueOrigin,\\n                _transaction.l1TxOrigin,\\n                _transaction.entrypoint,\\n                _transaction.gasLimit,\\n                _transaction.data\\n            );\\n    }\\n\\n    /**\\n     * Hashes a standard OVM transaction.\\n     * @param _transaction OVM transaction to encode.\\n     * @return Hashed transaction\\n     */\\n    function hashTransaction(Transaction memory _transaction) internal pure returns (bytes32) {\\n        return keccak256(encodeTransaction(_transaction));\\n    }\\n\\n    /**\\n     * @notice Decodes an RLP-encoded account state into a useful struct.\\n     * @param _encoded RLP-encoded account state.\\n     * @return Account state struct.\\n     */\\n    function decodeEVMAccount(bytes memory _encoded) internal pure returns (EVMAccount memory) {\\n        Lib_RLPReader.RLPItem[] memory accountState = Lib_RLPReader.readList(_encoded);\\n\\n        return\\n            EVMAccount({\\n                nonce: Lib_RLPReader.readUint256(accountState[0]),\\n                balance: Lib_RLPReader.readUint256(accountState[1]),\\n                storageRoot: Lib_RLPReader.readBytes32(accountState[2]),\\n                codeHash: Lib_RLPReader.readBytes32(accountState[3])\\n            });\\n    }\\n\\n    /**\\n     * Calculates a hash for a given batch header.\\n     * @param _batchHeader Header to hash.\\n     * @return Hash of the header.\\n     */\\n    function hashBatchHeader(Lib_OVMCodec.ChainBatchHeader memory _batchHeader)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    _batchHeader.batchRoot,\\n                    _batchHeader.batchSize,\\n                    _batchHeader.prevTotalElements,\\n                    _batchHeader.extraData\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xb5009ac1e0617e0b3b2fb917f08f8e8a7ae706034cc3a675258bc3d91978525e\",\"license\":\"MIT\"},\"contracts/libraries/resolver/Lib_AddressManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/* External Imports */\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title Lib_AddressManager\\n */\\ncontract Lib_AddressManager is Ownable {\\n    /**********\\n     * Events *\\n     **********/\\n\\n    event AddressSet(string indexed _name, address _newAddress, address _oldAddress);\\n\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    mapping(bytes32 => address) private addresses;\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Changes the address associated with a particular name.\\n     * @param _name String name to associate an address with.\\n     * @param _address Address to associate with the name.\\n     */\\n    function setAddress(string memory _name, address _address) external onlyOwner {\\n        bytes32 nameHash = _getNameHash(_name);\\n        address oldAddress = addresses[nameHash];\\n        addresses[nameHash] = _address;\\n\\n        emit AddressSet(_name, _address, oldAddress);\\n    }\\n\\n    /**\\n     * Retrieves the address associated with a given name.\\n     * @param _name Name to retrieve an address for.\\n     * @return Address associated with the given name.\\n     */\\n    function getAddress(string memory _name) external view returns (address) {\\n        return addresses[_getNameHash(_name)];\\n    }\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Computes the hash of a name.\\n     * @param _name Name to compute a hash for.\\n     * @return Hash of the given name.\\n     */\\n    function _getNameHash(string memory _name) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(_name));\\n    }\\n}\\n\",\"keccak256\":\"0xcde9b29429d512c549f7c1b8a033f161fa71c18cda08b241748663854196ae14\",\"license\":\"MIT\"},\"contracts/libraries/resolver/Lib_AddressResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/* Library Imports */\\nimport { Lib_AddressManager } from \\\"./Lib_AddressManager.sol\\\";\\n\\n/**\\n * @title Lib_AddressResolver\\n */\\nabstract contract Lib_AddressResolver {\\n    /*************\\n     * Variables *\\n     *************/\\n\\n    Lib_AddressManager public libAddressManager;\\n\\n    /***************\\n     * Constructor *\\n     ***************/\\n\\n    /**\\n     * @param _libAddressManager Address of the Lib_AddressManager.\\n     */\\n    constructor(address _libAddressManager) {\\n        libAddressManager = Lib_AddressManager(_libAddressManager);\\n    }\\n\\n    /********************\\n     * Public Functions *\\n     ********************/\\n\\n    /**\\n     * Resolves the address associated with a given name.\\n     * @param _name Name to resolve an address for.\\n     * @return Address associated with the given name.\\n     */\\n    function resolve(string memory _name) public view returns (address) {\\n        return libAddressManager.getAddress(_name);\\n    }\\n}\\n\",\"keccak256\":\"0x515c4db671a28e2fe180201f6d11c0208c05f582ca3489fb6b8e81c27659bc62\",\"license\":\"MIT\"},\"contracts/libraries/rlp/Lib_RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Lib_RLPReader\\n * @dev Adapted from \\\"RLPReader\\\" by Hamdi Allam (hamdi.allam97@gmail.com).\\n */\\nlibrary Lib_RLPReader {\\n    /*************\\n     * Constants *\\n     *************/\\n\\n    uint256 internal constant MAX_LIST_LENGTH = 32;\\n\\n    /*********\\n     * Enums *\\n     *********/\\n\\n    enum RLPItemType {\\n        DATA_ITEM,\\n        LIST_ITEM\\n    }\\n\\n    /***********\\n     * Structs *\\n     ***********/\\n\\n    struct RLPItem {\\n        uint256 length;\\n        uint256 ptr;\\n    }\\n\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Converts bytes to a reference to memory position and length.\\n     * @param _in Input bytes to convert.\\n     * @return Output memory reference.\\n     */\\n    function toRLPItem(bytes memory _in) internal pure returns (RLPItem memory) {\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(_in, 32)\\n        }\\n\\n        return RLPItem({ length: _in.length, ptr: ptr });\\n    }\\n\\n    /**\\n     * Reads an RLP list value into a list of RLP items.\\n     * @param _in RLP list value.\\n     * @return Decoded RLP list items.\\n     */\\n    function readList(RLPItem memory _in) internal pure returns (RLPItem[] memory) {\\n        (uint256 listOffset, , RLPItemType itemType) = _decodeLength(_in);\\n\\n        require(itemType == RLPItemType.LIST_ITEM, \\\"Invalid RLP list value.\\\");\\n\\n        // Solidity in-memory arrays can't be increased in size, but *can* be decreased in size by\\n        // writing to the length. Since we can't know the number of RLP items without looping over\\n        // the entire input, we'd have to loop twice to accurately size this array. It's easier to\\n        // simply set a reasonable maximum list length and decrease the size before we finish.\\n        RLPItem[] memory out = new RLPItem[](MAX_LIST_LENGTH);\\n\\n        uint256 itemCount = 0;\\n        uint256 offset = listOffset;\\n        while (offset < _in.length) {\\n            require(itemCount < MAX_LIST_LENGTH, \\\"Provided RLP list exceeds max list length.\\\");\\n\\n            (uint256 itemOffset, uint256 itemLength, ) = _decodeLength(\\n                RLPItem({ length: _in.length - offset, ptr: _in.ptr + offset })\\n            );\\n\\n            out[itemCount] = RLPItem({ length: itemLength + itemOffset, ptr: _in.ptr + offset });\\n\\n            itemCount += 1;\\n            offset += itemOffset + itemLength;\\n        }\\n\\n        // Decrease the array size to match the actual item count.\\n        assembly {\\n            mstore(out, itemCount)\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Reads an RLP list value into a list of RLP items.\\n     * @param _in RLP list value.\\n     * @return Decoded RLP list items.\\n     */\\n    function readList(bytes memory _in) internal pure returns (RLPItem[] memory) {\\n        return readList(toRLPItem(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP bytes value into bytes.\\n     * @param _in RLP bytes value.\\n     * @return Decoded bytes.\\n     */\\n    function readBytes(RLPItem memory _in) internal pure returns (bytes memory) {\\n        (uint256 itemOffset, uint256 itemLength, RLPItemType itemType) = _decodeLength(_in);\\n\\n        require(itemType == RLPItemType.DATA_ITEM, \\\"Invalid RLP bytes value.\\\");\\n\\n        return _copy(_in.ptr, itemOffset, itemLength);\\n    }\\n\\n    /**\\n     * Reads an RLP bytes value into bytes.\\n     * @param _in RLP bytes value.\\n     * @return Decoded bytes.\\n     */\\n    function readBytes(bytes memory _in) internal pure returns (bytes memory) {\\n        return readBytes(toRLPItem(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP string value into a string.\\n     * @param _in RLP string value.\\n     * @return Decoded string.\\n     */\\n    function readString(RLPItem memory _in) internal pure returns (string memory) {\\n        return string(readBytes(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP string value into a string.\\n     * @param _in RLP string value.\\n     * @return Decoded string.\\n     */\\n    function readString(bytes memory _in) internal pure returns (string memory) {\\n        return readString(toRLPItem(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP bytes32 value into a bytes32.\\n     * @param _in RLP bytes32 value.\\n     * @return Decoded bytes32.\\n     */\\n    function readBytes32(RLPItem memory _in) internal pure returns (bytes32) {\\n        require(_in.length <= 33, \\\"Invalid RLP bytes32 value.\\\");\\n\\n        (uint256 itemOffset, uint256 itemLength, RLPItemType itemType) = _decodeLength(_in);\\n\\n        require(itemType == RLPItemType.DATA_ITEM, \\\"Invalid RLP bytes32 value.\\\");\\n\\n        uint256 ptr = _in.ptr + itemOffset;\\n        bytes32 out;\\n        assembly {\\n            out := mload(ptr)\\n\\n            // Shift the bytes over to match the item size.\\n            if lt(itemLength, 32) {\\n                out := div(out, exp(256, sub(32, itemLength)))\\n            }\\n        }\\n\\n        return out;\\n    }\\n\\n    /**\\n     * Reads an RLP bytes32 value into a bytes32.\\n     * @param _in RLP bytes32 value.\\n     * @return Decoded bytes32.\\n     */\\n    function readBytes32(bytes memory _in) internal pure returns (bytes32) {\\n        return readBytes32(toRLPItem(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP uint256 value into a uint256.\\n     * @param _in RLP uint256 value.\\n     * @return Decoded uint256.\\n     */\\n    function readUint256(RLPItem memory _in) internal pure returns (uint256) {\\n        return uint256(readBytes32(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP uint256 value into a uint256.\\n     * @param _in RLP uint256 value.\\n     * @return Decoded uint256.\\n     */\\n    function readUint256(bytes memory _in) internal pure returns (uint256) {\\n        return readUint256(toRLPItem(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP bool value into a bool.\\n     * @param _in RLP bool value.\\n     * @return Decoded bool.\\n     */\\n    function readBool(RLPItem memory _in) internal pure returns (bool) {\\n        require(_in.length == 1, \\\"Invalid RLP boolean value.\\\");\\n\\n        uint256 ptr = _in.ptr;\\n        uint256 out;\\n        assembly {\\n            out := byte(0, mload(ptr))\\n        }\\n\\n        require(out == 0 || out == 1, \\\"Lib_RLPReader: Invalid RLP boolean value, must be 0 or 1\\\");\\n\\n        return out != 0;\\n    }\\n\\n    /**\\n     * Reads an RLP bool value into a bool.\\n     * @param _in RLP bool value.\\n     * @return Decoded bool.\\n     */\\n    function readBool(bytes memory _in) internal pure returns (bool) {\\n        return readBool(toRLPItem(_in));\\n    }\\n\\n    /**\\n     * Reads an RLP address value into a address.\\n     * @param _in RLP address value.\\n     * @return Decoded address.\\n     */\\n    function readAddress(RLPItem memory _in) internal pure returns (address) {\\n        if (_in.length == 1) {\\n            return address(0);\\n        }\\n\\n        require(_in.length == 21, \\\"Invalid RLP address value.\\\");\\n\\n        return address(uint160(readUint256(_in)));\\n    }\\n\\n    /**\\n     * Reads an RLP address value into a address.\\n     * @param _in RLP address value.\\n     * @return Decoded address.\\n     */\\n    function readAddress(bytes memory _in) internal pure returns (address) {\\n        return readAddress(toRLPItem(_in));\\n    }\\n\\n    /**\\n     * Reads the raw bytes of an RLP item.\\n     * @param _in RLP item to read.\\n     * @return Raw RLP bytes.\\n     */\\n    function readRawBytes(RLPItem memory _in) internal pure returns (bytes memory) {\\n        return _copy(_in);\\n    }\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Decodes the length of an RLP item.\\n     * @param _in RLP item to decode.\\n     * @return Offset of the encoded data.\\n     * @return Length of the encoded data.\\n     * @return RLP item type (LIST_ITEM or DATA_ITEM).\\n     */\\n    function _decodeLength(RLPItem memory _in)\\n        private\\n        pure\\n        returns (\\n            uint256,\\n            uint256,\\n            RLPItemType\\n        )\\n    {\\n        require(_in.length > 0, \\\"RLP item cannot be null.\\\");\\n\\n        uint256 ptr = _in.ptr;\\n        uint256 prefix;\\n        assembly {\\n            prefix := byte(0, mload(ptr))\\n        }\\n\\n        if (prefix <= 0x7f) {\\n            // Single byte.\\n\\n            return (0, 1, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xb7) {\\n            // Short string.\\n\\n            uint256 strLen = prefix - 0x80;\\n\\n            require(_in.length > strLen, \\\"Invalid RLP short string.\\\");\\n\\n            return (1, strLen, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xbf) {\\n            // Long string.\\n            uint256 lenOfStrLen = prefix - 0xb7;\\n\\n            require(_in.length > lenOfStrLen, \\\"Invalid RLP long string length.\\\");\\n\\n            uint256 strLen;\\n            assembly {\\n                // Pick out the string length.\\n                strLen := div(mload(add(ptr, 1)), exp(256, sub(32, lenOfStrLen)))\\n            }\\n\\n            require(_in.length > lenOfStrLen + strLen, \\\"Invalid RLP long string.\\\");\\n\\n            return (1 + lenOfStrLen, strLen, RLPItemType.DATA_ITEM);\\n        } else if (prefix <= 0xf7) {\\n            // Short list.\\n            uint256 listLen = prefix - 0xc0;\\n\\n            require(_in.length > listLen, \\\"Invalid RLP short list.\\\");\\n\\n            return (1, listLen, RLPItemType.LIST_ITEM);\\n        } else {\\n            // Long list.\\n            uint256 lenOfListLen = prefix - 0xf7;\\n\\n            require(_in.length > lenOfListLen, \\\"Invalid RLP long list length.\\\");\\n\\n            uint256 listLen;\\n            assembly {\\n                // Pick out the list length.\\n                listLen := div(mload(add(ptr, 1)), exp(256, sub(32, lenOfListLen)))\\n            }\\n\\n            require(_in.length > lenOfListLen + listLen, \\\"Invalid RLP long list.\\\");\\n\\n            return (1 + lenOfListLen, listLen, RLPItemType.LIST_ITEM);\\n        }\\n    }\\n\\n    /**\\n     * Copies the bytes from a memory location.\\n     * @param _src Pointer to the location to read from.\\n     * @param _offset Offset to start reading from.\\n     * @param _length Number of bytes to read.\\n     * @return Copied bytes.\\n     */\\n    function _copy(\\n        uint256 _src,\\n        uint256 _offset,\\n        uint256 _length\\n    ) private pure returns (bytes memory) {\\n        bytes memory out = new bytes(_length);\\n        if (out.length == 0) {\\n            return out;\\n        }\\n\\n        uint256 src = _src + _offset;\\n        uint256 dest;\\n        assembly {\\n            dest := add(out, 32)\\n        }\\n\\n        // Copy over as many complete words as we can.\\n        for (uint256 i = 0; i < _length / 32; i++) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += 32;\\n            dest += 32;\\n        }\\n\\n        // Pick out the remaining bytes.\\n        uint256 mask;\\n        unchecked {\\n            mask = 256**(32 - (_length % 32)) - 1;\\n        }\\n\\n        assembly {\\n            mstore(dest, or(and(mload(src), not(mask)), and(mload(dest), mask)))\\n        }\\n        return out;\\n    }\\n\\n    /**\\n     * Copies an RLP item into bytes.\\n     * @param _in RLP item to copy.\\n     * @return Copied bytes.\\n     */\\n    function _copy(RLPItem memory _in) private pure returns (bytes memory) {\\n        return _copy(_in.ptr, 0, _in.length);\\n    }\\n}\\n\",\"keccak256\":\"0xde4a27577a23b2b11b21e8af3e1a0df50b0b27f08864795f7a84b1e3c230da33\",\"license\":\"MIT\"},\"contracts/libraries/rlp/Lib_RLPWriter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Lib_RLPWriter\\n * @author Bakaoh (with modifications)\\n */\\nlibrary Lib_RLPWriter {\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * RLP encodes a byte string.\\n     * @param _in The byte string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function writeBytes(bytes memory _in) internal pure returns (bytes memory) {\\n        bytes memory encoded;\\n\\n        if (_in.length == 1 && uint8(_in[0]) < 128) {\\n            encoded = _in;\\n        } else {\\n            encoded = abi.encodePacked(_writeLength(_in.length, 128), _in);\\n        }\\n\\n        return encoded;\\n    }\\n\\n    /**\\n     * RLP encodes a list of RLP encoded byte byte strings.\\n     * @param _in The list of RLP encoded byte strings.\\n     * @return The RLP encoded list of items in bytes.\\n     */\\n    function writeList(bytes[] memory _in) internal pure returns (bytes memory) {\\n        bytes memory list = _flatten(_in);\\n        return abi.encodePacked(_writeLength(list.length, 192), list);\\n    }\\n\\n    /**\\n     * RLP encodes a string.\\n     * @param _in The string to encode.\\n     * @return The RLP encoded string in bytes.\\n     */\\n    function writeString(string memory _in) internal pure returns (bytes memory) {\\n        return writeBytes(bytes(_in));\\n    }\\n\\n    /**\\n     * RLP encodes an address.\\n     * @param _in The address to encode.\\n     * @return The RLP encoded address in bytes.\\n     */\\n    function writeAddress(address _in) internal pure returns (bytes memory) {\\n        return writeBytes(abi.encodePacked(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a uint.\\n     * @param _in The uint256 to encode.\\n     * @return The RLP encoded uint256 in bytes.\\n     */\\n    function writeUint(uint256 _in) internal pure returns (bytes memory) {\\n        return writeBytes(_toBinary(_in));\\n    }\\n\\n    /**\\n     * RLP encodes a bool.\\n     * @param _in The bool to encode.\\n     * @return The RLP encoded bool in bytes.\\n     */\\n    function writeBool(bool _in) internal pure returns (bytes memory) {\\n        bytes memory encoded = new bytes(1);\\n        encoded[0] = (_in ? bytes1(0x01) : bytes1(0x80));\\n        return encoded;\\n    }\\n\\n    /*********************\\n     * Private Functions *\\n     *********************/\\n\\n    /**\\n     * Encode the first byte, followed by the `len` in binary form if `length` is more than 55.\\n     * @param _len The length of the string or the payload.\\n     * @param _offset 128 if item is string, 192 if item is list.\\n     * @return RLP encoded bytes.\\n     */\\n    function _writeLength(uint256 _len, uint256 _offset) private pure returns (bytes memory) {\\n        bytes memory encoded;\\n\\n        if (_len < 56) {\\n            encoded = new bytes(1);\\n            encoded[0] = bytes1(uint8(_len) + uint8(_offset));\\n        } else {\\n            uint256 lenLen;\\n            uint256 i = 1;\\n            while (_len / i != 0) {\\n                lenLen++;\\n                i *= 256;\\n            }\\n\\n            encoded = new bytes(lenLen + 1);\\n            encoded[0] = bytes1(uint8(lenLen) + uint8(_offset) + 55);\\n            for (i = 1; i <= lenLen; i++) {\\n                encoded[i] = bytes1(uint8((_len / (256**(lenLen - i))) % 256));\\n            }\\n        }\\n\\n        return encoded;\\n    }\\n\\n    /**\\n     * Encode integer in big endian binary form with no leading zeroes.\\n     * @notice TODO: This should be optimized with assembly to save gas costs.\\n     * @param _x The integer to encode.\\n     * @return RLP encoded bytes.\\n     */\\n    function _toBinary(uint256 _x) private pure returns (bytes memory) {\\n        bytes memory b = abi.encodePacked(_x);\\n\\n        uint256 i = 0;\\n        for (; i < 32; i++) {\\n            if (b[i] != 0) {\\n                break;\\n            }\\n        }\\n\\n        bytes memory res = new bytes(32 - i);\\n        for (uint256 j = 0; j < res.length; j++) {\\n            res[j] = b[i++];\\n        }\\n\\n        return res;\\n    }\\n\\n    /**\\n     * Copies a piece of memory to another location.\\n     * @notice From: https://github.com/Arachnid/solidity-stringutils/blob/master/src/strings.sol.\\n     * @param _dest Destination location.\\n     * @param _src Source location.\\n     * @param _len Length of memory to copy.\\n     */\\n    function _memcpy(\\n        uint256 _dest,\\n        uint256 _src,\\n        uint256 _len\\n    ) private pure {\\n        uint256 dest = _dest;\\n        uint256 src = _src;\\n        uint256 len = _len;\\n\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        uint256 mask;\\n        unchecked {\\n            mask = 256**(32 - len) - 1;\\n        }\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n\\n    /**\\n     * Flattens a list of byte strings into one byte string.\\n     * @notice From: https://github.com/sammayo/solidity-rlp-encoder/blob/master/RLPEncode.sol.\\n     * @param _list List of byte strings to flatten.\\n     * @return The flattened byte string.\\n     */\\n    function _flatten(bytes[] memory _list) private pure returns (bytes memory) {\\n        if (_list.length == 0) {\\n            return new bytes(0);\\n        }\\n\\n        uint256 len;\\n        uint256 i = 0;\\n        for (; i < _list.length; i++) {\\n            len += _list[i].length;\\n        }\\n\\n        bytes memory flattened = new bytes(len);\\n        uint256 flattenedPtr;\\n        assembly {\\n            flattenedPtr := add(flattened, 0x20)\\n        }\\n\\n        for (i = 0; i < _list.length; i++) {\\n            bytes memory item = _list[i];\\n\\n            uint256 listPtr;\\n            assembly {\\n                listPtr := add(item, 0x20)\\n            }\\n\\n            _memcpy(flattenedPtr, listPtr, item.length);\\n            flattenedPtr += _list[i].length;\\n        }\\n\\n        return flattened;\\n    }\\n}\\n\",\"keccak256\":\"0x215b90672ce126effc3f2df61ca0cdf52d2b1cc9be602877e637829b0bf229fd\",\"license\":\"MIT\"},\"contracts/libraries/utils/Lib_Bytes32Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Lib_Byte32Utils\\n */\\nlibrary Lib_Bytes32Utils {\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    /**\\n     * Converts a bytes32 value to a boolean. Anything non-zero will be converted to \\\"true.\\\"\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 as a boolean.\\n     */\\n    function toBool(bytes32 _in) internal pure returns (bool) {\\n        return _in != 0;\\n    }\\n\\n    /**\\n     * Converts a boolean to a bytes32 value.\\n     * @param _in Input boolean value.\\n     * @return Boolean as a bytes32.\\n     */\\n    function fromBool(bool _in) internal pure returns (bytes32) {\\n        return bytes32(uint256(_in ? 1 : 0));\\n    }\\n\\n    /**\\n     * Converts a bytes32 value to an address. Takes the *last* 20 bytes.\\n     * @param _in Input bytes32 value.\\n     * @return Bytes32 as an address.\\n     */\\n    function toAddress(bytes32 _in) internal pure returns (address) {\\n        return address(uint160(uint256(_in)));\\n    }\\n\\n    /**\\n     * Converts an address to a bytes32.\\n     * @param _in Input address value.\\n     * @return Address as a bytes32.\\n     */\\n    function fromAddress(address _in) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(_in)));\\n    }\\n}\\n\",\"keccak256\":\"0xf2d1a526f2529e51fc2fffccf093c1691e291cbbb6de8a3da7d7f80024a9a234\",\"license\":\"MIT\"},\"contracts/libraries/utils/Lib_BytesUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\n/**\\n * @title Lib_BytesUtils\\n */\\nlibrary Lib_BytesUtils {\\n    /**********************\\n     * Internal Functions *\\n     **********************/\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_start + _length >= _start, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function slice(bytes memory _bytes, uint256 _start) internal pure returns (bytes memory) {\\n        if (_start >= _bytes.length) {\\n            return bytes(\\\"\\\");\\n        }\\n\\n        return slice(_bytes, _start, _bytes.length - _start);\\n    }\\n\\n    function toBytes32(bytes memory _bytes) internal pure returns (bytes32) {\\n        if (_bytes.length < 32) {\\n            bytes32 ret;\\n            assembly {\\n                ret := mload(add(_bytes, 32))\\n            }\\n            return ret;\\n        }\\n\\n        return abi.decode(_bytes, (bytes32)); // will truncate if input length > 32 bytes\\n    }\\n\\n    function toUint256(bytes memory _bytes) internal pure returns (uint256) {\\n        return uint256(toBytes32(_bytes));\\n    }\\n\\n    function toNibbles(bytes memory _bytes) internal pure returns (bytes memory) {\\n        bytes memory nibbles = new bytes(_bytes.length * 2);\\n\\n        for (uint256 i = 0; i < _bytes.length; i++) {\\n            nibbles[i * 2] = _bytes[i] >> 4;\\n            nibbles[i * 2 + 1] = bytes1(uint8(_bytes[i]) % 16);\\n        }\\n\\n        return nibbles;\\n    }\\n\\n    function fromNibbles(bytes memory _bytes) internal pure returns (bytes memory) {\\n        bytes memory ret = new bytes(_bytes.length / 2);\\n\\n        for (uint256 i = 0; i < ret.length; i++) {\\n            ret[i] = (_bytes[i * 2] << 4) | (_bytes[i * 2 + 1]);\\n        }\\n\\n        return ret;\\n    }\\n\\n    function equal(bytes memory _bytes, bytes memory _other) internal pure returns (bool) {\\n        return keccak256(_bytes) == keccak256(_other);\\n    }\\n}\\n\",\"keccak256\":\"0xc39ee13f97e4ccfbc72a5aac571deb3c1aff882fca2dd18be794d43ac5de0a30\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405262015180600d553480156200001857600080fd5b50604051620032da380380620032da8339810160408190526200003b91620000b5565b600080546001600160a01b039384166001600160a01b031991821617909155680ad78ebc5ac6200000601155601080549290931691161790556012805460ff199081166001908117909255600a80549091169091179055620000ed565b80516001600160a01b0381168114620000b057600080fd5b919050565b60008060408385031215620000c957600080fd5b620000d48362000098565b9150620000e46020840162000098565b90509250929050565b6131dd80620000fd6000396000f3fe608060405234801561001057600080fd5b50600436106101c45760003560e01c80638c80fd90116100f9578063b646c02511610097578063eab0fca311610071578063eab0fca314610472578063ef53b041146104af578063fca0fd6c146104c2578063ffa444ec146104cb57600080fd5b8063b646c02514610441578063dcd836161461044a578063e59745541461045257600080fd5b8063939f59fe116100d3578063939f59fe146103e55780639b19251a146103f8578063ac1eff681461041b578063b4b6de381461042e57600080fd5b80638c80fd90146103985780638d14e127146103ab5780638f1d3776146103be57600080fd5b80634d4127af116101665780635bf0f25d116101405780635bf0f25d146103135780635cc38c02146103265780636593363f14610349578063669fdeb51461035c57600080fd5b80634d4127af146102d45780634e71d92d146102dd5780635505705a146102e557600080fd5b8063299ca478116101a2578063299ca4781461025e5780632e1a7d4d146102a3578063375b3c0a146102b8578063461a4478146102c157600080fd5b8063015cfec7146101c95780630700037d146101f25780630c70066714610220575b600080fd5b6101dc6101d73660046127ee565b6104eb565b6040516101e991906128c5565b60405180910390f35b610212610200366004612901565b600f6020526000908152604090205481565b6040519081526020016101e9565b61024e61022e36600461291e565b600660209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016101e9565b60005461027e9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101e9565b6102b66102b136600461294e565b61060a565b005b61021260115481565b61027e6102cf366004612a53565b610816565b61021260135481565b6102b66108c3565b61024e6102f336600461291e565b600560209081526000928352604080842090915290825290205460ff1681565b6102b661032136600461294e565b610a30565b61024e61033436600461294e565b60086020526000908152604090205460ff1681565b6102b6610357366004612aa4565b610daa565b6101dc6040518060400160405280600d81526020017f4d455449535f4d414e414745520000000000000000000000000000000000000081525081565b6102b66103a636600461294e565b61136c565b6102b66103b9366004612afe565b6114d3565b6103d16103cc36600461294e565b6115f3565b6040516101e9989796959493929190612b69565b6102b66103f3366004612bcd565b61172f565b61024e610406366004612901565b60096020526000908152604090205460ff1681565b61027e61042936600461294e565b611948565b6102b661043c366004612c47565b61197f565b610212600e5481565b6102b6611d64565b60105461027e9073ffffffffffffffffffffffffffffffffffffffff1681565b61024e610480366004612901565b60115473ffffffffffffffffffffffffffffffffffffffff909116600090815260016020526040902054101590565b6102b66104bd36600461294e565b611e4e565b610212600d5481565b6102126104d9366004612901565b60016020526000908152604090205481565b6060600085858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093945083925050505b82518110156105fe578185141561054057600091505b61059d83828151811061055557610555612ced565b01602001517fff000000000000000000000000000000000000000000000000000000000000001687878581811061058e5761058e612ced565b919091013560f81c9050611f31565b8382815181106105af576105af612ced565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350816105e881612d4b565b92505080806105f690612d4b565b91505061052a565b50909695505050505050565b60125460ff166106615760405162461bcd60e51b815260206004820181905260248201527f77697468647261772069732063757272656e746c792070726f6869626974656460448201526064015b60405180910390fd5b33600090815260016020526040902054818110156106c15760405162461bcd60e51b815260206004820152601e60248201527f696e73756666696369656e74207374616b6520746f20776974686472617700006044820152606401610658565b6011546106ce8383612d84565b1080156106dd57506011548110155b156106f857601380549060006106f283612d9b565b91905055505b3360009081526001602052604081208054849290610717908490612d84565b90915550506010546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810184905273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb90604401602060405180830381600087803b15801561078e57600080fd5b505af11580156107a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c69190612dd0565b6108125760405162461bcd60e51b815260206004820152601560248201527f746f6b656e207472616e73666572206661696c656400000000000000000000006044820152606401610658565b5050565b600080546040517fbf40fac100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063bf40fac19061086d9085906004016128c5565b60206040518083038186803b15801561088557600080fd5b505afa158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd9190612ded565b92915050565b336000908152600f602052604090205461091f5760405162461bcd60e51b815260206004820152601260248201527f6e6f2072657761726420746f20636c61696d00000000000000000000000000006044820152606401610658565b336000818152600f6020526040808220805492905560105490517fa9059cbb000000000000000000000000000000000000000000000000000000008152600481019390935260248301829052909173ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb90604401602060405180830381600087803b1580156109a957600080fd5b505af11580156109bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e19190612dd0565b610a2d5760405162461bcd60e51b815260206004820152601560248201527f746f6b656e207472616e73666572206661696c656400000000000000000000006044820152606401610658565b50565b600a5460ff161580610a5657503360009081526009602052604090205460ff1615156001145b610ac85760405162461bcd60e51b815260206004820152602360248201527f6f6e6c792077686974656c6973746564207665726966696572732063616e206360448201527f616c6c00000000000000000000000000000000000000000000000000000000006064820152608401610658565b60125460ff16610b1a5760405162461bcd60e51b815260206004820152601d60248201527f7374616b652069732063757272656e746c792070726f686962697465640000006044820152606401610658565b60008111610b6a5760405162461bcd60e51b815260206004820152601660248201527f7a65726f207374616b65206e6f7420616c6c6f776564000000000000000000006044820152606401610658565b6010546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd90606401602060405180830381600087803b158015610be257600080fd5b505af1158015610bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1a9190612dd0565b610c665760405162461bcd60e51b815260206004820152601560248201527f7472616e73666572206d65746973206661696c656400000000000000000000006044820152606401610658565b3360009081526001602052604090205480610cfe573360008181526001602081905260408220859055600b8054918201815582527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169092179091556013805491610cf483612d4b565b9190505550610d23565b3360009081526001602052604081208054849290610d1d908490612e0a565b90915550505b6011543360009081526001602052604090205410156108125760405162461bcd60e51b815260206004820152602b60248201527f696e73756666696369656e74207374616b6520746f207175616c69667920617360448201527f20612076657269666965720000000000000000000000000000000000000000006064820152608401610658565b601154336000908152600160205260409020541015610e0b5760405162461bcd60e51b815260206004820152601260248201527f696e73756666696369656e74207374616b6500000000000000000000000000006044820152606401610658565b600a5460ff161580610e3157503360009081526009602052604090205460ff1615156001145b610ea35760405162461bcd60e51b815260206004820152602360248201527f6f6e6c792077686974656c6973746564207665726966696572732063616e206360448201527f616c6c00000000000000000000000000000000000000000000000000000000006064820152608401610658565b600b54600c805485908110610eba57610eba612ced565b90600052602060002090600c0201600a01541480610f085750600d54600c8481548110610ee957610ee9612ced565b90600052602060002090600c02016008015442610f069190612d84565b115b610f545760405162461bcd60e51b815260206004820152601160248201527f70686173652032206e6f742072656164790000000000000000000000000000006044820152606401610658565b600083815260046020908152604080832033845290915281208054610f7890612e22565b905011610fed5760405162461bcd60e51b815260206004820152602160248201527f796f75206469646e277420706172746963697061746520696e2070686173652060448201527f31000000000000000000000000000000000000000000000000000000000000006064820152608401610658565b60008381526002602090815260408083203384529091528120805461101190612e22565b905011156110275761102283611f6d565b505050565b6000838152600360209081526040808320338452909152902061104990612e76565b6002838360405161105b929190612f1f565b602060405180830381855afa158015611078573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061109b9190612f2f565b146110e85760405162461bcd60e51b815260206004820152601b60248201527f6b657920616e64206b65796861736820646f6e2774206d6174636800000000006044820152606401610658565b600c83815481106110fb576110fb612ced565b60009182526020909120600c909102015473ffffffffffffffffffffffffffffffffffffffff163314156111f9576111c8600c848154811061113f5761113f612ced565b90600052602060002090600c02016003016001015460405160200161116691815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181526020601f8601819004810284018101909252848352919085908590819084018382808284376000920191909152506124c792505050565b6111d190612f48565b600c84815481106111e4576111e4612ced565b600091825260209091206004600c9092020101555b6000838152600260209081526040808320338452909152902061121d90838361260a565b50600083815260046020908152604080832033845290915290208054611301919061124790612e22565b80601f016020809104026020016040519081016040528092919081815260200182805461127390612e22565b80156112c05780601f10611295576101008083540402835291602001916112c0565b820191906000526020600020905b8154815290600101906020018083116112a357829003601f168201915b505050505083838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506124c792505050565b60008481526004602090815260408083203384528252909120825161132c939192919091019061268e565b50600c838154811061134057611340612ced565b600091825260208220600b600c909202010180549161135e83612d4b565b919050555061102283611f6d565b6113aa6040518060400160405280600d81526020017f4d455449535f4d414e4147455200000000000000000000000000000000000000815250610816565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461144a5760405162461bcd60e51b815260206004820152603f60248201527f4d564d5f56657269666965723a2046756e6374696f6e2063616e206f6e6c792060448201527f62652063616c6c656420627920746865204d455449535f4d414e414745522e006064820152608401610658565b60118190556000805b600b548110156114cc5760115460016000600b848154811061147757611477612ced565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902054106114bc57816114b881612d4b565b9250505b6114c581612d4b565b9050611453565b5060135550565b6115116040518060400160405280600d81526020017f4d455449535f4d414e4147455200000000000000000000000000000000000000815250610816565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146115b15760405162461bcd60e51b815260206004820152603f60248201527f4d564d5f56657269666965723a2046756e6374696f6e2063616e206f6e6c792060448201527f62652063616c6c656420627920746865204d455449535f4d414e414745522e006064820152608401610658565b73ffffffffffffffffffffffffffffffffffffffff9091166000908152600960205260409020805491151560ff19928316179055600a80549091166001179055565b600c818154811061160357600080fd5b90600052602060002090600c02016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002015490806003016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201805461169090612e22565b80601f01602080910402602001604051908101604052809291908181526020018280546116bc90612e22565b80156117095780601f106116de57610100808354040283529160200191611709565b820191906000526020600020905b8154815290600101906020018083116116ec57829003601f168201915b5050505050815250509080600801549080600901549080600a01549080600b0154905088565b600a5460ff16158061175557503360009081526009602052604090205460ff1615156001145b6117c75760405162461bcd60e51b815260206004820152602360248201527f6f6e6c792077686974656c6973746564207665726966696572732063616e206360448201527f616c6c00000000000000000000000000000000000000000000000000000000006064820152608401610658565b6011543360009081526001602052604090205410156118285760405162461bcd60e51b815260206004820152601260248201527f696e73756666696369656e74207374616b6500000000000000000000000000006044820152606401610658565b60008581526004602090815260408083203384529091529020805461184c90612e22565b1590506118c15760405162461bcd60e51b815260206004820152602860248201527f7665726966793120616c726561647920636f6d706c6574656420666f7220746860448201527f652073656e6465720000000000000000000000000000000000000000000000006064820152608401610658565b600085815260046020908152604080832033845290915290206118e590858561260a565b506000858152600360209081526040808320338452909152902061190a90838361260a565b50600c858154811061191e5761191e612ced565b600091825260208220600a600c909202010180549161193c83612d4b565b91905055505050505050565b600b818154811061195857600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600a5460ff1615806119a557503360009081526009602052604090205460ff1615156001145b611a175760405162461bcd60e51b815260206004820152602360248201527f6f6e6c792077686974656c6973746564207665726966696572732063616e206360448201527f616c6c00000000000000000000000000000000000000000000000000000000006064820152608401610658565b601154336000908152600160205260409020541015611a785760405162461bcd60e51b815260206004820152601260248201527f696e73756666696369656e74207374616b6500000000000000000000000000006044820152606401610658565b611a80612702565b60208101879052338152426080820152611a9986612f8a565b6060808301918252600c80546001810182556000829052845191027fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c78101805473ffffffffffffffffffffffffffffffffffffffff9093167fffffffffffffffffffffffff00000000000000000000000000000000000000009093169290921782556020808601517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c88301556040808701517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c9840155945180517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8ca8401908155818301517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8cb850155958101517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8cc840155938401517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8cd83015560808401518051879694959493611c4e937fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8ce90910192019061268e565b5050506080820151600882015560a0820151600982015560c0820151600a82015560e090910151600b90910155600c5460008181526004602090815260408083203384529091529020611ca290878761260a565b5060008181526003602090815260408083203384529091529020611cc790858561260a565b50600c8181548110611cdb57611cdb612ced565b600091825260208220600a600c9092020101805491611cf983612d4b565b90915550506012805460ff19169055600e8054906000611d1883612d4b565b91905055507f441214906ecb1ed44d085cb85ab8071c4734e7b4975b38397b9a5df89dec726881898942604051611d529493929190613055565b60405180910390a15050505050505050565b611da26040518060400160405280600d81526020017f4d455449535f4d414e4147455200000000000000000000000000000000000000815250610816565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e425760405162461bcd60e51b815260206004820152603f60248201527f4d564d5f56657269666965723a2046756e6374696f6e2063616e206f6e6c792060448201527f62652063616c6c656420627920746865204d455449535f4d414e414745522e006064820152608401610658565b600a805460ff19169055565b611e8c6040518060400160405280600d81526020017f4d455449535f4d414e4147455200000000000000000000000000000000000000815250610816565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f2c5760405162461bcd60e51b815260206004820152603f60248201527f4d564d5f56657269666965723a2046756e6374696f6e2063616e206f6e6c792060448201527f62652063616c6c656420627920746865204d455449535f4d414e414745522e006064820152608401610658565b600d55565b600060f883901c611f4560ff841682613116565b905060ff8161ffff161115611f6357611f606101008261313c565b90505b60f81b9392505050565b6000600c8281548110611f8257611f82612ced565b90600052602060002090600c0201604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201805461204e90612e22565b80601f016020809104026020016040519081016040528092919081815260200182805461207a90612e22565b80156120c75780601f1061209c576101008083540402835291602001916120c7565b820191906000526020600020905b8154815290600101906020018083116120aa57829003601f168201915b5050509190925250505081526008820154602082015260098201546040820152600a8201546060820152600b90910154608090910152600c5460e0820151919250148015906121255750600d5460808201516121239042612d84565b105b1561212e575050565b600061216e6040518060400160405280601481526020017f5374617465436f6d6d69746d656e74436861696e000000000000000000000000815250610816565b6000848152600460209081526040808320865173ffffffffffffffffffffffffffffffffffffffff1684529091528120919250906121ab90612e76565b90506000805b600b548110156122ac576000868152600460205260408120600b805486939190859081106121e1576121e1612ced565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902061221b90612e76565b141561229a578161222b81612d4b565b9250506001600560008881526020019081526020016000206000600b848154811061225857612258612ced565b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020805460ff19169115159190911790555b806122a481612d4b565b9150506121b1565b508273ffffffffffffffffffffffffffffffffffffffff1663cfdf677e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122f357600080fd5b505afa158015612307573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232b9190612ded565b60208501516060860151516040517f67d18b9b0000000000000000000000000000000000000000000000000000000081526004810192909252602482015273ffffffffffffffffffffffffffffffffffffffff91909116906367d18b9b9060440160206040518083038186803b1580156123a457600080fd5b505afa1580156123b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123dc9190612f2f565b6123e9856060015161258f565b505083606001516020015182146124965760135481101561240957612496565b602084015160608501516040517f2ab65ec700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861692632ab65ec7926124639260040161315f565b600060405180830381600087803b15801561247d57600080fd5b505af1158015612491573d6000803e3d6000fd5b505050505b600e80549060006124a683612d9b565b9091555050600e546124c0576012805460ff191660011790555b5050505050565b6060826000805b82518110156125855784518214156124e557600091505b6125248382815181106124fa576124fa612ced565b602001015160f81c60f81b86848151811061251757612517612ced565b016020015160f81c6125d5565b83828151811061253657612536612ced565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508161256f81612d4b565b925050808061257d90612d4b565b9150506124ce565b5090949350505050565b600081602001518260400151836060015184608001516040516020016125b89493929190613178565b604051602081830303815290604052805190602001209050919050565b600060f883901c60ff83168111156125fb576125f460ff84168261313c565b9050611f63565b611f6060ff841661010061313c565b82805461261690612e22565b90600052602060002090601f016020900481019282612638576000855561267e565b82601f106126515782800160ff1982351617855561267e565b8280016001018555821561267e579182015b8281111561267e578235825591602001919060010190612663565b5061268a929150612790565b5090565b82805461269a90612e22565b90600052602060002090601f0160209004810192826126bc576000855561267e565b82601f106126d557805160ff191683800117855561267e565b8280016001018555821561267e579182015b8281111561267e5782518255916020019190600101906126e7565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200161276e6040518060a0016040528060008152602001600080191681526020016000815260200160008152602001606081525090565b8152602001600081526020016000815260200160008152602001600081525090565b5b8082111561268a5760008155600101612791565b60008083601f8401126127b757600080fd5b50813567ffffffffffffffff8111156127cf57600080fd5b6020830191508360208285010111156127e757600080fd5b9250929050565b6000806000806040858703121561280457600080fd5b843567ffffffffffffffff8082111561281c57600080fd5b612828888389016127a5565b9096509450602087013591508082111561284157600080fd5b5061284e878288016127a5565b95989497509550505050565b6000815180845260005b8181101561288057602081850181015186830182015201612864565b81811115612892576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006128d8602083018461285a565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610a2d57600080fd5b60006020828403121561291357600080fd5b81356128d8816128df565b6000806040838503121561293157600080fd5b823591506020830135612943816128df565b809150509250929050565b60006020828403121561296057600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156129b9576129b9612967565b60405290565b600067ffffffffffffffff808411156129da576129da612967565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715612a2057612a20612967565b81604052809350858152868686011115612a3957600080fd5b858560208301376000602087830101525050509392505050565b600060208284031215612a6557600080fd5b813567ffffffffffffffff811115612a7c57600080fd5b8201601f81018413612a8d57600080fd5b612a9c848235602084016129bf565b949350505050565b600080600060408486031215612ab957600080fd5b83359250602084013567ffffffffffffffff811115612ad757600080fd5b612ae3868287016127a5565b9497909650939450505050565b8015158114610a2d57600080fd5b60008060408385031215612b1157600080fd5b8235612b1c816128df565b9150602083013561294381612af0565b805182526020810151602083015260408101516040830152606081015160608301526000608082015160a06080850152612a9c60a085018261285a565b600061010073ffffffffffffffffffffffffffffffffffffffff8b168352896020840152886040840152806060840152612ba581840189612b2c565b9150508560808301528460a08301528360c08301528260e08301529998505050505050505050565b600080600080600060608688031215612be557600080fd5b85359450602086013567ffffffffffffffff80821115612c0457600080fd5b612c1089838a016127a5565b90965094506040880135915080821115612c2957600080fd5b50612c36888289016127a5565b969995985093965092949392505050565b60008060008060008060808789031215612c6057600080fd5b86359550602087013567ffffffffffffffff80821115612c7f57600080fd5b9088019060a0828b031215612c9357600080fd5b90955060408801359080821115612ca957600080fd5b612cb58a838b016127a5565b90965094506060890135915080821115612cce57600080fd5b50612cdb89828a016127a5565b979a9699509497509295939492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d7d57612d7d612d1c565b5060010190565b600082821015612d9657612d96612d1c565b500390565b600081612daa57612daa612d1c565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600060208284031215612de257600080fd5b81516128d881612af0565b600060208284031215612dff57600080fd5b81516128d8816128df565b60008219821115612e1d57612e1d612d1c565b500190565b600181811c90821680612e3657607f821691505b60208210811415612e70577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b8054600090600180821691901c81612e8c57607f165b6020811080831415612ec7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b849250601f821115612edf5784600052602060002092505b825493508015612f17577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260200360031b1b841693505b505050919050565b8183823760009101908152919050565b600060208284031215612f4157600080fd5b5051919050565b80516020808301519190811015612e70577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60209190910360031b1b16919050565b600060a08236031215612f9c57600080fd5b612fa4612996565b82358152602083013560208201526040830135604082015260608301356060820152608083013567ffffffffffffffff811115612fe057600080fd5b830136601f820112612ff157600080fd5b613000368235602084016129bf565b60808301525092915050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b8481528360208201526080604082015282356080820152602083013560a0820152604083013560c0820152606083013560e0820152600060808401357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18536030181126130c157600080fd5b8401803567ffffffffffffffff8111156130da57600080fd5b8036038613156130e957600080fd5b60a06101008501526131036101208501826020850161300c565b9250505082606083015295945050505050565b600061ffff80831681851680830382111561313357613133612d1c565b01949350505050565b600061ffff8381169083168181101561315757613157612d1c565b039392505050565b828152604060208201526000612a9c6040830184612b2c565b84815283602082015282604082015260806060820152600061319d608083018461285a565b969550505050505056fea2646970667358221220e5311cb8af0aa2479049ba6ff0cf880cb0504f4e97519b7163da582c51deccec64736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c45760003560e01c80638c80fd90116100f9578063b646c02511610097578063eab0fca311610071578063eab0fca314610472578063ef53b041146104af578063fca0fd6c146104c2578063ffa444ec146104cb57600080fd5b8063b646c02514610441578063dcd836161461044a578063e59745541461045257600080fd5b8063939f59fe116100d3578063939f59fe146103e55780639b19251a146103f8578063ac1eff681461041b578063b4b6de381461042e57600080fd5b80638c80fd90146103985780638d14e127146103ab5780638f1d3776146103be57600080fd5b80634d4127af116101665780635bf0f25d116101405780635bf0f25d146103135780635cc38c02146103265780636593363f14610349578063669fdeb51461035c57600080fd5b80634d4127af146102d45780634e71d92d146102dd5780635505705a146102e557600080fd5b8063299ca478116101a2578063299ca4781461025e5780632e1a7d4d146102a3578063375b3c0a146102b8578063461a4478146102c157600080fd5b8063015cfec7146101c95780630700037d146101f25780630c70066714610220575b600080fd5b6101dc6101d73660046127ee565b6104eb565b6040516101e991906128c5565b60405180910390f35b610212610200366004612901565b600f6020526000908152604090205481565b6040519081526020016101e9565b61024e61022e36600461291e565b600660209081526000928352604080842090915290825290205460ff1681565b60405190151581526020016101e9565b60005461027e9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101e9565b6102b66102b136600461294e565b61060a565b005b61021260115481565b61027e6102cf366004612a53565b610816565b61021260135481565b6102b66108c3565b61024e6102f336600461291e565b600560209081526000928352604080842090915290825290205460ff1681565b6102b661032136600461294e565b610a30565b61024e61033436600461294e565b60086020526000908152604090205460ff1681565b6102b6610357366004612aa4565b610daa565b6101dc6040518060400160405280600d81526020017f4d455449535f4d414e414745520000000000000000000000000000000000000081525081565b6102b66103a636600461294e565b61136c565b6102b66103b9366004612afe565b6114d3565b6103d16103cc36600461294e565b6115f3565b6040516101e9989796959493929190612b69565b6102b66103f3366004612bcd565b61172f565b61024e610406366004612901565b60096020526000908152604090205460ff1681565b61027e61042936600461294e565b611948565b6102b661043c366004612c47565b61197f565b610212600e5481565b6102b6611d64565b60105461027e9073ffffffffffffffffffffffffffffffffffffffff1681565b61024e610480366004612901565b60115473ffffffffffffffffffffffffffffffffffffffff909116600090815260016020526040902054101590565b6102b66104bd36600461294e565b611e4e565b610212600d5481565b6102126104d9366004612901565b60016020526000908152604090205481565b6060600085858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092018290525093945083925050505b82518110156105fe578185141561054057600091505b61059d83828151811061055557610555612ced565b01602001517fff000000000000000000000000000000000000000000000000000000000000001687878581811061058e5761058e612ced565b919091013560f81c9050611f31565b8382815181106105af576105af612ced565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350816105e881612d4b565b92505080806105f690612d4b565b91505061052a565b50909695505050505050565b60125460ff166106615760405162461bcd60e51b815260206004820181905260248201527f77697468647261772069732063757272656e746c792070726f6869626974656460448201526064015b60405180910390fd5b33600090815260016020526040902054818110156106c15760405162461bcd60e51b815260206004820152601e60248201527f696e73756666696369656e74207374616b6520746f20776974686472617700006044820152606401610658565b6011546106ce8383612d84565b1080156106dd57506011548110155b156106f857601380549060006106f283612d9b565b91905055505b3360009081526001602052604081208054849290610717908490612d84565b90915550506010546040517fa9059cbb0000000000000000000000000000000000000000000000000000000081523360048201526024810184905273ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb90604401602060405180830381600087803b15801561078e57600080fd5b505af11580156107a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c69190612dd0565b6108125760405162461bcd60e51b815260206004820152601560248201527f746f6b656e207472616e73666572206661696c656400000000000000000000006044820152606401610658565b5050565b600080546040517fbf40fac100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063bf40fac19061086d9085906004016128c5565b60206040518083038186803b15801561088557600080fd5b505afa158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd9190612ded565b92915050565b336000908152600f602052604090205461091f5760405162461bcd60e51b815260206004820152601260248201527f6e6f2072657761726420746f20636c61696d00000000000000000000000000006044820152606401610658565b336000818152600f6020526040808220805492905560105490517fa9059cbb000000000000000000000000000000000000000000000000000000008152600481019390935260248301829052909173ffffffffffffffffffffffffffffffffffffffff9091169063a9059cbb90604401602060405180830381600087803b1580156109a957600080fd5b505af11580156109bd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e19190612dd0565b610a2d5760405162461bcd60e51b815260206004820152601560248201527f746f6b656e207472616e73666572206661696c656400000000000000000000006044820152606401610658565b50565b600a5460ff161580610a5657503360009081526009602052604090205460ff1615156001145b610ac85760405162461bcd60e51b815260206004820152602360248201527f6f6e6c792077686974656c6973746564207665726966696572732063616e206360448201527f616c6c00000000000000000000000000000000000000000000000000000000006064820152608401610658565b60125460ff16610b1a5760405162461bcd60e51b815260206004820152601d60248201527f7374616b652069732063757272656e746c792070726f686962697465640000006044820152606401610658565b60008111610b6a5760405162461bcd60e51b815260206004820152601660248201527f7a65726f207374616b65206e6f7420616c6c6f776564000000000000000000006044820152606401610658565b6010546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd90606401602060405180830381600087803b158015610be257600080fd5b505af1158015610bf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1a9190612dd0565b610c665760405162461bcd60e51b815260206004820152601560248201527f7472616e73666572206d65746973206661696c656400000000000000000000006044820152606401610658565b3360009081526001602052604090205480610cfe573360008181526001602081905260408220859055600b8054918201815582527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db90180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169092179091556013805491610cf483612d4b565b9190505550610d23565b3360009081526001602052604081208054849290610d1d908490612e0a565b90915550505b6011543360009081526001602052604090205410156108125760405162461bcd60e51b815260206004820152602b60248201527f696e73756666696369656e74207374616b6520746f207175616c69667920617360448201527f20612076657269666965720000000000000000000000000000000000000000006064820152608401610658565b601154336000908152600160205260409020541015610e0b5760405162461bcd60e51b815260206004820152601260248201527f696e73756666696369656e74207374616b6500000000000000000000000000006044820152606401610658565b600a5460ff161580610e3157503360009081526009602052604090205460ff1615156001145b610ea35760405162461bcd60e51b815260206004820152602360248201527f6f6e6c792077686974656c6973746564207665726966696572732063616e206360448201527f616c6c00000000000000000000000000000000000000000000000000000000006064820152608401610658565b600b54600c805485908110610eba57610eba612ced565b90600052602060002090600c0201600a01541480610f085750600d54600c8481548110610ee957610ee9612ced565b90600052602060002090600c02016008015442610f069190612d84565b115b610f545760405162461bcd60e51b815260206004820152601160248201527f70686173652032206e6f742072656164790000000000000000000000000000006044820152606401610658565b600083815260046020908152604080832033845290915281208054610f7890612e22565b905011610fed5760405162461bcd60e51b815260206004820152602160248201527f796f75206469646e277420706172746963697061746520696e2070686173652060448201527f31000000000000000000000000000000000000000000000000000000000000006064820152608401610658565b60008381526002602090815260408083203384529091528120805461101190612e22565b905011156110275761102283611f6d565b505050565b6000838152600360209081526040808320338452909152902061104990612e76565b6002838360405161105b929190612f1f565b602060405180830381855afa158015611078573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061109b9190612f2f565b146110e85760405162461bcd60e51b815260206004820152601b60248201527f6b657920616e64206b65796861736820646f6e2774206d6174636800000000006044820152606401610658565b600c83815481106110fb576110fb612ced565b60009182526020909120600c909102015473ffffffffffffffffffffffffffffffffffffffff163314156111f9576111c8600c848154811061113f5761113f612ced565b90600052602060002090600c02016003016001015460405160200161116691815260200190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181526020601f8601819004810284018101909252848352919085908590819084018382808284376000920191909152506124c792505050565b6111d190612f48565b600c84815481106111e4576111e4612ced565b600091825260209091206004600c9092020101555b6000838152600260209081526040808320338452909152902061121d90838361260a565b50600083815260046020908152604080832033845290915290208054611301919061124790612e22565b80601f016020809104026020016040519081016040528092919081815260200182805461127390612e22565b80156112c05780601f10611295576101008083540402835291602001916112c0565b820191906000526020600020905b8154815290600101906020018083116112a357829003601f168201915b505050505083838080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506124c792505050565b60008481526004602090815260408083203384528252909120825161132c939192919091019061268e565b50600c838154811061134057611340612ced565b600091825260208220600b600c909202010180549161135e83612d4b565b919050555061102283611f6d565b6113aa6040518060400160405280600d81526020017f4d455449535f4d414e4147455200000000000000000000000000000000000000815250610816565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461144a5760405162461bcd60e51b815260206004820152603f60248201527f4d564d5f56657269666965723a2046756e6374696f6e2063616e206f6e6c792060448201527f62652063616c6c656420627920746865204d455449535f4d414e414745522e006064820152608401610658565b60118190556000805b600b548110156114cc5760115460016000600b848154811061147757611477612ced565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902054106114bc57816114b881612d4b565b9250505b6114c581612d4b565b9050611453565b5060135550565b6115116040518060400160405280600d81526020017f4d455449535f4d414e4147455200000000000000000000000000000000000000815250610816565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146115b15760405162461bcd60e51b815260206004820152603f60248201527f4d564d5f56657269666965723a2046756e6374696f6e2063616e206f6e6c792060448201527f62652063616c6c656420627920746865204d455449535f4d414e414745522e006064820152608401610658565b73ffffffffffffffffffffffffffffffffffffffff9091166000908152600960205260409020805491151560ff19928316179055600a80549091166001179055565b600c818154811061160357600080fd5b90600052602060002090600c02016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690806001015490806002015490806003016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201805461169090612e22565b80601f01602080910402602001604051908101604052809291908181526020018280546116bc90612e22565b80156117095780601f106116de57610100808354040283529160200191611709565b820191906000526020600020905b8154815290600101906020018083116116ec57829003601f168201915b5050505050815250509080600801549080600901549080600a01549080600b0154905088565b600a5460ff16158061175557503360009081526009602052604090205460ff1615156001145b6117c75760405162461bcd60e51b815260206004820152602360248201527f6f6e6c792077686974656c6973746564207665726966696572732063616e206360448201527f616c6c00000000000000000000000000000000000000000000000000000000006064820152608401610658565b6011543360009081526001602052604090205410156118285760405162461bcd60e51b815260206004820152601260248201527f696e73756666696369656e74207374616b6500000000000000000000000000006044820152606401610658565b60008581526004602090815260408083203384529091529020805461184c90612e22565b1590506118c15760405162461bcd60e51b815260206004820152602860248201527f7665726966793120616c726561647920636f6d706c6574656420666f7220746860448201527f652073656e6465720000000000000000000000000000000000000000000000006064820152608401610658565b600085815260046020908152604080832033845290915290206118e590858561260a565b506000858152600360209081526040808320338452909152902061190a90838361260a565b50600c858154811061191e5761191e612ced565b600091825260208220600a600c909202010180549161193c83612d4b565b91905055505050505050565b600b818154811061195857600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b600a5460ff1615806119a557503360009081526009602052604090205460ff1615156001145b611a175760405162461bcd60e51b815260206004820152602360248201527f6f6e6c792077686974656c6973746564207665726966696572732063616e206360448201527f616c6c00000000000000000000000000000000000000000000000000000000006064820152608401610658565b601154336000908152600160205260409020541015611a785760405162461bcd60e51b815260206004820152601260248201527f696e73756666696369656e74207374616b6500000000000000000000000000006044820152606401610658565b611a80612702565b60208101879052338152426080820152611a9986612f8a565b6060808301918252600c80546001810182556000829052845191027fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c78101805473ffffffffffffffffffffffffffffffffffffffff9093167fffffffffffffffffffffffff00000000000000000000000000000000000000009093169290921782556020808601517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c88301556040808701517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c9840155945180517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8ca8401908155818301517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8cb850155958101517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8cc840155938401517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8cd83015560808401518051879694959493611c4e937fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8ce90910192019061268e565b5050506080820151600882015560a0820151600982015560c0820151600a82015560e090910151600b90910155600c5460008181526004602090815260408083203384529091529020611ca290878761260a565b5060008181526003602090815260408083203384529091529020611cc790858561260a565b50600c8181548110611cdb57611cdb612ced565b600091825260208220600a600c9092020101805491611cf983612d4b565b90915550506012805460ff19169055600e8054906000611d1883612d4b565b91905055507f441214906ecb1ed44d085cb85ab8071c4734e7b4975b38397b9a5df89dec726881898942604051611d529493929190613055565b60405180910390a15050505050505050565b611da26040518060400160405280600d81526020017f4d455449535f4d414e4147455200000000000000000000000000000000000000815250610816565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e425760405162461bcd60e51b815260206004820152603f60248201527f4d564d5f56657269666965723a2046756e6374696f6e2063616e206f6e6c792060448201527f62652063616c6c656420627920746865204d455449535f4d414e414745522e006064820152608401610658565b600a805460ff19169055565b611e8c6040518060400160405280600d81526020017f4d455449535f4d414e4147455200000000000000000000000000000000000000815250610816565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611f2c5760405162461bcd60e51b815260206004820152603f60248201527f4d564d5f56657269666965723a2046756e6374696f6e2063616e206f6e6c792060448201527f62652063616c6c656420627920746865204d455449535f4d414e414745522e006064820152608401610658565b600d55565b600060f883901c611f4560ff841682613116565b905060ff8161ffff161115611f6357611f606101008261313c565b90505b60f81b9392505050565b6000600c8281548110611f8257611f82612ced565b90600052602060002090600c0201604051806101000160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815260200160028201548152602001600382016040518060a00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201805461204e90612e22565b80601f016020809104026020016040519081016040528092919081815260200182805461207a90612e22565b80156120c75780601f1061209c576101008083540402835291602001916120c7565b820191906000526020600020905b8154815290600101906020018083116120aa57829003601f168201915b5050509190925250505081526008820154602082015260098201546040820152600a8201546060820152600b90910154608090910152600c5460e0820151919250148015906121255750600d5460808201516121239042612d84565b105b1561212e575050565b600061216e6040518060400160405280601481526020017f5374617465436f6d6d69746d656e74436861696e000000000000000000000000815250610816565b6000848152600460209081526040808320865173ffffffffffffffffffffffffffffffffffffffff1684529091528120919250906121ab90612e76565b90506000805b600b548110156122ac576000868152600460205260408120600b805486939190859081106121e1576121e1612ced565b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff168352820192909252604001902061221b90612e76565b141561229a578161222b81612d4b565b9250506001600560008881526020019081526020016000206000600b848154811061225857612258612ced565b60009182526020808320919091015473ffffffffffffffffffffffffffffffffffffffff1683528201929092526040019020805460ff19169115159190911790555b806122a481612d4b565b9150506121b1565b508273ffffffffffffffffffffffffffffffffffffffff1663cfdf677e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122f357600080fd5b505afa158015612307573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061232b9190612ded565b60208501516060860151516040517f67d18b9b0000000000000000000000000000000000000000000000000000000081526004810192909252602482015273ffffffffffffffffffffffffffffffffffffffff91909116906367d18b9b9060440160206040518083038186803b1580156123a457600080fd5b505afa1580156123b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123dc9190612f2f565b6123e9856060015161258f565b505083606001516020015182146124965760135481101561240957612496565b602084015160608501516040517f2ab65ec700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff861692632ab65ec7926124639260040161315f565b600060405180830381600087803b15801561247d57600080fd5b505af1158015612491573d6000803e3d6000fd5b505050505b600e80549060006124a683612d9b565b9091555050600e546124c0576012805460ff191660011790555b5050505050565b6060826000805b82518110156125855784518214156124e557600091505b6125248382815181106124fa576124fa612ced565b602001015160f81c60f81b86848151811061251757612517612ced565b016020015160f81c6125d5565b83828151811061253657612536612ced565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508161256f81612d4b565b925050808061257d90612d4b565b9150506124ce565b5090949350505050565b600081602001518260400151836060015184608001516040516020016125b89493929190613178565b604051602081830303815290604052805190602001209050919050565b600060f883901c60ff83168111156125fb576125f460ff84168261313c565b9050611f63565b611f6060ff841661010061313c565b82805461261690612e22565b90600052602060002090601f016020900481019282612638576000855561267e565b82601f106126515782800160ff1982351617855561267e565b8280016001018555821561267e579182015b8281111561267e578235825591602001919060010190612663565b5061268a929150612790565b5090565b82805461269a90612e22565b90600052602060002090601f0160209004810192826126bc576000855561267e565b82601f106126d557805160ff191683800117855561267e565b8280016001018555821561267e579182015b8281111561267e5782518255916020019190600101906126e7565b604051806101000160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200161276e6040518060a0016040528060008152602001600080191681526020016000815260200160008152602001606081525090565b8152602001600081526020016000815260200160008152602001600081525090565b5b8082111561268a5760008155600101612791565b60008083601f8401126127b757600080fd5b50813567ffffffffffffffff8111156127cf57600080fd5b6020830191508360208285010111156127e757600080fd5b9250929050565b6000806000806040858703121561280457600080fd5b843567ffffffffffffffff8082111561281c57600080fd5b612828888389016127a5565b9096509450602087013591508082111561284157600080fd5b5061284e878288016127a5565b95989497509550505050565b6000815180845260005b8181101561288057602081850181015186830182015201612864565b81811115612892576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006128d8602083018461285a565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff81168114610a2d57600080fd5b60006020828403121561291357600080fd5b81356128d8816128df565b6000806040838503121561293157600080fd5b823591506020830135612943816128df565b809150509250929050565b60006020828403121561296057600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156129b9576129b9612967565b60405290565b600067ffffffffffffffff808411156129da576129da612967565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715612a2057612a20612967565b81604052809350858152868686011115612a3957600080fd5b858560208301376000602087830101525050509392505050565b600060208284031215612a6557600080fd5b813567ffffffffffffffff811115612a7c57600080fd5b8201601f81018413612a8d57600080fd5b612a9c848235602084016129bf565b949350505050565b600080600060408486031215612ab957600080fd5b83359250602084013567ffffffffffffffff811115612ad757600080fd5b612ae3868287016127a5565b9497909650939450505050565b8015158114610a2d57600080fd5b60008060408385031215612b1157600080fd5b8235612b1c816128df565b9150602083013561294381612af0565b805182526020810151602083015260408101516040830152606081015160608301526000608082015160a06080850152612a9c60a085018261285a565b600061010073ffffffffffffffffffffffffffffffffffffffff8b168352896020840152886040840152806060840152612ba581840189612b2c565b9150508560808301528460a08301528360c08301528260e08301529998505050505050505050565b600080600080600060608688031215612be557600080fd5b85359450602086013567ffffffffffffffff80821115612c0457600080fd5b612c1089838a016127a5565b90965094506040880135915080821115612c2957600080fd5b50612c36888289016127a5565b969995985093965092949392505050565b60008060008060008060808789031215612c6057600080fd5b86359550602087013567ffffffffffffffff80821115612c7f57600080fd5b9088019060a0828b031215612c9357600080fd5b90955060408801359080821115612ca957600080fd5b612cb58a838b016127a5565b90965094506060890135915080821115612cce57600080fd5b50612cdb89828a016127a5565b979a9699509497509295939492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d7d57612d7d612d1c565b5060010190565b600082821015612d9657612d96612d1c565b500390565b600081612daa57612daa612d1c565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b600060208284031215612de257600080fd5b81516128d881612af0565b600060208284031215612dff57600080fd5b81516128d8816128df565b60008219821115612e1d57612e1d612d1c565b500190565b600181811c90821680612e3657607f821691505b60208210811415612e70577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b8054600090600180821691901c81612e8c57607f165b6020811080831415612ec7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b849250601f821115612edf5784600052602060002092505b825493508015612f17577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8260200360031b1b841693505b505050919050565b8183823760009101908152919050565b600060208284031215612f4157600080fd5b5051919050565b80516020808301519190811015612e70577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60209190910360031b1b16919050565b600060a08236031215612f9c57600080fd5b612fa4612996565b82358152602083013560208201526040830135604082015260608301356060820152608083013567ffffffffffffffff811115612fe057600080fd5b830136601f820112612ff157600080fd5b613000368235602084016129bf565b60808301525092915050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b8481528360208201526080604082015282356080820152602083013560a0820152604083013560c0820152606083013560e0820152600060808401357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18536030181126130c157600080fd5b8401803567ffffffffffffffff8111156130da57600080fd5b8036038613156130e957600080fd5b60a06101008501526131036101208501826020850161300c565b9250505082606083015295945050505050565b600061ffff80831681851680830382111561313357613133612d1c565b01949350505050565b600061ffff8381169083168181101561315757613157612d1c565b039392505050565b828152604060208201526000612a9c6040830184612b2c565b84815283602082015282604082015260806060820152600061319d608083018461285a565b969550505050505056fea2646970667358221220e5311cb8af0aa2479049ba6ff0cf880cb0504f4e97519b7163da582c51deccec64736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "resolve(string)": {
        "params": {
          "_name": "Name to resolve an address for."
        },
        "returns": {
          "_0": "Address associated with the given name."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "resolve(string)": {
        "notice": "Resolves the address associated with a given name."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 13209,
        "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
        "label": "libAddressManager",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(Lib_AddressManager)13201"
      },
      {
        "astId": 11450,
        "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
        "label": "verifier_stakes",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11456,
        "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
        "label": "challenge_keys",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bytes_storage))"
      },
      {
        "astId": 11462,
        "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
        "label": "challenge_key_hashes",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bytes_storage))"
      },
      {
        "astId": 11468,
        "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
        "label": "challenge_hashes",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bytes_storage))"
      },
      {
        "astId": 11474,
        "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
        "label": "consensus",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 11480,
        "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
        "label": "penalties",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 11485,
        "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
        "label": "challenge_verifiers",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 11489,
        "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
        "label": "chain_under_challenge",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 11493,
        "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
        "label": "whitelist",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 11495,
        "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
        "label": "useWhiteList",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 11498,
        "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
        "label": "verifiers",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 11502,
        "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
        "label": "challenges",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(Challenge)11446_storage)dyn_storage"
      },
      {
        "astId": 11507,
        "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
        "label": "verifyWindow",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 11509,
        "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
        "label": "activeChallenges",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 11513,
        "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
        "label": "rewards",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11515,
        "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
        "label": "metis",
        "offset": 0,
        "slot": "16",
        "type": "t_address"
      },
      {
        "astId": 11517,
        "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
        "label": "minStake",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 11519,
        "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
        "label": "allowWithdraw",
        "offset": 0,
        "slot": "18",
        "type": "t_bool"
      },
      {
        "astId": 11521,
        "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
        "label": "numQualifiedVerifiers",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Challenge)11446_storage)dyn_storage": {
        "base": "t_struct(Challenge)11446_storage",
        "encoding": "dynamic_array",
        "label": "struct MVM_Verifier.Challenge[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(Lib_AddressManager)13201": {
        "encoding": "inplace",
        "label": "contract Lib_AddressManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bytes_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bytes))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bytes_storage)"
      },
      "t_struct(ChainBatchHeader)12902_storage": {
        "encoding": "inplace",
        "label": "struct Lib_OVMCodec.ChainBatchHeader",
        "members": [
          {
            "astId": 12893,
            "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
            "label": "batchIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 12895,
            "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
            "label": "batchRoot",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 12897,
            "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
            "label": "batchSize",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 12899,
            "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
            "label": "prevTotalElements",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12901,
            "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
            "label": "extraData",
            "offset": 0,
            "slot": "4",
            "type": "t_bytes_storage"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(Challenge)11446_storage": {
        "encoding": "inplace",
        "label": "struct MVM_Verifier.Challenge",
        "members": [
          {
            "astId": 11430,
            "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
            "label": "challenger",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 11432,
            "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
            "label": "chainID",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11434,
            "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
            "label": "index",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11437,
            "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
            "label": "header",
            "offset": 0,
            "slot": "3",
            "type": "t_struct(ChainBatchHeader)12902_storage"
          },
          {
            "astId": 11439,
            "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
            "label": "timestamp",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 11441,
            "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
            "label": "numQualifiedVerifiers",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 11443,
            "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
            "label": "numVerify1",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 11445,
            "contract": "contracts/MVM/MVM_Verifier.sol:MVM_Verifier",
            "label": "numVerify2",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}